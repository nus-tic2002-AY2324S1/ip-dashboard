[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"jy0251"},"content":"    mainClass.set(\"Duke.Dupe\")","lastModifiedDate":"2023-11-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"jy0251"},"content":"    archiveBaseName \u003d \"dupe\"","lastModifiedDate":"2023-11-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jy0251":2,"-":40}},{"path":"colors.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"red","lastModifiedDate":"2023-09-17"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"blue","lastModifiedDate":"2023-09-17"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"green","lastModifiedDate":"2023-09-17"}],"authorContributionMap":{"jy0251":3}},{"path":"data/dupe.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"T | 0 | read book","lastModifiedDate":"2023-11-19"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"D | 0 | return book  | 2023-06-06T23:59","lastModifiedDate":"2023-11-19"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"E | 0 | project meeting  | 2023-08-06T14:00 | 2023-08-06T16:00","lastModifiedDate":"2023-11-19"}],"authorContributionMap":{"jy0251":3}},{"path":"fruits.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"apples","lastModifiedDate":"2023-09-17"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"bananas","lastModifiedDate":"2023-09-17"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"berries","lastModifiedDate":"2023-09-17"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"cherries","lastModifiedDate":"2023-09-17"}],"authorContributionMap":{"jy0251":4}},{"path":"shapes.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"square","lastModifiedDate":"2023-09-17"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"circle","lastModifiedDate":"2023-09-17"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"triangle","lastModifiedDate":"2023-09-17"}],"authorContributionMap":{"jy0251":3}},{"path":"src/main/java/Duke/Dupe.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"// Press Shift twice to open the Search Everywhere dialog and type `show whitespaces`,","lastModifiedDate":"2023-11-18"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"// then press Enter. You can now see whitespace characters in your code.","lastModifiedDate":"2023-09-17"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.DupeException;","lastModifiedDate":"2023-11-18"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.EmptyDescriptionException;","lastModifiedDate":"2023-11-18"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.IncompleteDataException;","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.UnknownCommandException;","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jy0251"},"content":"import Duke.TaskClasses.*;","lastModifiedDate":"2023-11-19"},{"lineNumber":11,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-09-17"},{"lineNumber":13,"author":{"gitId":"jy0251"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-19"},{"lineNumber":14,"author":{"gitId":"jy0251"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":16,"author":{"gitId":"jy0251"},"content":"public class Dupe {","lastModifiedDate":"2023-11-13"},{"lineNumber":17,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-09-17"},{"lineNumber":18,"author":{"gitId":"jy0251"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-13"},{"lineNumber":19,"author":{"gitId":"jy0251"},"content":"    private static Ui ui \u003d new Ui();","lastModifiedDate":"2023-11-13"},{"lineNumber":20,"author":{"gitId":"jy0251"},"content":"    private static final String FILE_PATH \u003d \"data/dupe.txt\"; // adjust the file path as needed","lastModifiedDate":"2023-11-13"},{"lineNumber":21,"author":{"gitId":"jy0251"},"content":"    private static Storage storage \u003d new Storage(FILE_PATH);","lastModifiedDate":"2023-11-13"},{"lineNumber":22,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":23,"author":{"gitId":"jy0251"},"content":"    public static void main(String[] args) throws DupeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":24,"author":{"gitId":"jy0251"},"content":"        try {","lastModifiedDate":"2023-11-13"},{"lineNumber":25,"author":{"gitId":"jy0251"},"content":"            tasks \u003d storage.load();","lastModifiedDate":"2023-11-19"},{"lineNumber":26,"author":{"gitId":"jy0251"},"content":"        } catch (DupeException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"jy0251"},"content":"            // Handle the exception (e.g., show an error message)","lastModifiedDate":"2023-11-13"},{"lineNumber":28,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"Error loading tasks: \" + e.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"jy0251"},"content":"        // Greet the user","lastModifiedDate":"2023-09-17"},{"lineNumber":31,"author":{"gitId":"jy0251"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-09-17"},{"lineNumber":33,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"jy0251"},"content":"        while (true) {","lastModifiedDate":"2023-09-18"},{"lineNumber":35,"author":{"gitId":"jy0251"},"content":"            String userInput \u003d ui.readCommand();","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"jy0251"},"content":"            ui.showLine();","lastModifiedDate":"2023-11-13"},{"lineNumber":37,"author":{"gitId":"jy0251"},"content":"            if (userInput.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-09-18"},{"lineNumber":38,"author":{"gitId":"jy0251"},"content":"                ui.showBye();","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"jy0251"},"content":"                break;","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"jy0251"},"content":"            else if (userInput.toLowerCase().startsWith(\"list\")) {","lastModifiedDate":"2023-11-13"},{"lineNumber":42,"author":{"gitId":"jy0251"},"content":"                displayTasks();","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"jy0251"},"content":"            } else if (userInput.toLowerCase().startsWith(\"mark \")) {","lastModifiedDate":"2023-11-13"},{"lineNumber":44,"author":{"gitId":"jy0251"},"content":"                markTaskAsDone(userInput);","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"jy0251"},"content":"            } else if (userInput.toLowerCase().startsWith(\"unmark \")) {","lastModifiedDate":"2023-11-13"},{"lineNumber":46,"author":{"gitId":"jy0251"},"content":"                unmarkTask(userInput);","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"jy0251"},"content":"            } else if(userInput.toLowerCase().startsWith(\"delete\")){","lastModifiedDate":"2023-11-13"},{"lineNumber":48,"author":{"gitId":"jy0251"},"content":"                deleteTask(userInput);","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"jy0251"},"content":"            } else if (userInput.toLowerCase().startsWith(\"recur\")) {","lastModifiedDate":"2023-11-19"},{"lineNumber":50,"author":{"gitId":"jy0251"},"content":"                handleRecurringEvent(userInput);","lastModifiedDate":"2023-11-19"},{"lineNumber":51,"author":{"gitId":"jy0251"},"content":"            } else if (userInput.toLowerCase().startsWith(\"find\")){","lastModifiedDate":"2023-11-19"},{"lineNumber":52,"author":{"gitId":"jy0251"},"content":"                findTasks(userInput);","lastModifiedDate":"2023-11-19"},{"lineNumber":53,"author":{"gitId":"jy0251"},"content":"            } else {","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"jy0251"},"content":"                addTask(userInput);","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":56,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"jy0251"},"content":"    private static void displayTasks() {","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"jy0251"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":61,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"The task list is currently empty\");","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"jy0251"},"content":"        } else {","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"jy0251"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-11-13"},{"lineNumber":65,"author":{"gitId":"jy0251"},"content":"                System.out.println((i + 1) + \". \" + tasks.get(i).toString());","lastModifiedDate":"2023-11-13"},{"lineNumber":66,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-09-18"},{"lineNumber":67,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":68,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":69,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"jy0251"},"content":"    private static void markTaskAsDone(String userInput) throws DupeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":71,"author":{"gitId":"jy0251"},"content":"        int taskIndex \u003d getTaskIndex(userInput);","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"jy0251"},"content":"        if (taskIndex \u003e\u003d 1 \u0026\u0026 taskIndex \u003c\u003d tasks.size()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":73,"author":{"gitId":"jy0251"},"content":"            Task task \u003d tasks.get(taskIndex - 1);","lastModifiedDate":"2023-11-13"},{"lineNumber":74,"author":{"gitId":"jy0251"},"content":"            task.markAsDone();","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"jy0251"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-11-13"},{"lineNumber":76,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"  \" + task.getStatusIcon() + \" \" + task.getDescription());","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"jy0251"},"content":"        } else {","lastModifiedDate":"2023-09-18"},{"lineNumber":79,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"Invalid task number.\");","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":82,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"jy0251"},"content":"    private static void unmarkTask(String userInput) throws DupeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":84,"author":{"gitId":"jy0251"},"content":"        int taskIndex \u003d getTaskIndex(userInput);","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"jy0251"},"content":"        if (taskIndex \u003e\u003d 1 \u0026\u0026 taskIndex \u003c\u003d tasks.size()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":86,"author":{"gitId":"jy0251"},"content":"            Task task \u003d tasks.get(taskIndex - 1);","lastModifiedDate":"2023-11-13"},{"lineNumber":87,"author":{"gitId":"jy0251"},"content":"            task.markAsNotDone();","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"jy0251"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-11-13"},{"lineNumber":89,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"  \" + task.getStatusIcon() + \" \" + task.getDescription());","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"jy0251"},"content":"        } else {","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"Invalid task number.\");","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-09-18"},{"lineNumber":94,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-09-17"},{"lineNumber":95,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":96,"author":{"gitId":"jy0251"},"content":"    private static int getTaskIndex(String userInput) {","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"jy0251"},"content":"        String[] parts \u003d userInput.split(\" \");","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"jy0251"},"content":"        if (parts.length \u003d\u003d 2) {","lastModifiedDate":"2023-10-24"},{"lineNumber":99,"author":{"gitId":"jy0251"},"content":"            try {","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"jy0251"},"content":"                return Integer.parseInt(parts[1]);","lastModifiedDate":"2023-10-24"},{"lineNumber":101,"author":{"gitId":"jy0251"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"jy0251"},"content":"                // Handle the case where the user didn\u0027t provide a valid number.","lastModifiedDate":"2023-10-24"},{"lineNumber":103,"author":{"gitId":"jy0251"},"content":"                System.out.println(\"Invalid task number format.\");","lastModifiedDate":"2023-11-13"},{"lineNumber":104,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-10-24"},{"lineNumber":105,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":106,"author":{"gitId":"jy0251"},"content":"        return -1; // Invalid input","lastModifiedDate":"2023-10-24"},{"lineNumber":107,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-09-17"},{"lineNumber":108,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"jy0251"},"content":"    private static void addTask(String userInput) {","lastModifiedDate":"2023-10-29"},{"lineNumber":110,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":111,"author":{"gitId":"jy0251"},"content":"            String[] inputParts \u003d userInput.split(\" \", 2);","lastModifiedDate":"2023-10-29"},{"lineNumber":112,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":113,"author":{"gitId":"jy0251"},"content":"            if (inputParts.length \u003c 2) {","lastModifiedDate":"2023-10-29"},{"lineNumber":114,"author":{"gitId":"jy0251"},"content":"                //throw error if the input is not the following","lastModifiedDate":"2023-10-29"},{"lineNumber":115,"author":{"gitId":"jy0251"},"content":"                if (!inputParts[0].equals(\"todo\") \u0026\u0026 !inputParts[0].equals(\"deadline\") \u0026\u0026 !inputParts[0].equals(\"event\")) {","lastModifiedDate":"2023-10-29"},{"lineNumber":116,"author":{"gitId":"jy0251"},"content":"                    try {","lastModifiedDate":"2023-10-29"},{"lineNumber":117,"author":{"gitId":"jy0251"},"content":"                        throw new UnknownCommandException();","lastModifiedDate":"2023-10-29"},{"lineNumber":118,"author":{"gitId":"jy0251"},"content":"                    } catch (UnknownCommandException e) {","lastModifiedDate":"2023-10-29"},{"lineNumber":119,"author":{"gitId":"jy0251"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2023-10-29"},{"lineNumber":120,"author":{"gitId":"jy0251"},"content":"                    }","lastModifiedDate":"2023-10-29"},{"lineNumber":121,"author":{"gitId":"jy0251"},"content":"                    return;","lastModifiedDate":"2023-10-29"},{"lineNumber":122,"author":{"gitId":"jy0251"},"content":"                }","lastModifiedDate":"2023-10-29"},{"lineNumber":123,"author":{"gitId":"jy0251"},"content":"                //else throw error if there\u0027s no description","lastModifiedDate":"2023-10-29"},{"lineNumber":124,"author":{"gitId":"jy0251"},"content":"                try {","lastModifiedDate":"2023-10-29"},{"lineNumber":125,"author":{"gitId":"jy0251"},"content":"                    throw new EmptyDescriptionException();","lastModifiedDate":"2023-10-29"},{"lineNumber":126,"author":{"gitId":"jy0251"},"content":"                } catch (EmptyDescriptionException e) {","lastModifiedDate":"2023-10-29"},{"lineNumber":127,"author":{"gitId":"jy0251"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-10-29"},{"lineNumber":128,"author":{"gitId":"jy0251"},"content":"                    return;","lastModifiedDate":"2023-10-29"},{"lineNumber":129,"author":{"gitId":"jy0251"},"content":"                }","lastModifiedDate":"2023-10-29"},{"lineNumber":130,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-10-29"},{"lineNumber":131,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":132,"author":{"gitId":"jy0251"},"content":"            String taskType \u003d inputParts[0].toLowerCase();","lastModifiedDate":"2023-10-29"},{"lineNumber":133,"author":{"gitId":"jy0251"},"content":"            String description \u003d inputParts[1].trim();","lastModifiedDate":"2023-10-29"},{"lineNumber":134,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":135,"author":{"gitId":"jy0251"},"content":"            try {","lastModifiedDate":"2023-10-29"},{"lineNumber":136,"author":{"gitId":"jy0251"},"content":"                Task task \u003d null;","lastModifiedDate":"2023-10-29"},{"lineNumber":137,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":138,"author":{"gitId":"jy0251"},"content":"                switch (taskType) {","lastModifiedDate":"2023-10-29"},{"lineNumber":139,"author":{"gitId":"jy0251"},"content":"                    case \"todo\":","lastModifiedDate":"2023-10-29"},{"lineNumber":140,"author":{"gitId":"jy0251"},"content":"                        if (description.isEmpty()) {","lastModifiedDate":"2023-10-29"},{"lineNumber":141,"author":{"gitId":"jy0251"},"content":"                            throw new EmptyDescriptionException();","lastModifiedDate":"2023-10-29"},{"lineNumber":142,"author":{"gitId":"jy0251"},"content":"                        }","lastModifiedDate":"2023-10-29"},{"lineNumber":143,"author":{"gitId":"jy0251"},"content":"                        task \u003d new ToDo(description);","lastModifiedDate":"2023-10-29"},{"lineNumber":144,"author":{"gitId":"jy0251"},"content":"                        break;","lastModifiedDate":"2023-10-29"},{"lineNumber":145,"author":{"gitId":"jy0251"},"content":"                    case \"deadline\":","lastModifiedDate":"2023-10-29"},{"lineNumber":146,"author":{"gitId":"jy0251"},"content":"                        String by \u003d extractBy(description);","lastModifiedDate":"2023-10-29"},{"lineNumber":147,"author":{"gitId":"jy0251"},"content":"                        String actualDescriptionDeadline \u003d extractDescription(description);","lastModifiedDate":"2023-10-29"},{"lineNumber":148,"author":{"gitId":"jy0251"},"content":"                        if (actualDescriptionDeadline.isEmpty()) {","lastModifiedDate":"2023-11-19"},{"lineNumber":149,"author":{"gitId":"jy0251"},"content":"                            throw new IncompleteDataException(); // Handle incomplete data","lastModifiedDate":"2023-10-29"},{"lineNumber":150,"author":{"gitId":"jy0251"},"content":"                        }","lastModifiedDate":"2023-10-29"},{"lineNumber":151,"author":{"gitId":"jy0251"},"content":"                        task \u003d new Deadline(actualDescriptionDeadline, by);","lastModifiedDate":"2023-10-29"},{"lineNumber":152,"author":{"gitId":"jy0251"},"content":"                        break;","lastModifiedDate":"2023-10-29"},{"lineNumber":153,"author":{"gitId":"jy0251"},"content":"                    case \"event\":","lastModifiedDate":"2023-10-29"},{"lineNumber":154,"author":{"gitId":"jy0251"},"content":"                        String from \u003d extractFrom(description);","lastModifiedDate":"2023-10-29"},{"lineNumber":155,"author":{"gitId":"jy0251"},"content":"                        String to \u003d extractTo(description);","lastModifiedDate":"2023-10-29"},{"lineNumber":156,"author":{"gitId":"jy0251"},"content":"                        String actualDescriptionEvent \u003d extractDescription(description);","lastModifiedDate":"2023-10-29"},{"lineNumber":157,"author":{"gitId":"jy0251"},"content":"                        if (actualDescriptionEvent.isEmpty()) {","lastModifiedDate":"2023-11-19"},{"lineNumber":158,"author":{"gitId":"jy0251"},"content":"                            throw new IncompleteDataException(); // Handle incomplete data","lastModifiedDate":"2023-10-29"},{"lineNumber":159,"author":{"gitId":"jy0251"},"content":"                        }","lastModifiedDate":"2023-10-29"},{"lineNumber":160,"author":{"gitId":"jy0251"},"content":"                        task \u003d new Event(actualDescriptionEvent, from, to);","lastModifiedDate":"2023-10-29"},{"lineNumber":161,"author":{"gitId":"jy0251"},"content":"                        break;","lastModifiedDate":"2023-10-29"},{"lineNumber":162,"author":{"gitId":"jy0251"},"content":"                    default:","lastModifiedDate":"2023-10-29"},{"lineNumber":163,"author":{"gitId":"jy0251"},"content":"                        throw new UnknownCommandException();","lastModifiedDate":"2023-10-29"},{"lineNumber":164,"author":{"gitId":"jy0251"},"content":"                }","lastModifiedDate":"2023-10-29"},{"lineNumber":165,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":166,"author":{"gitId":"jy0251"},"content":"                tasks.add(task);","lastModifiedDate":"2023-11-13"},{"lineNumber":167,"author":{"gitId":"jy0251"},"content":"                storage.save(tasks); //save to file after a new task is added","lastModifiedDate":"2023-11-13"},{"lineNumber":168,"author":{"gitId":"jy0251"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-10-29"},{"lineNumber":169,"author":{"gitId":"jy0251"},"content":"                System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-10-29"},{"lineNumber":170,"author":{"gitId":"jy0251"},"content":"                System.out.println(\"Now you have \" + (tasks.size()) + \" tasks in the list.\");","lastModifiedDate":"2023-11-13"},{"lineNumber":171,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":172,"author":{"gitId":"jy0251"},"content":"            } catch (DupeException e) {","lastModifiedDate":"2023-10-29"},{"lineNumber":173,"author":{"gitId":"jy0251"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-10-29"},{"lineNumber":174,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-10-29"},{"lineNumber":175,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":176,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":177,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":178,"author":{"gitId":"jy0251"},"content":"    private static String extractBy(String description) {","lastModifiedDate":"2023-10-29"},{"lineNumber":179,"author":{"gitId":"jy0251"},"content":"        //extract string after /by","lastModifiedDate":"2023-10-29"},{"lineNumber":180,"author":{"gitId":"jy0251"},"content":"        int byIndex \u003d description.indexOf(\"/by\");","lastModifiedDate":"2023-10-29"},{"lineNumber":181,"author":{"gitId":"jy0251"},"content":"        if (byIndex !\u003d -1 \u0026\u0026 byIndex + 3 \u003c description.length()) {","lastModifiedDate":"2023-11-19"},{"lineNumber":182,"author":{"gitId":"jy0251"},"content":"            return description.substring(byIndex + 3).trim();","lastModifiedDate":"2023-10-29"},{"lineNumber":183,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":184,"author":{"gitId":"jy0251"},"content":"        return \"\"; // Return an empty string if no \"/by\" information is found","lastModifiedDate":"2023-10-29"},{"lineNumber":185,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":186,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":187,"author":{"gitId":"jy0251"},"content":"    private static String extractFrom(String description) {","lastModifiedDate":"2023-10-29"},{"lineNumber":188,"author":{"gitId":"jy0251"},"content":"        int fromIndex \u003d description.indexOf(\"/from\");","lastModifiedDate":"2023-10-29"},{"lineNumber":189,"author":{"gitId":"jy0251"},"content":"        if (fromIndex !\u003d -1 \u0026\u0026 fromIndex + 5 \u003c description.length()) {","lastModifiedDate":"2023-11-19"},{"lineNumber":190,"author":{"gitId":"jy0251"},"content":"            int toIndex \u003d description.indexOf(\"/to\", fromIndex + 5);","lastModifiedDate":"2023-11-19"},{"lineNumber":191,"author":{"gitId":"jy0251"},"content":"            if (toIndex !\u003d -1) {","lastModifiedDate":"2023-11-19"},{"lineNumber":192,"author":{"gitId":"jy0251"},"content":"                return description.substring(fromIndex + 5, toIndex).trim();","lastModifiedDate":"2023-11-19"},{"lineNumber":193,"author":{"gitId":"jy0251"},"content":"            } else {","lastModifiedDate":"2023-11-19"},{"lineNumber":194,"author":{"gitId":"jy0251"},"content":"                // Handle the case where \"/to\" information is missing","lastModifiedDate":"2023-11-19"},{"lineNumber":195,"author":{"gitId":"jy0251"},"content":"                System.err.println(\"Missing \u0027/to\u0027 information after \u0027/from\u0027.\");","lastModifiedDate":"2023-11-19"},{"lineNumber":196,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-11-19"},{"lineNumber":197,"author":{"gitId":"jy0251"},"content":"        } else {","lastModifiedDate":"2023-11-19"},{"lineNumber":198,"author":{"gitId":"jy0251"},"content":"            // Handle the case where \"/from\" information is missing or incomplete","lastModifiedDate":"2023-11-19"},{"lineNumber":199,"author":{"gitId":"jy0251"},"content":"            System.err.println(\"Missing or incomplete \u0027/from\u0027 information.\");","lastModifiedDate":"2023-11-19"},{"lineNumber":200,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":201,"author":{"gitId":"jy0251"},"content":"        return \"\"; // Return an empty string if information is missing or invalid","lastModifiedDate":"2023-11-19"},{"lineNumber":202,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":203,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":204,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":205,"author":{"gitId":"jy0251"},"content":"    private static String extractTo(String description) {","lastModifiedDate":"2023-10-29"},{"lineNumber":206,"author":{"gitId":"jy0251"},"content":"        //extract string after /to","lastModifiedDate":"2023-10-29"},{"lineNumber":207,"author":{"gitId":"jy0251"},"content":"        int toIndex \u003d description.indexOf(\"/to\");","lastModifiedDate":"2023-10-29"},{"lineNumber":208,"author":{"gitId":"jy0251"},"content":"        if (toIndex !\u003d -1 \u0026\u0026 toIndex + 3 \u003c description.length()) {","lastModifiedDate":"2023-11-19"},{"lineNumber":209,"author":{"gitId":"jy0251"},"content":"            return description.substring(toIndex + 3).trim();","lastModifiedDate":"2023-10-29"},{"lineNumber":210,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":211,"author":{"gitId":"jy0251"},"content":"        return \"\"; // Return an empty string if no \"/to\" information is found","lastModifiedDate":"2023-10-29"},{"lineNumber":212,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":213,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":214,"author":{"gitId":"jy0251"},"content":"    private static String extractDescription(String description) {","lastModifiedDate":"2023-10-29"},{"lineNumber":215,"author":{"gitId":"jy0251"},"content":"        //extract description for userinputs that have more fields","lastModifiedDate":"2023-10-29"},{"lineNumber":216,"author":{"gitId":"jy0251"},"content":"        int toIndex \u003d description.indexOf(\"/\");","lastModifiedDate":"2023-10-29"},{"lineNumber":217,"author":{"gitId":"jy0251"},"content":"        if (toIndex !\u003d -1) {","lastModifiedDate":"2023-10-29"},{"lineNumber":218,"author":{"gitId":"jy0251"},"content":"            String[] splitDescription \u003d description.split(\"/\", 2);","lastModifiedDate":"2023-10-29"},{"lineNumber":219,"author":{"gitId":"jy0251"},"content":"            return splitDescription[0];","lastModifiedDate":"2023-10-29"},{"lineNumber":220,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":221,"author":{"gitId":"jy0251"},"content":"        return description;","lastModifiedDate":"2023-11-13"},{"lineNumber":222,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":223,"author":{"gitId":"jy0251"},"content":"    private static void deleteTask(String userInput) {","lastModifiedDate":"2023-10-29"},{"lineNumber":224,"author":{"gitId":"jy0251"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":225,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"The task list is currently empty. Nothing to delete.\");","lastModifiedDate":"2023-10-29"},{"lineNumber":226,"author":{"gitId":"jy0251"},"content":"            return;","lastModifiedDate":"2023-10-29"},{"lineNumber":227,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":228,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":229,"author":{"gitId":"jy0251"},"content":"        // Parse the user input to extract the task index to delete","lastModifiedDate":"2023-10-29"},{"lineNumber":230,"author":{"gitId":"jy0251"},"content":"        String[] inputParts \u003d userInput.split(\" \");","lastModifiedDate":"2023-10-29"},{"lineNumber":231,"author":{"gitId":"jy0251"},"content":"        if (inputParts.length !\u003d 2) {","lastModifiedDate":"2023-10-29"},{"lineNumber":232,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"Invalid delete command. Use \u0027delete [task index]\u0027.\");","lastModifiedDate":"2023-10-29"},{"lineNumber":233,"author":{"gitId":"jy0251"},"content":"            return;","lastModifiedDate":"2023-10-29"},{"lineNumber":234,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":235,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":236,"author":{"gitId":"jy0251"},"content":"        try {","lastModifiedDate":"2023-10-29"},{"lineNumber":237,"author":{"gitId":"jy0251"},"content":"            int taskIndex \u003d Integer.parseInt(inputParts[1]);","lastModifiedDate":"2023-10-29"},{"lineNumber":238,"author":{"gitId":"jy0251"},"content":"            if (taskIndex \u003c 1 || taskIndex \u003e tasks.size()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":239,"author":{"gitId":"jy0251"},"content":"                System.out.println(\"Duke.TaskClasses.Task index is out of range.\");","lastModifiedDate":"2023-11-18"},{"lineNumber":240,"author":{"gitId":"jy0251"},"content":"            } else {","lastModifiedDate":"2023-10-29"},{"lineNumber":241,"author":{"gitId":"jy0251"},"content":"                // Remove the task from the list","lastModifiedDate":"2023-10-29"},{"lineNumber":242,"author":{"gitId":"jy0251"},"content":"                Task deletedTask \u003d tasks.remove(taskIndex - 1);","lastModifiedDate":"2023-11-13"},{"lineNumber":243,"author":{"gitId":"jy0251"},"content":"                storage.save(tasks);","lastModifiedDate":"2023-11-13"},{"lineNumber":244,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":245,"author":{"gitId":"jy0251"},"content":"                System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-10-29"},{"lineNumber":246,"author":{"gitId":"jy0251"},"content":"                System.out.println(\"  \" + deletedTask.toString());","lastModifiedDate":"2023-10-29"},{"lineNumber":247,"author":{"gitId":"jy0251"},"content":"                System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-11-13"},{"lineNumber":248,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-10-29"},{"lineNumber":249,"author":{"gitId":"jy0251"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-10-29"},{"lineNumber":250,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"Invalid task index. Please enter a valid number.\");","lastModifiedDate":"2023-10-29"},{"lineNumber":251,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":252,"author":{"gitId":"jy0251"},"content":"        catch (DupeException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":253,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"Error saving tasks: \" + e.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":254,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":255,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":256,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":257,"author":{"gitId":"jy0251"},"content":"    private static void handleRecurringEvent(String userInput) {","lastModifiedDate":"2023-11-19"},{"lineNumber":258,"author":{"gitId":"jy0251"},"content":"        String[] words \u003d userInput.trim().split(\"\\\\s+\");","lastModifiedDate":"2023-11-19"},{"lineNumber":259,"author":{"gitId":"jy0251"},"content":"        if (words.length \u003d\u003d 4) {","lastModifiedDate":"2023-11-19"},{"lineNumber":260,"author":{"gitId":"jy0251"},"content":"            int taskNumber \u003d Integer.parseInt(words[1]);","lastModifiedDate":"2023-11-19"},{"lineNumber":261,"author":{"gitId":"jy0251"},"content":"            if (taskNumber \u003e 1 \u0026\u0026 taskNumber \u003c tasks.size()) {","lastModifiedDate":"2023-11-19"},{"lineNumber":262,"author":{"gitId":"jy0251"},"content":"                try {","lastModifiedDate":"2023-11-19"},{"lineNumber":263,"author":{"gitId":"jy0251"},"content":"                    String recurrenceType \u003d words[2].toUpperCase(); // Convert to uppercase","lastModifiedDate":"2023-11-19"},{"lineNumber":264,"author":{"gitId":"jy0251"},"content":"                    int recurrenceCount \u003d Integer.parseInt(words[3]);","lastModifiedDate":"2023-11-19"},{"lineNumber":265,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":266,"author":{"gitId":"jy0251"},"content":"                    // Call the corresponding method to add recurring event based on the parsed information","lastModifiedDate":"2023-11-19"},{"lineNumber":267,"author":{"gitId":"jy0251"},"content":"                    addRecurringEvent(taskNumber, Recurrence.valueOf(recurrenceType), recurrenceCount);","lastModifiedDate":"2023-11-19"},{"lineNumber":268,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":269,"author":{"gitId":"jy0251"},"content":"                } catch (DupeException e) {","lastModifiedDate":"2023-11-19"},{"lineNumber":270,"author":{"gitId":"jy0251"},"content":"                    System.err.println(\"unable to save\");","lastModifiedDate":"2023-11-19"},{"lineNumber":271,"author":{"gitId":"jy0251"},"content":"                } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-11-19"},{"lineNumber":272,"author":{"gitId":"jy0251"},"content":"                    System.err.println(\"Invalid recurrence type. Please provide a valid recurrence type (e.g., DAILY, WEEKLY, BIWEEKLY, MONTHLY).\");","lastModifiedDate":"2023-11-19"},{"lineNumber":273,"author":{"gitId":"jy0251"},"content":"                }","lastModifiedDate":"2023-11-19"},{"lineNumber":274,"author":{"gitId":"jy0251"},"content":"            } else {","lastModifiedDate":"2023-11-19"},{"lineNumber":275,"author":{"gitId":"jy0251"},"content":"                System.err.println(\"Duke.TaskClasses.Task index is out of range.\");","lastModifiedDate":"2023-11-19"},{"lineNumber":276,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-11-19"},{"lineNumber":277,"author":{"gitId":"jy0251"},"content":"        } else {","lastModifiedDate":"2023-11-19"},{"lineNumber":278,"author":{"gitId":"jy0251"},"content":"            System.err.println(\"Invalid input format. Please use the format: recur \u003ctaskNumber\u003e \u003crecurrenceType\u003e \u003crecurrenceInterval\u003e \u003crecurrenceCount\u003e\");","lastModifiedDate":"2023-11-19"},{"lineNumber":279,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-19"},{"lineNumber":280,"author":{"gitId":"jy0251"},"content":"        // Call the corresponding method to add recurring event based on the parsed information","lastModifiedDate":"2023-11-19"},{"lineNumber":281,"author":{"gitId":"jy0251"},"content":"        // For example, if userInput is \"recur 2 biweekly 4\", you might extract taskNumber\u003d2, recurrenceType\u003dBIWEEKLY, recurrenceInterval\u003d2, recurrenceCount\u003d4","lastModifiedDate":"2023-11-19"},{"lineNumber":282,"author":{"gitId":"jy0251"},"content":"        // Then call addRecurringEvent method with these parameters","lastModifiedDate":"2023-11-19"},{"lineNumber":283,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":284,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":285,"author":{"gitId":"jy0251"},"content":"    private static void addRecurringEvent(int taskNumber, Recurrence recurrenceType, int recurrenceCount) throws DupeException {","lastModifiedDate":"2023-11-19"},{"lineNumber":286,"author":{"gitId":"jy0251"},"content":"        // Retrieve the task from the tasks list based on taskNumber","lastModifiedDate":"2023-11-19"},{"lineNumber":287,"author":{"gitId":"jy0251"},"content":"        Task eventTask \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-11-19"},{"lineNumber":288,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":289,"author":{"gitId":"jy0251"},"content":"        if (eventTask instanceof Event) {","lastModifiedDate":"2023-11-19"},{"lineNumber":290,"author":{"gitId":"jy0251"},"content":"            for (int i \u003d 0; i \u003c recurrenceCount; i++) {","lastModifiedDate":"2023-11-19"},{"lineNumber":291,"author":{"gitId":"jy0251"},"content":"                LocalDateTime originalFrom \u003d ((Event) eventTask).getFromDateTime();","lastModifiedDate":"2023-11-19"},{"lineNumber":292,"author":{"gitId":"jy0251"},"content":"                LocalDateTime originalTo \u003d ((Event) eventTask).getToDateTime();","lastModifiedDate":"2023-11-19"},{"lineNumber":293,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":294,"author":{"gitId":"jy0251"},"content":"                LocalDateTime newFrom, newTo;","lastModifiedDate":"2023-11-19"},{"lineNumber":295,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":296,"author":{"gitId":"jy0251"},"content":"                switch (recurrenceType) {","lastModifiedDate":"2023-11-19"},{"lineNumber":297,"author":{"gitId":"jy0251"},"content":"                    case DAILY:","lastModifiedDate":"2023-11-19"},{"lineNumber":298,"author":{"gitId":"jy0251"},"content":"                        newFrom \u003d originalFrom.plusDays(1 * (i + 1));","lastModifiedDate":"2023-11-19"},{"lineNumber":299,"author":{"gitId":"jy0251"},"content":"                        newTo \u003d originalTo.plusDays(1 * (i + 1));","lastModifiedDate":"2023-11-19"},{"lineNumber":300,"author":{"gitId":"jy0251"},"content":"                        break;","lastModifiedDate":"2023-11-19"},{"lineNumber":301,"author":{"gitId":"jy0251"},"content":"                    case WEEKLY:","lastModifiedDate":"2023-11-19"},{"lineNumber":302,"author":{"gitId":"jy0251"},"content":"                        newFrom \u003d originalFrom.plusWeeks(1 * (i + 1));","lastModifiedDate":"2023-11-19"},{"lineNumber":303,"author":{"gitId":"jy0251"},"content":"                        newTo \u003d originalTo.plusWeeks(1 * (i + 1));","lastModifiedDate":"2023-11-19"},{"lineNumber":304,"author":{"gitId":"jy0251"},"content":"                        break;","lastModifiedDate":"2023-11-19"},{"lineNumber":305,"author":{"gitId":"jy0251"},"content":"                    case BIWEEKLY:","lastModifiedDate":"2023-11-19"},{"lineNumber":306,"author":{"gitId":"jy0251"},"content":"                        newFrom \u003d originalFrom.plusWeeks(2 * (i + 1));","lastModifiedDate":"2023-11-19"},{"lineNumber":307,"author":{"gitId":"jy0251"},"content":"                        newTo \u003d originalTo.plusWeeks(2 * (i + 1));","lastModifiedDate":"2023-11-19"},{"lineNumber":308,"author":{"gitId":"jy0251"},"content":"                        break;","lastModifiedDate":"2023-11-19"},{"lineNumber":309,"author":{"gitId":"jy0251"},"content":"                    case MONTHLY:","lastModifiedDate":"2023-11-19"},{"lineNumber":310,"author":{"gitId":"jy0251"},"content":"                        newFrom \u003d originalFrom.plusMonths(1 * (i + 1));","lastModifiedDate":"2023-11-19"},{"lineNumber":311,"author":{"gitId":"jy0251"},"content":"                        newTo \u003d originalTo.plusMonths(1 * (i + 1));","lastModifiedDate":"2023-11-19"},{"lineNumber":312,"author":{"gitId":"jy0251"},"content":"                        break;","lastModifiedDate":"2023-11-19"},{"lineNumber":313,"author":{"gitId":"jy0251"},"content":"                    default:","lastModifiedDate":"2023-11-19"},{"lineNumber":314,"author":{"gitId":"jy0251"},"content":"                        throw new IllegalArgumentException(\"Unsupported recurrence type\");","lastModifiedDate":"2023-11-19"},{"lineNumber":315,"author":{"gitId":"jy0251"},"content":"                }","lastModifiedDate":"2023-11-19"},{"lineNumber":316,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":317,"author":{"gitId":"jy0251"},"content":"                // Create a new task with the same properties as the original task","lastModifiedDate":"2023-11-19"},{"lineNumber":318,"author":{"gitId":"jy0251"},"content":"                Task recurringTask \u003d new Event(eventTask.getDescription(), newFrom, newTo);","lastModifiedDate":"2023-11-19"},{"lineNumber":319,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":320,"author":{"gitId":"jy0251"},"content":"                // Add the recurring task to the tasks list","lastModifiedDate":"2023-11-19"},{"lineNumber":321,"author":{"gitId":"jy0251"},"content":"                tasks.add(recurringTask);","lastModifiedDate":"2023-11-19"},{"lineNumber":322,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-11-19"},{"lineNumber":323,"author":{"gitId":"jy0251"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-11-19"},{"lineNumber":324,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"Recurring event added successfully!\");","lastModifiedDate":"2023-11-19"},{"lineNumber":325,"author":{"gitId":"jy0251"},"content":"        } else {","lastModifiedDate":"2023-11-19"},{"lineNumber":326,"author":{"gitId":"jy0251"},"content":"            System.err.println(\"Task \" + taskNumber + \" is not an event and cannot have a recurrence.\");","lastModifiedDate":"2023-11-19"},{"lineNumber":327,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-19"},{"lineNumber":328,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":329,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":330,"author":{"gitId":"jy0251"},"content":"    private static void findTasks(String userInput) {","lastModifiedDate":"2023-11-19"},{"lineNumber":331,"author":{"gitId":"jy0251"},"content":"        String keyword \u003d userInput.substring(\"find\".length()).trim();","lastModifiedDate":"2023-11-19"},{"lineNumber":332,"author":{"gitId":"jy0251"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-11-19"},{"lineNumber":333,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"The task list is currently empty\");","lastModifiedDate":"2023-11-19"},{"lineNumber":334,"author":{"gitId":"jy0251"},"content":"        } else {","lastModifiedDate":"2023-11-19"},{"lineNumber":335,"author":{"gitId":"jy0251"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-11-19"},{"lineNumber":336,"author":{"gitId":"jy0251"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-11-19"},{"lineNumber":337,"author":{"gitId":"jy0251"},"content":"                if(tasks.get(i).getDescription().toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2023-11-19"},{"lineNumber":338,"author":{"gitId":"jy0251"},"content":"                    System.out.println((i + 1) + \". \" + tasks.get(i).toString());","lastModifiedDate":"2023-11-19"},{"lineNumber":339,"author":{"gitId":"jy0251"},"content":"                }","lastModifiedDate":"2023-11-19"},{"lineNumber":340,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-11-19"},{"lineNumber":341,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-19"},{"lineNumber":342,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":343,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-10-24"},{"lineNumber":344,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"jy0251":344}},{"path":"src/main/java/Duke/ExceptionClasses/CorruptedFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke.ExceptionClasses;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"public class CorruptedFileException extends DupeException {","lastModifiedDate":"2023-11-16"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"    public CorruptedFileException(String message) {","lastModifiedDate":"2023-11-13"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"        super(message);","lastModifiedDate":"2023-11-13"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-11-13"}],"authorContributionMap":{"jy0251":7}},{"path":"src/main/java/Duke/ExceptionClasses/DupeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke.ExceptionClasses;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"public class DupeException extends Exception{","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"    public DupeException(String message) {","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"        super(message);","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"jy0251":8}},{"path":"src/main/java/Duke/ExceptionClasses/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke.ExceptionClasses;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"public class EmptyDescriptionException extends DupeException {","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"    public EmptyDescriptionException() {","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"        super(\"OOPS!!! The description cannot be be empty.\");","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"jy0251":7}},{"path":"src/main/java/Duke/ExceptionClasses/IncompleteDataException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke.ExceptionClasses;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"public class IncompleteDataException extends DupeException {","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"    public IncompleteDataException() {","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"        super(\"OOPS!!! The task is missing essential data.\");","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"    public IncompleteDataException(String additionalMessage) {","lastModifiedDate":"2023-11-13"},{"lineNumber":8,"author":{"gitId":"jy0251"},"content":"        super(\"OOPS!!! The task is missing essential data. \" + additionalMessage);","lastModifiedDate":"2023-11-13"},{"lineNumber":9,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":10,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"jy0251":10}},{"path":"src/main/java/Duke/ExceptionClasses/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke.ExceptionClasses;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"public class UnknownCommandException extends DupeException {","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"    public UnknownCommandException() {","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"jy0251":7}},{"path":"src/main/java/Duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.CorruptedFileException;","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.DupeException;","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.IncompleteDataException;","lastModifiedDate":"2023-11-18"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"import Duke.TaskClasses.Task;","lastModifiedDate":"2023-11-18"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"jy0251"},"content":"import java.io.File;","lastModifiedDate":"2023-11-13"},{"lineNumber":9,"author":{"gitId":"jy0251"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-11-13"},{"lineNumber":10,"author":{"gitId":"jy0251"},"content":"import java.io.IOException;","lastModifiedDate":"2023-11-13"},{"lineNumber":11,"author":{"gitId":"jy0251"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"jy0251"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-11-13"},{"lineNumber":13,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":14,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"jy0251"},"content":"public class Storage {","lastModifiedDate":"2023-11-13"},{"lineNumber":16,"author":{"gitId":"jy0251"},"content":"    private String filePath;","lastModifiedDate":"2023-11-13"},{"lineNumber":17,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":18,"author":{"gitId":"jy0251"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-11-13"},{"lineNumber":19,"author":{"gitId":"jy0251"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-11-13"},{"lineNumber":20,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":21,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":22,"author":{"gitId":"jy0251"},"content":"    public ArrayList\u003cTask\u003e load() throws DupeException {","lastModifiedDate":"2023-11-19"},{"lineNumber":23,"author":{"gitId":"jy0251"},"content":"        ArrayList\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-13"},{"lineNumber":24,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":25,"author":{"gitId":"jy0251"},"content":"        try {","lastModifiedDate":"2023-11-13"},{"lineNumber":26,"author":{"gitId":"jy0251"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":28,"author":{"gitId":"jy0251"},"content":"            if (file.exists()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"jy0251"},"content":"                Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"jy0251"},"content":"                while (scanner.hasNext()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":31,"author":{"gitId":"jy0251"},"content":"                    String taskString \u003d scanner.nextLine();","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"jy0251"},"content":"                    try {","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"jy0251"},"content":"                        Task task \u003d Task.fromFileString(taskString);","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"jy0251"},"content":"                        if (task !\u003d null) {","lastModifiedDate":"2023-11-13"},{"lineNumber":35,"author":{"gitId":"jy0251"},"content":"                            loadedTasks.add(task);","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"jy0251"},"content":"                        }","lastModifiedDate":"2023-11-13"},{"lineNumber":37,"author":{"gitId":"jy0251"},"content":"                    } catch (CorruptedFileException | IncompleteDataException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"jy0251"},"content":"                        System.err.println(\"Error loading task from file: \" + e.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"jy0251"},"content":"                    }","lastModifiedDate":"2023-11-13"},{"lineNumber":40,"author":{"gitId":"jy0251"},"content":"                }","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"jy0251"},"content":"                scanner.close();","lastModifiedDate":"2023-11-13"},{"lineNumber":42,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":43,"author":{"gitId":"jy0251"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":44,"author":{"gitId":"jy0251"},"content":"            throw new DupeException(\"Error loading tasks from file: \" + e.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":45,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":46,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":47,"author":{"gitId":"jy0251"},"content":"        return loadedTasks;","lastModifiedDate":"2023-11-13"},{"lineNumber":48,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":49,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":50,"author":{"gitId":"jy0251"},"content":"    public void save(ArrayList\u003cTask\u003e tasks) throws DupeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":51,"author":{"gitId":"jy0251"},"content":"        try {","lastModifiedDate":"2023-11-13"},{"lineNumber":52,"author":{"gitId":"jy0251"},"content":"            // Specify the directory path","lastModifiedDate":"2023-11-13"},{"lineNumber":53,"author":{"gitId":"jy0251"},"content":"            String directoryPath \u003d \"./data/\";","lastModifiedDate":"2023-11-13"},{"lineNumber":54,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":55,"author":{"gitId":"jy0251"},"content":"            // Create the directory if it doesn\u0027t exist","lastModifiedDate":"2023-11-13"},{"lineNumber":56,"author":{"gitId":"jy0251"},"content":"            File directory \u003d new File(directoryPath);","lastModifiedDate":"2023-11-13"},{"lineNumber":57,"author":{"gitId":"jy0251"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":58,"author":{"gitId":"jy0251"},"content":"                directory.mkdirs(); // Creates the directory and any necessary parent directories","lastModifiedDate":"2023-11-13"},{"lineNumber":59,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":60,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":61,"author":{"gitId":"jy0251"},"content":"            // Now, save the tasks to the file within the directory","lastModifiedDate":"2023-11-13"},{"lineNumber":62,"author":{"gitId":"jy0251"},"content":"            FileWriter writer \u003d new FileWriter(filePath);","lastModifiedDate":"2023-11-13"},{"lineNumber":63,"author":{"gitId":"jy0251"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-11-13"},{"lineNumber":64,"author":{"gitId":"jy0251"},"content":"                writer.write(task.toFileString() + \"\\n\");","lastModifiedDate":"2023-11-13"},{"lineNumber":65,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":66,"author":{"gitId":"jy0251"},"content":"            writer.close();","lastModifiedDate":"2023-11-13"},{"lineNumber":67,"author":{"gitId":"jy0251"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":68,"author":{"gitId":"jy0251"},"content":"            throw new DupeException(\"Error saving tasks to file: \" + e.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":69,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":70,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":71,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-11-13"}],"authorContributionMap":{"jy0251":71}},{"path":"src/main/java/Duke/TaskClasses/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke.TaskClasses;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.IncompleteDataException;","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-16"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-11-16"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-11-16"},{"lineNumber":8,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-16"},{"lineNumber":9,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":10,"author":{"gitId":"jy0251"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"jy0251"},"content":"    private LocalDateTime by;","lastModifiedDate":"2023-11-16"},{"lineNumber":12,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"jy0251"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":14,"author":{"gitId":"jy0251"},"content":"     * Constructs a task with the given description.","lastModifiedDate":"2023-11-19"},{"lineNumber":15,"author":{"gitId":"jy0251"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":16,"author":{"gitId":"jy0251"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-11-19"},{"lineNumber":17,"author":{"gitId":"jy0251"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":18,"author":{"gitId":"jy0251"},"content":"     * This constructor is used when user adds new task","lastModifiedDate":"2023-11-19"},{"lineNumber":19,"author":{"gitId":"jy0251"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":20,"author":{"gitId":"jy0251"},"content":"    public Deadline(String description, String by) throws IncompleteDataException {","lastModifiedDate":"2023-11-13"},{"lineNumber":21,"author":{"gitId":"jy0251"},"content":"        //parser for user input","lastModifiedDate":"2023-11-16"},{"lineNumber":22,"author":{"gitId":"jy0251"},"content":"        super(description);","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"jy0251"},"content":"        if (by \u003d\u003d null || by.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":24,"author":{"gitId":"jy0251"},"content":"            throw new IncompleteDataException(\"Deadline \u0027by\u0027 information is missing\");","lastModifiedDate":"2023-11-13"},{"lineNumber":25,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":26,"author":{"gitId":"jy0251"},"content":"        parseDateTime(by);","lastModifiedDate":"2023-11-19"},{"lineNumber":27,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"jy0251"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":30,"author":{"gitId":"jy0251"},"content":"     * Constructs a task with the given description and completion status.","lastModifiedDate":"2023-11-19"},{"lineNumber":31,"author":{"gitId":"jy0251"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":32,"author":{"gitId":"jy0251"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-11-19"},{"lineNumber":33,"author":{"gitId":"jy0251"},"content":"     * @param isDone      The completion status of the task.","lastModifiedDate":"2023-11-19"},{"lineNumber":34,"author":{"gitId":"jy0251"},"content":"     * @throws IncompleteDataException If the task data is incomplete.","lastModifiedDate":"2023-11-19"},{"lineNumber":35,"author":{"gitId":"jy0251"},"content":"     * This constructor is used when loading tasks from a saved file.","lastModifiedDate":"2023-11-19"},{"lineNumber":36,"author":{"gitId":"jy0251"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":37,"author":{"gitId":"jy0251"},"content":"    public Deadline(String description, String by, boolean isDone) throws IncompleteDataException {","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"jy0251"},"content":"        //parser for saved file","lastModifiedDate":"2023-11-16"},{"lineNumber":39,"author":{"gitId":"jy0251"},"content":"        super(description, isDone);","lastModifiedDate":"2023-11-13"},{"lineNumber":40,"author":{"gitId":"jy0251"},"content":"        if (by \u003d\u003d null || by.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"jy0251"},"content":"            throw new IncompleteDataException(\"Deadline \u0027by\u0027 information is missing\");","lastModifiedDate":"2023-11-13"},{"lineNumber":42,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":43,"author":{"gitId":"jy0251"},"content":"        parseDateTime(by);","lastModifiedDate":"2023-11-19"},{"lineNumber":44,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-16"},{"lineNumber":45,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-16"},{"lineNumber":46,"author":{"gitId":"jy0251"},"content":"    private void parseDateTime(String by) throws IncompleteDataException {","lastModifiedDate":"2023-11-19"},{"lineNumber":47,"author":{"gitId":"jy0251"},"content":"        //System.out.println(by);","lastModifiedDate":"2023-11-16"},{"lineNumber":48,"author":{"gitId":"jy0251"},"content":"        try {","lastModifiedDate":"2023-11-16"},{"lineNumber":49,"author":{"gitId":"jy0251"},"content":"            DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd[\u0027T\u0027HH:mm][ HH:mm]\");","lastModifiedDate":"2023-11-19"},{"lineNumber":50,"author":{"gitId":"jy0251"},"content":"            this.by \u003d LocalDateTime.parse(by, formatter1);","lastModifiedDate":"2023-11-19"},{"lineNumber":51,"author":{"gitId":"jy0251"},"content":"        } catch (DateTimeParseException e1) {","lastModifiedDate":"2023-11-19"},{"lineNumber":52,"author":{"gitId":"jy0251"},"content":"            try {","lastModifiedDate":"2023-11-19"},{"lineNumber":53,"author":{"gitId":"jy0251"},"content":"                DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd[\u0027T\u0027HH:mm][ HH:mm]\");","lastModifiedDate":"2023-11-19"},{"lineNumber":54,"author":{"gitId":"jy0251"},"content":"                this.by \u003d LocalDateTime.parse(by, formatter2);","lastModifiedDate":"2023-11-19"},{"lineNumber":55,"author":{"gitId":"jy0251"},"content":"            } catch (DateTimeParseException e2) {","lastModifiedDate":"2023-11-19"},{"lineNumber":56,"author":{"gitId":"jy0251"},"content":"                throw new IncompleteDataException(\"Invalid date format for Deadline \u0027by\u0027 information, please ensure format is in yyyy/mm/dd hh:mm\");","lastModifiedDate":"2023-11-19"},{"lineNumber":57,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-11-16"},{"lineNumber":58,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":59,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":60,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":61,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-16"},{"lineNumber":62,"author":{"gitId":"jy0251"},"content":"    @Override","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"jy0251"},"content":"    public String toString() {","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"jy0251"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + by + \")\";","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":67,"author":{"gitId":"jy0251"},"content":"    @Override","lastModifiedDate":"2023-11-13"},{"lineNumber":68,"author":{"gitId":"jy0251"},"content":"    public String toFileString() {","lastModifiedDate":"2023-11-13"},{"lineNumber":69,"author":{"gitId":"jy0251"},"content":"        String isDoneSymbol \u003d getIsDone() ? \"1\" : \"0\";","lastModifiedDate":"2023-11-13"},{"lineNumber":70,"author":{"gitId":"jy0251"},"content":"        return \"D | \" + isDoneSymbol + \" | \" + description + \" | \" + by;","lastModifiedDate":"2023-11-13"},{"lineNumber":71,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":72,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"jy0251":72}},{"path":"src/main/java/Duke/TaskClasses/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke.TaskClasses;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.IncompleteDataException;","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-16"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-16"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-11-16"},{"lineNumber":8,"author":{"gitId":"jy0251"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-11-16"},{"lineNumber":9,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-16"},{"lineNumber":10,"author":{"gitId":"jy0251"},"content":"public class Event extends Task {","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"jy0251"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-11-16"},{"lineNumber":12,"author":{"gitId":"jy0251"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-11-16"},{"lineNumber":13,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":15,"author":{"gitId":"jy0251"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":16,"author":{"gitId":"jy0251"},"content":"     * Constructs an event task with the given description, start, and end date/time","lastModifiedDate":"2023-11-19"},{"lineNumber":17,"author":{"gitId":"jy0251"},"content":"     * provided as string representations.","lastModifiedDate":"2023-11-19"},{"lineNumber":18,"author":{"gitId":"jy0251"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":19,"author":{"gitId":"jy0251"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-11-19"},{"lineNumber":20,"author":{"gitId":"jy0251"},"content":"     * @param from        The start date/time of the event in string format.","lastModifiedDate":"2023-11-19"},{"lineNumber":21,"author":{"gitId":"jy0251"},"content":"     * @param to          The end date/time of the event in string format.","lastModifiedDate":"2023-11-19"},{"lineNumber":22,"author":{"gitId":"jy0251"},"content":"     * @throws IncompleteDataException If the provided date/time strings are in an invalid format.","lastModifiedDate":"2023-11-19"},{"lineNumber":23,"author":{"gitId":"jy0251"},"content":"     * * This constructor is used when user adds new task","lastModifiedDate":"2023-11-19"},{"lineNumber":24,"author":{"gitId":"jy0251"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":25,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":26,"author":{"gitId":"jy0251"},"content":"    public Event(String description, String from, String to) throws IncompleteDataException {","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"jy0251"},"content":"        super(description);","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"jy0251"},"content":"        if (from \u003d\u003d null || from.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"jy0251"},"content":"            throw new IncompleteDataException(\"Missing \u0027from\u0027 information in Event task\");","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":31,"author":{"gitId":"jy0251"},"content":"        if (to \u003d\u003d null || to.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"jy0251"},"content":"            throw new IncompleteDataException(\"Missing \u0027to\u0027 information in Event task\");","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"jy0251"},"content":"        try {","lastModifiedDate":"2023-11-16"},{"lineNumber":35,"author":{"gitId":"jy0251"},"content":"            // Attempt to parse \"from\" and \"to\" strings into LocalDateTime","lastModifiedDate":"2023-11-16"},{"lineNumber":36,"author":{"gitId":"jy0251"},"content":"            this.from \u003d parseEventDateTime(from);","lastModifiedDate":"2023-11-16"},{"lineNumber":37,"author":{"gitId":"jy0251"},"content":"            this.to \u003d parseEventDateTime(to);","lastModifiedDate":"2023-11-16"},{"lineNumber":38,"author":{"gitId":"jy0251"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-11-16"},{"lineNumber":39,"author":{"gitId":"jy0251"},"content":"            // Handle the case where the date/time strings are not in the expected format","lastModifiedDate":"2023-11-16"},{"lineNumber":40,"author":{"gitId":"jy0251"},"content":"            throw new IncompleteDataException(\"Invalid date/time format in Event task: \" + e.getMessage());","lastModifiedDate":"2023-11-16"},{"lineNumber":41,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-16"},{"lineNumber":42,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":44,"author":{"gitId":"jy0251"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":45,"author":{"gitId":"jy0251"},"content":"     * Constructs an event task with the given description, start, and end date/time,","lastModifiedDate":"2023-11-19"},{"lineNumber":46,"author":{"gitId":"jy0251"},"content":"     * provided as string representations, and sets its completion status.","lastModifiedDate":"2023-11-19"},{"lineNumber":47,"author":{"gitId":"jy0251"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":48,"author":{"gitId":"jy0251"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-11-19"},{"lineNumber":49,"author":{"gitId":"jy0251"},"content":"     * @param from        The start date/time of the event in string format.","lastModifiedDate":"2023-11-19"},{"lineNumber":50,"author":{"gitId":"jy0251"},"content":"     * @param to          The end date/time of the event in string format.","lastModifiedDate":"2023-11-19"},{"lineNumber":51,"author":{"gitId":"jy0251"},"content":"     * @param isDone      The completion status of the event task.","lastModifiedDate":"2023-11-19"},{"lineNumber":52,"author":{"gitId":"jy0251"},"content":"     * This constructor is used when loading tasks from a saved file.","lastModifiedDate":"2023-11-19"},{"lineNumber":53,"author":{"gitId":"jy0251"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":54,"author":{"gitId":"jy0251"},"content":"    public Event(String description, String from, String to, boolean isDone) throws IncompleteDataException {","lastModifiedDate":"2023-11-13"},{"lineNumber":55,"author":{"gitId":"jy0251"},"content":"        super(description, isDone);","lastModifiedDate":"2023-11-13"},{"lineNumber":56,"author":{"gitId":"jy0251"},"content":"        if (from \u003d\u003d null || from.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":57,"author":{"gitId":"jy0251"},"content":"            throw new IncompleteDataException(\"Missing \u0027from\u0027 information in Event task\");","lastModifiedDate":"2023-11-13"},{"lineNumber":58,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":59,"author":{"gitId":"jy0251"},"content":"        if (to \u003d\u003d null || to.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":60,"author":{"gitId":"jy0251"},"content":"            throw new IncompleteDataException(\"Missing \u0027to\u0027 information in Event task\");","lastModifiedDate":"2023-11-13"},{"lineNumber":61,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":62,"author":{"gitId":"jy0251"},"content":"        try {","lastModifiedDate":"2023-11-16"},{"lineNumber":63,"author":{"gitId":"jy0251"},"content":"            // Attempt to parse \"from\" and \"to\" strings into LocalDateTime","lastModifiedDate":"2023-11-16"},{"lineNumber":64,"author":{"gitId":"jy0251"},"content":"            this.from \u003d parseEventDateTime(from);","lastModifiedDate":"2023-11-16"},{"lineNumber":65,"author":{"gitId":"jy0251"},"content":"            this.to \u003d parseEventDateTime(to);","lastModifiedDate":"2023-11-16"},{"lineNumber":66,"author":{"gitId":"jy0251"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-11-16"},{"lineNumber":67,"author":{"gitId":"jy0251"},"content":"            // Handle the case where the date/time strings are not in the expected format","lastModifiedDate":"2023-11-16"},{"lineNumber":68,"author":{"gitId":"jy0251"},"content":"            throw new IncompleteDataException(\"Invalid date/time format in Event task, please ensure format is in yyyy/mm/dd hh:mm \" + e.getMessage());","lastModifiedDate":"2023-11-19"},{"lineNumber":69,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-16"},{"lineNumber":70,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":71,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":72,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":73,"author":{"gitId":"jy0251"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":74,"author":{"gitId":"jy0251"},"content":"     * Constructs an event task with the given description, start, and end date/time.","lastModifiedDate":"2023-11-19"},{"lineNumber":75,"author":{"gitId":"jy0251"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":76,"author":{"gitId":"jy0251"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-11-19"},{"lineNumber":77,"author":{"gitId":"jy0251"},"content":"     * @param from        The start date/time of the event.","lastModifiedDate":"2023-11-19"},{"lineNumber":78,"author":{"gitId":"jy0251"},"content":"     * @param to          The end date/time of the event.","lastModifiedDate":"2023-11-19"},{"lineNumber":79,"author":{"gitId":"jy0251"},"content":"     * This constructor is used by recurring events","lastModifiedDate":"2023-11-19"},{"lineNumber":80,"author":{"gitId":"jy0251"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":81,"author":{"gitId":"jy0251"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to){","lastModifiedDate":"2023-11-19"},{"lineNumber":82,"author":{"gitId":"jy0251"},"content":"        super(description);","lastModifiedDate":"2023-11-19"},{"lineNumber":83,"author":{"gitId":"jy0251"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-11-19"},{"lineNumber":84,"author":{"gitId":"jy0251"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-11-19"},{"lineNumber":85,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-16"},{"lineNumber":86,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-16"},{"lineNumber":87,"author":{"gitId":"jy0251"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":88,"author":{"gitId":"jy0251"},"content":"     * Parses the date/time information provided as a string.","lastModifiedDate":"2023-11-19"},{"lineNumber":89,"author":{"gitId":"jy0251"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":90,"author":{"gitId":"jy0251"},"content":"     * @param dateTimeString The date/time information in string format.","lastModifiedDate":"2023-11-19"},{"lineNumber":91,"author":{"gitId":"jy0251"},"content":"     * @return The parsed date/time as a {@code LocalDateTime} object.","lastModifiedDate":"2023-11-19"},{"lineNumber":92,"author":{"gitId":"jy0251"},"content":"     * @throws IncompleteDataException If the provided date/time string is in an invalid format.","lastModifiedDate":"2023-11-19"},{"lineNumber":93,"author":{"gitId":"jy0251"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":94,"author":{"gitId":"jy0251"},"content":"    private LocalDateTime parseEventDateTime(String dateTimeString) throws IncompleteDataException{","lastModifiedDate":"2023-11-19"},{"lineNumber":95,"author":{"gitId":"jy0251"},"content":"        try {","lastModifiedDate":"2023-11-19"},{"lineNumber":96,"author":{"gitId":"jy0251"},"content":"            return LocalDateTime.parse(dateTimeString, DateTimeFormatter.ofPattern(\"yyyy/MM/dd[\u0027T\u0027HH:mm][ HH:mm]\"));","lastModifiedDate":"2023-11-16"},{"lineNumber":97,"author":{"gitId":"jy0251"},"content":"        } catch (DateTimeParseException e1) {","lastModifiedDate":"2023-11-19"},{"lineNumber":98,"author":{"gitId":"jy0251"},"content":"            try {","lastModifiedDate":"2023-11-19"},{"lineNumber":99,"author":{"gitId":"jy0251"},"content":"                // Add an alternative date-time format here","lastModifiedDate":"2023-11-19"},{"lineNumber":100,"author":{"gitId":"jy0251"},"content":"                return LocalDateTime.parse(dateTimeString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd[\u0027T\u0027HH:mm][ HH:mm]\"));","lastModifiedDate":"2023-11-19"},{"lineNumber":101,"author":{"gitId":"jy0251"},"content":"            } catch (DateTimeParseException e2) {","lastModifiedDate":"2023-11-19"},{"lineNumber":102,"author":{"gitId":"jy0251"},"content":"                // Handle the case where both formats fail","lastModifiedDate":"2023-11-19"},{"lineNumber":103,"author":{"gitId":"jy0251"},"content":"                throw new IncompleteDataException(\"Invalid date/time format in Event task, please ensure format is in yyyy/mm/dd hh:mm \" + e1.getMessage() + \", \" + e2.getMessage());","lastModifiedDate":"2023-11-19"},{"lineNumber":104,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-11-19"},{"lineNumber":105,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":106,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":107,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":108,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":109,"author":{"gitId":"jy0251"},"content":"    public LocalDateTime getFromDateTime() {","lastModifiedDate":"2023-11-19"},{"lineNumber":110,"author":{"gitId":"jy0251"},"content":"        return from;","lastModifiedDate":"2023-11-19"},{"lineNumber":111,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":112,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":113,"author":{"gitId":"jy0251"},"content":"    public LocalDateTime getToDateTime() {","lastModifiedDate":"2023-11-19"},{"lineNumber":114,"author":{"gitId":"jy0251"},"content":"        return to;","lastModifiedDate":"2023-11-19"},{"lineNumber":115,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":116,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":117,"author":{"gitId":"jy0251"},"content":"    @Override","lastModifiedDate":"2023-10-29"},{"lineNumber":118,"author":{"gitId":"jy0251"},"content":"    public String toString() {","lastModifiedDate":"2023-10-29"},{"lineNumber":119,"author":{"gitId":"jy0251"},"content":"        return \"[E]\" + super.toString() + \"(from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-10-29"},{"lineNumber":120,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":121,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":122,"author":{"gitId":"jy0251"},"content":"    @Override","lastModifiedDate":"2023-11-13"},{"lineNumber":123,"author":{"gitId":"jy0251"},"content":"    public String toFileString() {","lastModifiedDate":"2023-11-13"},{"lineNumber":124,"author":{"gitId":"jy0251"},"content":"        String isDoneSymbol \u003d getIsDone() ? \"1\" : \"0\";","lastModifiedDate":"2023-11-13"},{"lineNumber":125,"author":{"gitId":"jy0251"},"content":"        return \"E | \" + isDoneSymbol + \" | \" + description + \" | \" + from + \" | \" + to;","lastModifiedDate":"2023-11-13"},{"lineNumber":126,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":127,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"jy0251":127}},{"path":"src/main/java/Duke/TaskClasses/Recurrence.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke.TaskClasses;","lastModifiedDate":"2023-11-19"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"public enum Recurrence {","lastModifiedDate":"2023-11-19"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"    DAILY, WEEKLY, BIWEEKLY, MONTHLY","lastModifiedDate":"2023-11-19"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-11-19"}],"authorContributionMap":{"jy0251":5}},{"path":"src/main/java/Duke/TaskClasses/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke.TaskClasses;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.CorruptedFileException;","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.IncompleteDataException;","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"/**","lastModifiedDate":"2023-11-19"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":" * Represents a general task with a description and completion status.","lastModifiedDate":"2023-11-19"},{"lineNumber":8,"author":{"gitId":"jy0251"},"content":" */","lastModifiedDate":"2023-11-19"},{"lineNumber":9,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":10,"author":{"gitId":"jy0251"},"content":"public class Task {","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"jy0251"},"content":"    protected String description;","lastModifiedDate":"2023-11-13"},{"lineNumber":13,"author":{"gitId":"jy0251"},"content":"    private boolean isDone;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"jy0251"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":16,"author":{"gitId":"jy0251"},"content":"     * Constructs a task with the given description and sets its completion status to false.","lastModifiedDate":"2023-11-19"},{"lineNumber":17,"author":{"gitId":"jy0251"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":18,"author":{"gitId":"jy0251"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-11-19"},{"lineNumber":19,"author":{"gitId":"jy0251"},"content":"     * This constructor is used when user adds new task","lastModifiedDate":"2023-11-19"},{"lineNumber":20,"author":{"gitId":"jy0251"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":21,"author":{"gitId":"jy0251"},"content":"    public Task(String description) {","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"jy0251"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"jy0251"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":26,"author":{"gitId":"jy0251"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":27,"author":{"gitId":"jy0251"},"content":"     * Constructs a task with the given description and completion status.","lastModifiedDate":"2023-11-19"},{"lineNumber":28,"author":{"gitId":"jy0251"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-11-19"},{"lineNumber":29,"author":{"gitId":"jy0251"},"content":"     * @param isDone      The completion status of the task.","lastModifiedDate":"2023-11-19"},{"lineNumber":30,"author":{"gitId":"jy0251"},"content":"     * This constructor is used when loading task list from a saved file","lastModifiedDate":"2023-11-19"},{"lineNumber":31,"author":{"gitId":"jy0251"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":32,"author":{"gitId":"jy0251"},"content":"    public Task(String description, boolean isDone) throws IncompleteDataException {","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"jy0251"},"content":"        if (description \u003d\u003d null || description.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"jy0251"},"content":"            throw new IncompleteDataException();","lastModifiedDate":"2023-11-13"},{"lineNumber":35,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":37,"author":{"gitId":"jy0251"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"jy0251"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":40,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"jy0251"},"content":"    public String getDescription() {","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"jy0251"},"content":"        return description;","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"jy0251"},"content":"    } // Gets the description of the task.","lastModifiedDate":"2023-11-19"},{"lineNumber":45,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"jy0251"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"jy0251"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"jy0251"},"content":"    } //marks task as done","lastModifiedDate":"2023-11-19"},{"lineNumber":49,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"jy0251"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"jy0251"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"jy0251"},"content":"    } //marks task as not done","lastModifiedDate":"2023-11-19"},{"lineNumber":53,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"jy0251"},"content":"    //gets the status icon for the task, [X] is done, [ ] is not done, this is used when generating task list for user to see","lastModifiedDate":"2023-11-19"},{"lineNumber":55,"author":{"gitId":"jy0251"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"jy0251"},"content":"        return isDone ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":60,"author":{"gitId":"jy0251"},"content":"    // Converts the task to a string representation for file storage","lastModifiedDate":"2023-11-19"},{"lineNumber":61,"author":{"gitId":"jy0251"},"content":"    public String toFileString() {","lastModifiedDate":"2023-11-13"},{"lineNumber":62,"author":{"gitId":"jy0251"},"content":"        String isDoneSymbol \u003d isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-11-13"},{"lineNumber":63,"author":{"gitId":"jy0251"},"content":"        return \"T | \" + isDoneSymbol + \" | \" + description;","lastModifiedDate":"2023-11-13"},{"lineNumber":64,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":65,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":66,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":67,"author":{"gitId":"jy0251"},"content":"    protected boolean getIsDone() {","lastModifiedDate":"2023-11-13"},{"lineNumber":68,"author":{"gitId":"jy0251"},"content":"        return isDone;","lastModifiedDate":"2023-11-13"},{"lineNumber":69,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":70,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":71,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":72,"author":{"gitId":"jy0251"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":73,"author":{"gitId":"jy0251"},"content":"     * Creates a task object from a string representation stored in a file.","lastModifiedDate":"2023-11-19"},{"lineNumber":74,"author":{"gitId":"jy0251"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":75,"author":{"gitId":"jy0251"},"content":"     * @param fileString The string representation of the task stored in a file.","lastModifiedDate":"2023-11-19"},{"lineNumber":76,"author":{"gitId":"jy0251"},"content":"     * @return The task object created from the file string.","lastModifiedDate":"2023-11-19"},{"lineNumber":77,"author":{"gitId":"jy0251"},"content":"     * @throws CorruptedFileException  If the file data is corrupted.","lastModifiedDate":"2023-11-19"},{"lineNumber":78,"author":{"gitId":"jy0251"},"content":"     * @throws IncompleteDataException If the task data is incomplete.","lastModifiedDate":"2023-11-19"},{"lineNumber":79,"author":{"gitId":"jy0251"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":80,"author":{"gitId":"jy0251"},"content":"    public static Task fromFileString(String fileString) throws CorruptedFileException, IncompleteDataException {","lastModifiedDate":"2023-11-13"},{"lineNumber":81,"author":{"gitId":"jy0251"},"content":"        //for importing data from saved file","lastModifiedDate":"2023-11-16"},{"lineNumber":82,"author":{"gitId":"jy0251"},"content":"        String[] parts \u003d fileString.split(\"\\\\s*\\\\|\\\\s*\");","lastModifiedDate":"2023-11-13"},{"lineNumber":83,"author":{"gitId":"jy0251"},"content":"        if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2023-11-13"},{"lineNumber":84,"author":{"gitId":"jy0251"},"content":"            String taskType \u003d parts[0].trim();","lastModifiedDate":"2023-11-13"},{"lineNumber":85,"author":{"gitId":"jy0251"},"content":"            String isDoneSymbol \u003d parts[1].trim();","lastModifiedDate":"2023-11-13"},{"lineNumber":86,"author":{"gitId":"jy0251"},"content":"            String description \u003d parts[2].trim();","lastModifiedDate":"2023-11-13"},{"lineNumber":87,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":88,"author":{"gitId":"jy0251"},"content":"            boolean isDone \u003d isDoneSymbol.equals(\"1\");","lastModifiedDate":"2023-11-13"},{"lineNumber":89,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":90,"author":{"gitId":"jy0251"},"content":"            switch (taskType) {","lastModifiedDate":"2023-11-13"},{"lineNumber":91,"author":{"gitId":"jy0251"},"content":"                case \"T\":","lastModifiedDate":"2023-11-13"},{"lineNumber":92,"author":{"gitId":"jy0251"},"content":"                    try {","lastModifiedDate":"2023-11-13"},{"lineNumber":93,"author":{"gitId":"jy0251"},"content":"                        return new ToDo(description, isDone);","lastModifiedDate":"2023-11-13"},{"lineNumber":94,"author":{"gitId":"jy0251"},"content":"                    } catch (IncompleteDataException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":95,"author":{"gitId":"jy0251"},"content":"                        throw new IncompleteDataException(\"Incomplete data in ToDo task\");","lastModifiedDate":"2023-11-13"},{"lineNumber":96,"author":{"gitId":"jy0251"},"content":"                    }","lastModifiedDate":"2023-11-13"},{"lineNumber":97,"author":{"gitId":"jy0251"},"content":"                case \"D\":","lastModifiedDate":"2023-11-13"},{"lineNumber":98,"author":{"gitId":"jy0251"},"content":"                    if (parts.length \u003e\u003d 4) {","lastModifiedDate":"2023-11-13"},{"lineNumber":99,"author":{"gitId":"jy0251"},"content":"                        String by \u003d parts[3].trim();","lastModifiedDate":"2023-11-13"},{"lineNumber":100,"author":{"gitId":"jy0251"},"content":"                        try{","lastModifiedDate":"2023-11-13"},{"lineNumber":101,"author":{"gitId":"jy0251"},"content":"                            return new Deadline(description, by, isDone);","lastModifiedDate":"2023-11-13"},{"lineNumber":102,"author":{"gitId":"jy0251"},"content":"                        } catch (IncompleteDataException e){","lastModifiedDate":"2023-11-13"},{"lineNumber":103,"author":{"gitId":"jy0251"},"content":"                            throw new IncompleteDataException(\"Incomplete data in Deadline task\");","lastModifiedDate":"2023-11-13"},{"lineNumber":104,"author":{"gitId":"jy0251"},"content":"                        }","lastModifiedDate":"2023-11-13"},{"lineNumber":105,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":106,"author":{"gitId":"jy0251"},"content":"                    } else {","lastModifiedDate":"2023-11-13"},{"lineNumber":107,"author":{"gitId":"jy0251"},"content":"                        throw new IncompleteDataException(\"Missing information in Deadline task\");","lastModifiedDate":"2023-11-13"},{"lineNumber":108,"author":{"gitId":"jy0251"},"content":"                    }","lastModifiedDate":"2023-11-13"},{"lineNumber":109,"author":{"gitId":"jy0251"},"content":"                case \"E\":","lastModifiedDate":"2023-11-13"},{"lineNumber":110,"author":{"gitId":"jy0251"},"content":"                    if (parts.length \u003e\u003d 5) {","lastModifiedDate":"2023-11-13"},{"lineNumber":111,"author":{"gitId":"jy0251"},"content":"                        String from \u003d parts[3].trim();","lastModifiedDate":"2023-11-13"},{"lineNumber":112,"author":{"gitId":"jy0251"},"content":"                        String to \u003d parts[4].trim();","lastModifiedDate":"2023-11-13"},{"lineNumber":113,"author":{"gitId":"jy0251"},"content":"                        try {","lastModifiedDate":"2023-11-13"},{"lineNumber":114,"author":{"gitId":"jy0251"},"content":"                            return new Event(description, from, to, isDone);","lastModifiedDate":"2023-11-13"},{"lineNumber":115,"author":{"gitId":"jy0251"},"content":"                        } catch (IncompleteDataException e){","lastModifiedDate":"2023-11-13"},{"lineNumber":116,"author":{"gitId":"jy0251"},"content":"                            throw new IncompleteDataException(\"Incomplete data in Event task\");","lastModifiedDate":"2023-11-13"},{"lineNumber":117,"author":{"gitId":"jy0251"},"content":"                        }","lastModifiedDate":"2023-11-13"},{"lineNumber":118,"author":{"gitId":"jy0251"},"content":"                    } else {","lastModifiedDate":"2023-11-13"},{"lineNumber":119,"author":{"gitId":"jy0251"},"content":"                            throw new IncompleteDataException(\"Missing information in Event task\");","lastModifiedDate":"2023-11-13"},{"lineNumber":120,"author":{"gitId":"jy0251"},"content":"                    }","lastModifiedDate":"2023-11-13"},{"lineNumber":121,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":122,"author":{"gitId":"jy0251"},"content":"                default:","lastModifiedDate":"2023-11-13"},{"lineNumber":123,"author":{"gitId":"jy0251"},"content":"                    throw new CorruptedFileException(\"Invalid task type\"); // Invalid task type","lastModifiedDate":"2023-11-13"},{"lineNumber":124,"author":{"gitId":"jy0251"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":125,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":126,"author":{"gitId":"jy0251"},"content":"        throw new CorruptedFileException(\"Invalid fileString format\"); // Invalid fileString format","lastModifiedDate":"2023-11-13"},{"lineNumber":127,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":128,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":129,"author":{"gitId":"jy0251"},"content":"    @Override","lastModifiedDate":"2023-10-29"},{"lineNumber":130,"author":{"gitId":"jy0251"},"content":"    public String toString() {","lastModifiedDate":"2023-10-29"},{"lineNumber":131,"author":{"gitId":"jy0251"},"content":"        return getStatusIcon() + getDescription();","lastModifiedDate":"2023-10-29"},{"lineNumber":132,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":133,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":135,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"jy0251":135}},{"path":"src/main/java/Duke/TaskClasses/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke.TaskClasses;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.IncompleteDataException;","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":8,"author":{"gitId":"jy0251"},"content":"     * Constructs a to-do task with the given description.","lastModifiedDate":"2023-11-19"},{"lineNumber":9,"author":{"gitId":"jy0251"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":10,"author":{"gitId":"jy0251"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2023-11-19"},{"lineNumber":11,"author":{"gitId":"jy0251"},"content":"     *                    This constructor is used for adding new to-do tasks.","lastModifiedDate":"2023-11-19"},{"lineNumber":12,"author":{"gitId":"jy0251"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":13,"author":{"gitId":"jy0251"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"jy0251"},"content":"        super(description);","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"jy0251"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":18,"author":{"gitId":"jy0251"},"content":"     * Constructs a to-do task with the given description and completion status.","lastModifiedDate":"2023-11-19"},{"lineNumber":19,"author":{"gitId":"jy0251"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":20,"author":{"gitId":"jy0251"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2023-11-19"},{"lineNumber":21,"author":{"gitId":"jy0251"},"content":"     * @param isDone      The completion status of the to-do task.","lastModifiedDate":"2023-11-19"},{"lineNumber":22,"author":{"gitId":"jy0251"},"content":"     * @throws IncompleteDataException If the task data is incomplete.","lastModifiedDate":"2023-11-19"},{"lineNumber":23,"author":{"gitId":"jy0251"},"content":"     * This constructor is used when loading to-do tasks from a saved file.","lastModifiedDate":"2023-11-19"},{"lineNumber":24,"author":{"gitId":"jy0251"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":25,"author":{"gitId":"jy0251"},"content":"    public ToDo(String description, boolean isDone) throws IncompleteDataException {","lastModifiedDate":"2023-11-13"},{"lineNumber":26,"author":{"gitId":"jy0251"},"content":"        super(description, isDone);","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":28,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"jy0251"},"content":"    @Override","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"jy0251"},"content":"    public String toString() {","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"jy0251"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"jy0251"},"content":"    @Override","lastModifiedDate":"2023-11-13"},{"lineNumber":35,"author":{"gitId":"jy0251"},"content":"    public String toFileString() {","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"jy0251"},"content":"        String isDoneSymbol \u003d getIsDone() ? \"1\" : \"0\";","lastModifiedDate":"2023-11-13"},{"lineNumber":37,"author":{"gitId":"jy0251"},"content":"        return \"T | \" + isDoneSymbol + \" | \" + description;","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"jy0251":40}},{"path":"src/main/java/Duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"import Duke.TaskClasses.Task;","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-11-13"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"public class Ui {","lastModifiedDate":"2023-11-13"},{"lineNumber":8,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":9,"author":{"gitId":"jy0251"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-11-13"},{"lineNumber":10,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":11,"author":{"gitId":"jy0251"},"content":"    public Ui() {","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"jy0251"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-11-13"},{"lineNumber":13,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":14,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"jy0251"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-11-13"},{"lineNumber":16,"author":{"gitId":"jy0251"},"content":"        String logo \u003d \"    ____                       __\\n\" +","lastModifiedDate":"2023-11-13"},{"lineNumber":17,"author":{"gitId":"jy0251"},"content":"                \"   / __ \\\\__  ______  ___  ____/ /\\n\" +","lastModifiedDate":"2023-11-13"},{"lineNumber":18,"author":{"gitId":"jy0251"},"content":"                \"  / / / / / / / __ \\\\/ _ \\\\/ __  /\\n\" +","lastModifiedDate":"2023-11-13"},{"lineNumber":19,"author":{"gitId":"jy0251"},"content":"                \" / /_/ / /_/ / /_/ /  __/ /_/ /\\n\" +","lastModifiedDate":"2023-11-13"},{"lineNumber":20,"author":{"gitId":"jy0251"},"content":"                \"/_____/\\\\__,_/ .___/\\\\___/\\\\__,_/\\n\" +","lastModifiedDate":"2023-11-13"},{"lineNumber":21,"author":{"gitId":"jy0251"},"content":"                \"           /_/\";","lastModifiedDate":"2023-11-13"},{"lineNumber":22,"author":{"gitId":"jy0251"},"content":"        System.out.println(\"Hello! I\u0027m DupeBot.\\n\" + logo);","lastModifiedDate":"2023-11-13"},{"lineNumber":23,"author":{"gitId":"jy0251"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-11-13"},{"lineNumber":24,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":25,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":26,"author":{"gitId":"jy0251"},"content":"    public String readCommand() {","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"jy0251"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-11-13"},{"lineNumber":28,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"jy0251"},"content":"    public void showBye() {","lastModifiedDate":"2023-11-13"},{"lineNumber":31,"author":{"gitId":"jy0251"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"jy0251"},"content":"    public void showLine() {","lastModifiedDate":"2023-11-13"},{"lineNumber":35,"author":{"gitId":"jy0251"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":37,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-11-13"}],"authorContributionMap":{"jy0251":38}},{"path":"src/test/java/Duke/DupeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jy0251"},"content":"package Duke;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":3,"author":{"gitId":"jy0251"},"content":"import Duke.ExceptionClasses.DupeException;","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jy0251"},"content":"import Duke.TaskClasses.Task;","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"jy0251"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-18"},{"lineNumber":6,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":7,"author":{"gitId":"jy0251"},"content":"import java.io.File;","lastModifiedDate":"2023-11-19"},{"lineNumber":8,"author":{"gitId":"jy0251"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-11-19"},{"lineNumber":9,"author":{"gitId":"jy0251"},"content":"import java.io.IOException;","lastModifiedDate":"2023-11-19"},{"lineNumber":10,"author":{"gitId":"jy0251"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":12,"author":{"gitId":"jy0251"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-18"},{"lineNumber":13,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":14,"author":{"gitId":"jy0251"},"content":"public class DupeTest {","lastModifiedDate":"2023-11-18"},{"lineNumber":15,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":16,"author":{"gitId":"jy0251"},"content":"    @Test","lastModifiedDate":"2023-11-18"},{"lineNumber":17,"author":{"gitId":"jy0251"},"content":"    public void testTaskToString() {","lastModifiedDate":"2023-11-18"},{"lineNumber":18,"author":{"gitId":"jy0251"},"content":"        // Create a task","lastModifiedDate":"2023-11-18"},{"lineNumber":19,"author":{"gitId":"jy0251"},"content":"        Task task \u003d new Task(\"Sample Task\");","lastModifiedDate":"2023-11-18"},{"lineNumber":20,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":21,"author":{"gitId":"jy0251"},"content":"        // Expected result","lastModifiedDate":"2023-11-18"},{"lineNumber":22,"author":{"gitId":"jy0251"},"content":"        String expected \u003d \"[ ] Sample Task\";","lastModifiedDate":"2023-11-19"},{"lineNumber":23,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":24,"author":{"gitId":"jy0251"},"content":"        // Test","lastModifiedDate":"2023-11-18"},{"lineNumber":25,"author":{"gitId":"jy0251"},"content":"        assertEquals(expected, task.toString());","lastModifiedDate":"2023-11-18"},{"lineNumber":26,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-18"},{"lineNumber":27,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":28,"author":{"gitId":"jy0251"},"content":"    private Storage storage;","lastModifiedDate":"2023-11-19"},{"lineNumber":29,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":30,"author":{"gitId":"jy0251"},"content":"    @Test","lastModifiedDate":"2023-11-19"},{"lineNumber":31,"author":{"gitId":"jy0251"},"content":"    public void testStorageLoad() throws DupeException, IOException {","lastModifiedDate":"2023-11-19"},{"lineNumber":32,"author":{"gitId":"jy0251"},"content":"        // Create a temporary test file","lastModifiedDate":"2023-11-19"},{"lineNumber":33,"author":{"gitId":"jy0251"},"content":"        File testFile \u003d createTestFile(\"T | 0 | Sample Task\");","lastModifiedDate":"2023-11-19"},{"lineNumber":34,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":35,"author":{"gitId":"jy0251"},"content":"        // Initialize Storage with the test file path","lastModifiedDate":"2023-11-19"},{"lineNumber":36,"author":{"gitId":"jy0251"},"content":"        storage \u003d new Storage(testFile.getPath());","lastModifiedDate":"2023-11-19"},{"lineNumber":37,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":38,"author":{"gitId":"jy0251"},"content":"        ArrayList\u003cTask\u003e loadedTasks \u003d storage.load();","lastModifiedDate":"2023-11-19"},{"lineNumber":39,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":40,"author":{"gitId":"jy0251"},"content":"        String expectedTaskDescription \u003d \"Sample Task\";","lastModifiedDate":"2023-11-19"},{"lineNumber":41,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":42,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":43,"author":{"gitId":"jy0251"},"content":"        assertEquals(1, loadedTasks.size());","lastModifiedDate":"2023-11-19"},{"lineNumber":44,"author":{"gitId":"jy0251"},"content":"        assertEquals(expectedTaskDescription, loadedTasks.get(0).getDescription());","lastModifiedDate":"2023-11-19"},{"lineNumber":45,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":46,"author":{"gitId":"jy0251"},"content":"        testFile.delete();","lastModifiedDate":"2023-11-19"},{"lineNumber":47,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":48,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":49,"author":{"gitId":"jy0251"},"content":"    private File createTestFile(String content) throws IOException {","lastModifiedDate":"2023-11-19"},{"lineNumber":50,"author":{"gitId":"jy0251"},"content":"        File tempFile \u003d File.createTempFile(\"testFile\", \".txt\");","lastModifiedDate":"2023-11-19"},{"lineNumber":51,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":52,"author":{"gitId":"jy0251"},"content":"        try (FileWriter writer \u003d new FileWriter(tempFile)) {","lastModifiedDate":"2023-11-19"},{"lineNumber":53,"author":{"gitId":"jy0251"},"content":"            writer.write(content);","lastModifiedDate":"2023-11-19"},{"lineNumber":54,"author":{"gitId":"jy0251"},"content":"        }","lastModifiedDate":"2023-11-19"},{"lineNumber":55,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":56,"author":{"gitId":"jy0251"},"content":"        return tempFile;","lastModifiedDate":"2023-11-19"},{"lineNumber":57,"author":{"gitId":"jy0251"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":58,"author":{"gitId":"jy0251"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":59,"author":{"gitId":"jy0251"},"content":"}","lastModifiedDate":"2023-11-18"}],"authorContributionMap":{"jy0251":59}}]
