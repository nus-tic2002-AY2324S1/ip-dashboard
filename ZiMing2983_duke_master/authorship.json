[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"# duke project template","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"3. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ZiMing2983":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    implementation \u0027me.xdrop:fuzzywuzzy:1.4.0\u0027","lastModifiedDate":"2023-11-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    mainClassName \u003d \u0027duke.Duke\u0027","lastModifiedDate":"2023-11-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-11-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ZiMing2983":8,"-":40}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"D | 0 | duke project | 2023-11-19 00:00","lastModifiedDate":"2023-11-17"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"E | 0 | software engineering exam | 2023-12-04 13:00 | 2023-12-04 14:30","lastModifiedDate":"2023-11-17"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"E | 0 | statistics \u0026 probabilities exam | 2023-11-25 09:00 | 2023-11-25 11:00","lastModifiedDate":"2023-11-17"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"D | 0 | family dinner | 2023-11-27 00:00","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"T | 0 | gym","lastModifiedDate":"2023-11-18"}],"authorContributionMap":{"ZiMing2983":5}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileRead;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import duke.parser.DukeParser;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface;","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":" * The Duke class represents a task management application.","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":" * Users can interact with it through a command-line interface.","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"public class Duke {","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"    public final UserInterface userInterface;","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"    private final DukeParser dukeParser;","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    private final FileRead fileRead;","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"    private final FileStorage fileStorage;","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    private final List\u003cTask\u003e taskList;","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     * Initializes the Duke application by creating instances of the user interface,","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     * file storage, file reader, task list, and parser.","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    public Duke() {","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"        // Initialize the user interface","lastModifiedDate":"2023-11-05"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"        userInterface \u003d new UserInterface();","lastModifiedDate":"2023-11-05"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"        // Initialize the file storage","lastModifiedDate":"2023-11-05"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        fileStorage \u003d new FileStorage();","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        // Initialize the file reader","lastModifiedDate":"2023-11-05"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        fileRead \u003d new FileRead();","lastModifiedDate":"2023-11-05"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"        // Initialize the task list","lastModifiedDate":"2023-11-05"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-05"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        // Initialize the parser","lastModifiedDate":"2023-11-05"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"        dukeParser \u003d new DukeParser();","lastModifiedDate":"2023-11-05"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"     * The main method of the Duke application. It creates an instance of the Duke","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"     * class and starts the application.","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"     * @param args Command-line arguments (not used in this application).","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"        duke.start();","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"     * Starts the Duke application, greets the user, and handles user input.","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"    public void start() {","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        boolean isNewUser \u003d fileRead.getSavedTask(taskList);","lastModifiedDate":"2023-11-17"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"        if (isNewUser) {","lastModifiedDate":"2023-11-17"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"            userInterface.getMessageDisplay().newUserHello();","lastModifiedDate":"2023-11-17"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"        } else {","lastModifiedDate":"2023-11-17"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"            userInterface.getMessageDisplay().existingUserHello();","lastModifiedDate":"2023-11-17"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-17"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"        while (true) {","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"            String userInput \u003d this.userInterface.getUserInput().getLine();","lastModifiedDate":"2023-11-05"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"            UserInterface.MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"            if (userInput.equals(\"bye\")) {","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"                break;","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"            } else {","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"                dukeParser.parseUserInput(fileStorage, userInterface.getMessageDisplay(), taskList, userInput);","lastModifiedDate":"2023-11-05"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"        userInterface.getUserInput().closeScanner();","lastModifiedDate":"2023-11-05"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"        userInterface.getMessageDisplay().goodbye();","lastModifiedDate":"2023-11-05"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"    public List\u003cTask\u003e getTaskList() {","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"        return taskList;","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":83}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-04"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":" * Represents a command to add a Deadline task to the task list.","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"public class AddDeadlineCommand extends AddTaskCommand {","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    // The due date and time for Deadline Task","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    private final LocalDateTime taskDueDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs an `AddDeadlineCommand` with the specified task name and due date.","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName    The name of the deadline task.","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskDueDate The due date and time of the deadline task.","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    public AddDeadlineCommand(String taskName, LocalDateTime taskDueDate) {","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"        super(taskName);","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"        this.taskDueDate \u003d taskDueDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command by creating a `DeadlineTask` and adding it to the task list.","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage handler for saving tasks to a file.","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"     * @param display     The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks to which the new Deadline task will be added.","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    public void execute(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        // Create a `DeadlineTask` with the specified task name and task due date","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new DeadlineTask(taskName, taskDueDate);","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"        // Add the created `DeadlineTask` to the task list","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        addTask(fileStorage, display, taskList, task);","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":46}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-04"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":" * Represents a command to add an event task to the task list.","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"public class AddEventCommand extends AddTaskCommand {","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    // The start date and time of the event task","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    private final LocalDateTime taskFromDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"    // The end date and time of the event task","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"    private final LocalDateTime taskToDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs an `AddEventCommand` with the specified task name, start date, and end date.","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName     The name of the event task.","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskFromDate The start date and time of the event task.","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskToDate   The end date and time of the event task.","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"    public AddEventCommand(String taskName, LocalDateTime taskFromDate, LocalDateTime taskToDate) {","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"        super(taskName);","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"        this.taskFromDate \u003d taskFromDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"        this.taskToDate \u003d taskToDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command by creating an `EventTask` and adding it to the task list.","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage handler for saving tasks to a file.","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"     * @param display     The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks to which the new Event task will be added.","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"    public void execute(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"        // Create an `EventTask` with the specified name, start date, and end date","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new EventTask(taskName, taskFromDate, taskToDate);","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"        // Add the created `EventTask` to the task list","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"        addTask(fileStorage, display, taskList, task);","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":50}},{"path":"src/main/java/duke/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" * Represents an abstract `AddTaskCommand` that adds tasks to the Duke application.","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"abstract class AddTaskCommand extends Command {","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"    // The name of the task to be added","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    protected final String taskName;","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs an `AddTaskCommand` with the specified task name.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName The name of the task to be added.","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"    public AddTaskCommand(String taskName) {","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Adds a task to the task list and prompts the user with a successfully added message.","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage handler for saving tasks to a file.","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"     * @param display     The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks to which the new task will be added.","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"     * @param task        The task to be added.","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    protected void addTask(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList,","lastModifiedDate":"2023-11-05"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"                           Task task) {","lastModifiedDate":"2023-11-05"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(task);","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"        storeDuke(fileStorage, taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        display.addedMessage(taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":43}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-29"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":" * Represents a command to add a todo task to the task list.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"public class AddTodoCommand extends AddTaskCommand {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs an `AddTodoCommand` with the specified task name.","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName The name of the todo task.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    public AddTodoCommand(String taskName) {","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"        super(taskName);","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command by creating a `TodoTask` and adding it to the task list.","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage handler for saving tasks to a file.","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     * @param display     The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks to which the new todo task will be added.","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    public void execute(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        // Create a `TodoTask` with the specified name","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(taskName);","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"        // Add the created todo task to the task list","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        addTask(fileStorage, display, taskList, task);","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":40}},{"path":"src/main/java/duke/command/CheckTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":" * Represents a command for checking tasks on a specific date.","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"abstract class CheckTaskCommand {","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command to check tasks without specifying a date.","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"     * @param display  The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to check.","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"    public abstract void execute(MessageDisplay display, List\u003cTask\u003e taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":21}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.DukeException;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-04"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":" * Represents a base command in the Duke application.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"abstract class Command {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command.","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage handler for saving tasks to a file.","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     * @param display     The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks that the command will operate on.","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If an error occurs while executing the command.","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    public abstract void execute(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList)","lastModifiedDate":"2023-11-05"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"            throws DukeException;","lastModifiedDate":"2023-11-05"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     * Stores the task list for future loading of tasks.","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage handler for saving tasks to a file.","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks to be stored.","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"    public void storeDuke(FileStorage fileStorage, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        fileStorage.store(taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":37}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `DeleteCommand` to delete a task from the task list.","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"    // The index of the task to be deleted.","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    private final int itemIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `DeleteCommand` with the specified item index to delete.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     * @param itemIndex The index of the task to be deleted.","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"    public DeleteCommand(int itemIndex) {","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"        this.itemIndex \u003d itemIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command by removing the specified task from the task list.","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage handler for saving tasks to a file.","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"     * @param display     The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks from which the task will be deleted.","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    public void execute(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"        // Remove the task from the task list","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        Task deletedTask \u003d taskList.remove(itemIndex);","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        storeDuke(fileStorage, taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"        // Display a message indicating the deleted task","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        display.deleteMessage(taskList, deletedTask);","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":43}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-11-04"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-04"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import me.xdrop.fuzzywuzzy.FuzzySearch;","lastModifiedDate":"2023-11-04"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `FindCommand` class that allows users to search for tasks based on a specified","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":" * keyword.","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"public class FindCommand extends CheckTaskCommand {","lastModifiedDate":"2023-11-04"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    private final String keyword;","lastModifiedDate":"2023-11-04"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `FindCommand` with the specified search keyword.","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     * @param keyword The keyword to use for searching tasks.","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-11-04"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-11-04"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Prints a list of tasks that match the specified keyword.","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     * @param display  The message display interface for showing messages to the user.","lastModifiedDate":"2023-11-04"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to search within.","lastModifiedDate":"2023-11-04"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    public void printListWithKeyword(MessageDisplay display, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-11-04"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-11-04"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println(\"There\u0027s nothing in your list\");","lastModifiedDate":"2023-11-04"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"            return;","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        boolean printed \u003d false;","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"        int index \u003d 1;","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"            // Solution below used fuzzy string search from","lastModifiedDate":"2023-11-05"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"            // https://central.sonatype.com/artifact/me.xdrop/fuzzywuzzy?smo\u003dtrue","lastModifiedDate":"2023-11-05"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"            if (FuzzySearch.tokenSortPartialRatio(task.getTaskName().replaceAll(\" \", \"\"), keyword) \u003e\u003d 70) {","lastModifiedDate":"2023-11-17"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"                if (!printed) {","lastModifiedDate":"2023-11-13"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"                    System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-11-13"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"                    MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-13"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"                    printed \u003d true;","lastModifiedDate":"2023-11-13"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"                }","lastModifiedDate":"2023-11-13"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"                System.out.println(index + \".\" + task);","lastModifiedDate":"2023-11-04"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"                index++;","lastModifiedDate":"2023-11-04"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-04"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"        if (printed) {","lastModifiedDate":"2023-11-13"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        if (!printed) {","lastModifiedDate":"2023-11-13"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"There\u0027s no relevant task with keyword \u0027%s\u0027.\\n\", keyword);","lastModifiedDate":"2023-11-13"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-13"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the `FindCommand` to search for and print tasks that match the specified keyword.","lastModifiedDate":"2023-11-04"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"     * @param display  The message display interface for showing messages to the user.","lastModifiedDate":"2023-11-04"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to search within.","lastModifiedDate":"2023-11-04"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-11-04"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"    public void execute(MessageDisplay display, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-11-04"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"        printListWithKeyword(display, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-11-04"}],"authorContributionMap":{"ZiMing2983":77}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `ListCommand` to list and display user\u0027s tasks.","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"public class ListCommand extends CheckTaskCommand {","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"     * Displays the list of user tasks.","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of user tasks to be displayed.","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"    public void printList(List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println(\"There\u0027s nothing in your list\");","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"            return;","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-11-04"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"        MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"        int index \u003d 1;","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println(index + \".\" + task.toString());","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"            index++;","lastModifiedDate":"2023-11-04"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"        MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command by displaying the list of user tasks.","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"     * @param display  The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of user tasks to be displayed.","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"    public void execute(MessageDisplay display, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        // Call the printList method to display the tasks","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"        printList(taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":47}},{"path":"src/main/java/duke/command/MarkAsCompletedCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `MarkAsCompletedCommand` to mark a task as completed.","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"public class MarkAsCompletedCommand extends ModifyTaskCommand {","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `MarkAsCompletedCommand` with the specified item index.","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     * @param itemIndex The index of the task to mark as completed.","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"    public MarkAsCompletedCommand(int itemIndex) {","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"        super(itemIndex);","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command by marking the specified task as completed.","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage handler for saving tasks to a file.","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * @param display     The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks in which the task will be marked as completed.","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"    public void execute(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        // Get the task to mark as completed from the task list","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d taskList.get(itemIndex);","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        if (task.isCompleted()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"            // If the task is already completed, prompt the user","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"            display.alreadyMark(task.getTaskName());","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        } else {","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"            // Mark the task as completed and display a completion message","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"            task.markAsCompleted();","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"            storeDuke(fileStorage, taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"            display.completeMessage(taskList, itemIndex);","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":46}},{"path":"src/main/java/duke/command/MarkAsInCompletedCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `MarkAsInCompletedCommand` to mark a task as incomplete.","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"public class MarkAsInCompletedCommand extends ModifyTaskCommand {","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `MarkAsInCompletedCommand` with the specified item index.","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     * @param itemIndex The index of the task to mark as incomplete.","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"    public MarkAsInCompletedCommand(int itemIndex) {","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"        super(itemIndex);","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command by marking the specified task as incomplete.","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage handler for saving tasks to a file.","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * @param display     The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks in which the task will be marked as incomplete.","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"    public void execute(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        // Get the task to mark as incomplete from the task list using the index.","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d taskList.get(itemIndex);","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        if (!task.isCompleted()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"            // If the task is not completed, display a message","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"            display.notMark(task.getTaskName());","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        } else {","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"            // Mark the task as not completed and display a message to prompt the user.","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"            task.markAsNotCompleted();","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"            storeDuke(fileStorage, taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"            display.unCompleteMessage(taskList, itemIndex);","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":46}},{"path":"src/main/java/duke/command/ModifyTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" * Represents an abstract class for commands that modify tasks in the Duke application.","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"abstract class ModifyTaskCommand extends Command {","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"    // The index of the task to be modified.","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    protected final int itemIndex;","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `ModifyTaskCommand` with the specified item index.","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     * @param itemIndex The index of the task to be modified.","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"    public ModifyTaskCommand(int itemIndex) {","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"        this.itemIndex \u003d itemIndex;","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command to modify a task. This method should be overridden in subclasses.","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage handler for saving tasks to a file.","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"     * @param display     The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks that the command will operate on.","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"    public abstract void execute(FileStorage fileStorage, MessageDisplay display,","lastModifiedDate":"2023-11-05"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"                                 List\u003cTask\u003e taskList);","lastModifiedDate":"2023-11-05"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":37}},{"path":"src/main/java/duke/command/OnCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-05"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" * Represents an `OnCommand` to list and display user\u0027s tasks as of a specific date.","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"public class OnCommand extends CheckTaskCommand {","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"    private final LocalDate checkedDate;","lastModifiedDate":"2023-11-04"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a new OnCommand object with a specified date.","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-05"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * @param checkedDate The date associated with this command.","lastModifiedDate":"2023-11-05"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    public OnCommand(LocalDate checkedDate) {","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"        this.checkedDate \u003d checkedDate;","lastModifiedDate":"2023-11-04"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     * Displays the list of user tasks as of the specified date.","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of user tasks to be checked.","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     * @param date     The specific date for which tasks should be displayed.","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    public void checkTasks(List\u003cTask\u003e taskList, LocalDate date) {","lastModifiedDate":"2023-11-04"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"        // Check if there are no tasks in the list","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println(\"There\u0027s nothing on \" + date);","lastModifiedDate":"2023-11-04"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"            return;","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        boolean printed \u003d false;","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"        int index \u003d 1;","lastModifiedDate":"2023-11-04"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        // Display the date and the tasks as of that date","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"            // Check if the task should be displayed based on the date","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"            if (task.checkDate(date)) {","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"                if (!printed) {","lastModifiedDate":"2023-11-13"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"                    System.out.println(\"Here are the tasks in your list as of \" + date);","lastModifiedDate":"2023-11-04"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"                    MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"                    printed \u003d true;","lastModifiedDate":"2023-11-13"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"                }","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"                System.out.println(index + \".\" + task);","lastModifiedDate":"2023-11-04"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"                index++;","lastModifiedDate":"2023-11-04"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"        if (printed) {","lastModifiedDate":"2023-11-13"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-13"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        if (!printed) {","lastModifiedDate":"2023-11-13"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"There\u0027s nothing on %s%n\", date.toString());","lastModifiedDate":"2023-11-04"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command by displaying the list of user tasks as of a specified date.","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"     * @param display  The message display interface to show messages to the user.","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of user tasks to be checked.","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"    public void execute(MessageDisplay display, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"        // Call the checkTasks method to display the tasks as of the specified date","lastModifiedDate":"2023-11-04"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"        checkTasks(taskList, checkedDate);","lastModifiedDate":"2023-11-04"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":75}},{"path":"src/main/java/duke/command/RescheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-11-04"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.DukeException;","lastModifiedDate":"2023-11-04"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-04"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-04"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `RescheduleCommand` to reschedule a task by extending its end date.","lastModifiedDate":"2023-11-04"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"public class RescheduleCommand extends Command {","lastModifiedDate":"2023-11-04"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    // The index of the task to be rescheduled.","lastModifiedDate":"2023-11-04"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    private final int itemIndex;","lastModifiedDate":"2023-11-04"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"    private final LocalDateTime revisedDateTime;","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `RescheduleCommand` with the specified item index to reschedule a task.","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"     * @param itemIndex The index of the task to be rescheduled.","lastModifiedDate":"2023-11-04"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    public RescheduleCommand(int itemIndex, LocalDateTime revisedDateTime) {","lastModifiedDate":"2023-11-04"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"        this.revisedDateTime \u003d revisedDateTime;","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"        this.itemIndex \u003d itemIndex;","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command by extending the end date of the specified task in the task list.","lastModifiedDate":"2023-11-04"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage handler for saving tasks to a file.","lastModifiedDate":"2023-11-04"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"     * @param display     The message display interface to show messages to the user.","lastModifiedDate":"2023-11-04"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks containing the task to be rescheduled.","lastModifiedDate":"2023-11-04"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    public void execute(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList)","lastModifiedDate":"2023-11-05"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"            throws DukeException {","lastModifiedDate":"2023-11-05"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"        taskList.get(itemIndex).changeEndDate(revisedDateTime);","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"        storeDuke(fileStorage, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        display.rescheduleMessage(taskList.get(itemIndex));","lastModifiedDate":"2023-11-04"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-11-04"}],"authorContributionMap":{"ZiMing2983":46}},{"path":"src/main/java/duke/dukeexceptions/ChangeTodoDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-11-04"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * The ChangeTodoDateException class is a custom exception that is thrown when","lastModifiedDate":"2023-11-04"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" * an attempt is made to change the end date of a \"To do\" task, which is not allowed.","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"public class ChangeTodoDateException extends DukeException {","lastModifiedDate":"2023-11-04"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a message that informs the user change todo task date is not allowed.","lastModifiedDate":"2023-11-04"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"    public ChangeTodoDateException() {","lastModifiedDate":"2023-11-04"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"        super(\"You can\u0027t change the date of a to-do task!!!\");","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-11-04"}],"authorContributionMap":{"ZiMing2983":17}},{"path":"src/main/java/duke/dukeexceptions/DueDatePastDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * DueDatePastDateException is a custom exception class that is thrown when the end date","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" * of a task is before the current date or time.","lastModifiedDate":"2023-11-18"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"public class DueDatePastDateException extends DukeException {","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a new DueDatePastDateException with a default error message.","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"    public DueDatePastDateException() {","lastModifiedDate":"2023-11-18"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"        super(\"You can\u0027t reschedule the due date to the past!\");","lastModifiedDate":"2023-11-18"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-18"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-11-18"}],"authorContributionMap":{"ZiMing2983":17}},{"path":"src/main/java/duke/dukeexceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * The DukeException class is a custom exception class for the Duke application.","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" * It extends the base Exception class and is used to represent exceptional conditions","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" * specific to the Duke application.","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a new DukeException with the specified error message.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"     * @param message The error message associated with the exception.","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"        super(message);","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":20}},{"path":"src/main/java/duke/dukeexceptions/EmptyArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-11-13"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import duke.parser.CommandValidator;","lastModifiedDate":"2023-11-13"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-13"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" * Exception thrown when an empty argument is encountered for a specific command type.","lastModifiedDate":"2023-11-13"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":" * This exception is thrown to indicate that the description or specific information","lastModifiedDate":"2023-11-13"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":" * required for a particular command type is missing or empty.","lastModifiedDate":"2023-11-13"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-13"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"public class EmptyArgumentException extends DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs an EmptyArgumentException with a specific command type.","lastModifiedDate":"2023-11-13"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"     * @param commandType The type of the command for which the empty argument occurred.","lastModifiedDate":"2023-11-13"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If an unknown command type is provided.","lastModifiedDate":"2023-11-13"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"    public EmptyArgumentException(String commandType) throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"        super(getErrorMessage(commandType));","lastModifiedDate":"2023-11-13"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"     * Gets the error message corresponding to the provided command type.","lastModifiedDate":"2023-11-13"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-13"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"     * @param commandType The type of the command for which the empty argument occurred.","lastModifiedDate":"2023-11-13"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     * @return The error message for the specific command type.","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If an unknown command type is provided.","lastModifiedDate":"2023-11-13"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    private static String getErrorMessage(String commandType) throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"        switch (commandType) {","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"        case CommandValidator.TODO_COMMAND:","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"            return \"The description of a todo task cannot be empty!\";","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        case CommandValidator.DEADLINE_COMMAND:","lastModifiedDate":"2023-11-13"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"            return \"The description of a deadline task cannot be empty!\";","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"        case CommandValidator.EVENT_COMMAND:","lastModifiedDate":"2023-11-13"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"            return \"The description of a event task cannot be empty!\";","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        case CommandValidator.ON_COMMAND:","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"            return \"Please provide the specific date that you want to check if a task exists!\";","lastModifiedDate":"2023-11-13"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        case CommandValidator.FIND_COMMAND:","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"            return \"Please provide the specific keyword that you want to check if a task exists!\";","lastModifiedDate":"2023-11-13"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"        case CommandValidator.RESCHEDULE_COMMAND:","lastModifiedDate":"2023-11-13"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"            return \"Please provide the specific task and date that you want to postpone!\";","lastModifiedDate":"2023-11-13"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"        case CommandValidator.DELETE_COMMAND:","lastModifiedDate":"2023-11-13"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"            return \"Please provide the specific task that you want to delete!\";","lastModifiedDate":"2023-11-13"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"        case CommandValidator.MARK_COMMAND:","lastModifiedDate":"2023-11-13"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"            return \"Please provide the specific task that you want to mark as completed!\";","lastModifiedDate":"2023-11-13"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"        case CommandValidator.UNMARK_COMMAND:","lastModifiedDate":"2023-11-13"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"            return \"Please provide the specific task that you want to mark as incomplete!\";","lastModifiedDate":"2023-11-13"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"        default:","lastModifiedDate":"2023-11-13"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"            throw new DukeException(\"Unknown Command type: \" + commandType);","lastModifiedDate":"2023-11-13"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-11-13"}],"authorContributionMap":{"ZiMing2983":55}},{"path":"src/main/java/duke/dukeexceptions/EmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * The EmptyCommandException class is to indicate that the user","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" * did not provide any command when interacting with the Duke application.","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"public class EmptyCommandException extends DukeException {","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a message that informs the user","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     * no command was provided and asks them to try again.","lastModifiedDate":"2023-11-04"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    public EmptyCommandException() {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"        super(\"You did not provide any command. Please try again.\");","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":18}},{"path":"src/main/java/duke/dukeexceptions/EmptyTaskListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-11-13"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-13"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * Custom exception class for handling cases where a task list is empty.","lastModifiedDate":"2023-11-13"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" * Extends the DukeException class and provides a specific error message.","lastModifiedDate":"2023-11-13"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-13"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"public class EmptyTaskListException extends DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"     * Constructor for EmptyTaskListException.","lastModifiedDate":"2023-11-13"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     * Sets the error message to be displayed when this exception is thrown.","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    public EmptyTaskListException() {","lastModifiedDate":"2023-11-13"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"        super(\"Your task list is empty!\");","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-11-13"}],"authorContributionMap":{"ZiMing2983":18}},{"path":"src/main/java/duke/dukeexceptions/EventDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-11-04"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * EventDateException is a custom exception class that is thrown when the start date of an event","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" * task is after the end date.","lastModifiedDate":"2023-11-05"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-05"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"public class EventDateException extends DukeException {","lastModifiedDate":"2023-11-04"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a new EventDateException with a default error message.","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"    public EventDateException() {","lastModifiedDate":"2023-11-04"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"        super(\"Start date should be before end date!!!\");","lastModifiedDate":"2023-11-04"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-11-04"}],"authorContributionMap":{"ZiMing2983":15}},{"path":"src/main/java/duke/dukeexceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * The InvalidCommandException class is used to indicate that the user","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" * entered an invalid or unrecognized command.","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a new InvalidCommandException to informs the user","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     * that the command they entered is not recognized by the Duke application.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":18}},{"path":"src/main/java/duke/dukeexceptions/InvalidDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * The InvalidDateFormatException class is used to indicate that the user","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" * provided a date in an invalid format.","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"public class InvalidDateFormatException extends DukeException {","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a new InvalidDateFormatException to informs the user","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     * that the date format they provided is invalid and provides an example format.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    public InvalidDateFormatException() {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"        super(\"Please provide date in the format of yyyy-mm-dd hh:mm:ss\");","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":18}},{"path":"src/main/java/duke/dukeexceptions/InvalidNumberFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * The InvalidNumberFormatException class is used to indicate that the user","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" * provided an invalid number or numeric input.","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"public class InvalidNumberFormatException extends DukeException {","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a new InvalidNumberFormatException with a specified error message.","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"     * @param message The error message indicating the provided value is not a valid number.","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"    public InvalidNumberFormatException(String message) {","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"        super(message + \" is not a valid number! Please try again.\");","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a new InvalidNumberFormatException with","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     * a generic error message for an invalid number.","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    public InvalidNumberFormatException() {","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"        super(\"Invalid Number! Please try again.\");","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":28}},{"path":"src/main/java/duke/dukeexceptions/InvalidTaskFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * The InvalidTaskFormatException class is used to indicate that the user","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" * provided a task in an invalid format.","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"public class InvalidTaskFormatException extends DukeException {","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a new InvalidTaskFormatException with a specified task type.","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskType The type of task (e.g., \"deadline\" or \"event\") for which the format is invalid.","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException if the task type is unknown or unsupported.","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    public InvalidTaskFormatException(String taskType) throws DukeException {","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"        super(getErrorMessage(taskType));","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     * Generates an error message based on the provided task type.","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskType The type of task (e.g., \"deadline\" or \"event\") for which the format is invalid.","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"     * @return The error message indicating the invalid task format.","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException if the task type is unknown or unsupported.","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    private static String getErrorMessage(String taskType) throws DukeException {","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"        switch (taskType) {","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"        case \"deadline\":","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"            return \"Invalid format for Deadline task. Please provide in the format of \"","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"                + \"\u003cdeadline + Task Name + /by + yyyy-MM-dd HH:mm\u003e\";","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        case \"event\":","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"            return \"Invalid format for Event task. Please provide in the format of \"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"                + \"\u003cevent + Task Name + /from + \"","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"                + \"yyyy-MM-dd HH:mm:ss + /to + yyyy-MM-dd HH:mm\u003e\";","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        default:","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"            throw new DukeException(\"Unknown task type: \" + taskType);","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":42}},{"path":"src/main/java/duke/dukeexceptions/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.dukeexceptions;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * The TaskNotFoundException class is used to indicate that","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" * the Duke application cannot find a specified task.","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"public class TaskNotFoundException extends DukeException {","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a new TaskNotFoundException to informs the user","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     * that the Duke application couldn\u0027t find the specified task.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    public TaskNotFoundException() {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I can\u0027t find this task!\");","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":18}},{"path":"src/main/java/duke/filehandler/FileCorruptedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.filehandler;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * Represents an `FileCorruptedException` for a corrupted Duke data file.","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"class FileCorruptedException extends FileException {","lastModifiedDate":"2023-11-13"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"    public FileCorruptedException() {","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"        super(\"File is corrupted, proceed to start a new session without data loading.\");","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":13}},{"path":"src/main/java/duke/filehandler/FileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.filehandler;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `FileException` class for file-related exceptions in Duke.","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"abstract class FileException extends Exception {","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"    public FileException(String message) {","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"        super(message);","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":13}},{"path":"src/main/java/duke/filehandler/FileHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.filehandler;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `FileHandler` class for handling files in Duke.","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"abstract class FileHandler {","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"    // The default file path for Duke data","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"    private String filePath \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-11-05"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"    public String getFilePath() {","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"        return filePath;","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":15}},{"path":"src/main/java/duke/filehandler/FileRead.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.filehandler;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.InvalidNumberFormatException;","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import duke.parser.DukeParser;","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `FileRead` class for reading and loading saved tasks from Duke\u0027s data file.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"public class FileRead extends FileHandler {","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"     * Reads and loads saved tasks from a file into the task list.","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to load the saved tasks into.","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"    public boolean getSavedTask(List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-11-17"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"            // Create a FileReader to open the file","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"            FileReader fileReader \u003d new FileReader(getFilePath());","lastModifiedDate":"2023-11-05"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"            // Create a BufferedReader to read the file efficiently","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"            String inputs;","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"            // Read each line from the file until the end is reached","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"            while ((inputs \u003d bufferedReader.readLine()) !\u003d null) {","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"                String[] input \u003d inputs.split(\"\\\\|\");","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"                if (input.length \u003c\u003d 2 || input.length \u003e 5) {","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"                    throw new FileCorruptedException();","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"                }","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"                for (int i \u003d 0; i \u003c input.length; i++) {","lastModifiedDate":"2023-11-13"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"                    input[i] \u003d input[i].trim();","lastModifiedDate":"2023-11-13"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"                }","lastModifiedDate":"2023-11-13"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"                String taskType \u003d input[0];","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"                boolean isCompleted;","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"                try {","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"                    int temp \u003d DukeParser.parseInteger(input[1]);","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"                    isCompleted \u003d temp \u003d\u003d 1;","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"                } catch (NumberFormatException | InvalidNumberFormatException e) {","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"                    throw new FileCorruptedException();","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"                }","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"                String taskName \u003d input[2];","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"                Task task;","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"                switch (taskType) {","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"                case \"T\":","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"                    if (input.length !\u003d 3) {","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"                        throw new FileCorruptedException();","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"                    }","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"                    task \u003d new TodoTask(taskName, isCompleted);","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"                    break;","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"                case \"D\":","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"                    if (input.length !\u003d 4) {","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"                        throw new FileCorruptedException();","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"                    }","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"                    try {","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"                        LocalDateTime taskDueDate \u003d DukeParser.parseDateTimeOrDate(input[3]);","lastModifiedDate":"2023-11-13"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"                        task \u003d new DeadlineTask(taskName, isCompleted, taskDueDate);","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"                        throw new FileCorruptedException();","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"                    }","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"                    break;","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"                case \"E\":","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"                    if (input.length !\u003d 5) {","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"                        throw new FileCorruptedException();","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"                    }","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"                    try {","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"                        LocalDateTime taskFrom \u003d DukeParser.parseDateTimeOrDate(input[3]);","lastModifiedDate":"2023-11-13"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"                        LocalDateTime taskTo \u003d DukeParser.parseDateTimeOrDate(input[4]);","lastModifiedDate":"2023-11-13"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"                        task \u003d new EventTask(taskName, isCompleted, taskFrom, taskTo);","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"                        throw new FileCorruptedException();","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"                    }","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"                    break;","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"                default:","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"                    throw new FileCorruptedException();","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"                }","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"                taskList.add(task);","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"            // Close the BufferedReader and FileReader to release system resources","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"            bufferedReader.close();","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"            fileReader.close();","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-17"},{"lineNumber":94,"author":{"gitId":"ZiMing2983"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"ZiMing2983"},"content":"            return true;","lastModifiedDate":"2023-11-17"},{"lineNumber":96,"author":{"gitId":"ZiMing2983"},"content":"            //System.out.println(\"No saved tasks found, proceed to start.\");","lastModifiedDate":"2023-11-17"},{"lineNumber":97,"author":{"gitId":"ZiMing2983"},"content":"        } catch (FileCorruptedException e) {","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-11-04"},{"lineNumber":99,"author":{"gitId":"ZiMing2983"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"ZiMing2983"},"content":"            e.printStackTrace(); // Handle any exceptions that may occur","lastModifiedDate":"2023-10-24"},{"lineNumber":101,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"ZiMing2983"},"content":"        return false;","lastModifiedDate":"2023-11-17"},{"lineNumber":103,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":105,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":105}},{"path":"src/main/java/duke/filehandler/FileStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.filehandler;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.io.File;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `FileStorage` class for storing the user\u0027s task list as a Duke\u0027s data file.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"public class FileStorage extends FileHandler {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"     * Stores the list of tasks in a file.","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to be stored in the file.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    public void store(List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"        File outputFile \u003d new File(getFilePath());","lastModifiedDate":"2023-11-05"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"            // Check if the file exists, and create it if it doesn\u0027t","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"            if (!outputFile.exists()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"                outputFile.getParentFile().mkdirs();","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"                outputFile.createNewFile();","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"            // Open the file for writing","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"            try (FileOutputStream fileOutputStream \u003d new FileOutputStream(outputFile, false);","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"                 PrintWriter printWriter \u003d new PrintWriter(fileOutputStream)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"                // Append output to the file","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"                for (Task task : taskList) {","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"                    printWriter.println(task.toFile());","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"                }","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":42}},{"path":"src/main/java/duke/parser/CommandValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.parser;","lastModifiedDate":"2023-11-04"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-11-04"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-04"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-04"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2023-11-05"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2023-11-05"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import duke.command.AddTodoCommand;","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.command.MarkAsCompletedCommand;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.command.MarkAsInCompletedCommand;","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.command.OnCommand;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"import duke.command.RescheduleCommand;","lastModifiedDate":"2023-11-05"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.ChangeTodoDateException;","lastModifiedDate":"2023-11-05"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.DueDatePastDateException;","lastModifiedDate":"2023-11-18"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.DukeException;","lastModifiedDate":"2023-11-05"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.EmptyArgumentException;","lastModifiedDate":"2023-11-13"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.EmptyTaskListException;","lastModifiedDate":"2023-11-13"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.EventDateException;","lastModifiedDate":"2023-11-05"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.InvalidCommandException;","lastModifiedDate":"2023-11-05"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.InvalidDateFormatException;","lastModifiedDate":"2023-11-05"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.InvalidNumberFormatException;","lastModifiedDate":"2023-11-05"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.InvalidTaskFormatException;","lastModifiedDate":"2023-11-05"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.TaskNotFoundException;","lastModifiedDate":"2023-11-05"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-05"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface;","lastModifiedDate":"2023-11-17"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-05"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-05"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":" * CommandValidator class is responsible for executing various user commands.","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-05"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"public class CommandValidator {","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    // Constants for command keywords","lastModifiedDate":"2023-11-05"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    public static final String HELP_COMMAND \u003d \"help\";","lastModifiedDate":"2023-11-17"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    public static final String LIST_COMMAND \u003d \"list\";","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"    public static final String TODO_COMMAND \u003d \"todo\";","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"    public static final String DEADLINE_COMMAND \u003d \"deadline\";","lastModifiedDate":"2023-11-04"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    public static final String EVENT_COMMAND \u003d \"event\";","lastModifiedDate":"2023-11-04"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    public static final String ON_COMMAND \u003d \"on\";","lastModifiedDate":"2023-11-04"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"    public static final String FIND_COMMAND \u003d \"find\";","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"    public static final String RESCHEDULE_COMMAND \u003d \"reschedule\";","lastModifiedDate":"2023-11-04"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"    public static final String DELETE_COMMAND \u003d \"delete\";","lastModifiedDate":"2023-11-04"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"    public static final String MARK_COMMAND \u003d \"mark\";","lastModifiedDate":"2023-11-04"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    public static final String UNMARK_COMMAND \u003d \"unmark\";","lastModifiedDate":"2023-11-04"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the specified command based on user input.","lastModifiedDate":"2023-11-13"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"     * This method parses the command from the user input, extracts the relevant arguments,","lastModifiedDate":"2023-11-13"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"     * and then executes the corresponding command on the task list. The supported commands","lastModifiedDate":"2023-11-13"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"     * include listing tasks, adding todo/deadline/event tasks, finding tasks, rescheduling","lastModifiedDate":"2023-11-13"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"     * tasks, and modifying tasks (delete/mark/unmark).","lastModifiedDate":"2023-11-13"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-05"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage for persisting task data.","lastModifiedDate":"2023-11-13"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"     * @param display The message display for printing messages to the user.","lastModifiedDate":"2023-11-13"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks on which the commands will be executed.","lastModifiedDate":"2023-11-13"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"     * @param command The parsed command from the user input.","lastModifiedDate":"2023-11-13"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"     * @param userInput The complete user input containing the command and any additional arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If an unsupported or invalid command is provided,","lastModifiedDate":"2023-11-13"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"     *                      or if any specific command execution encounters an exception.","lastModifiedDate":"2023-11-13"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"    public void executeCommand(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList,","lastModifiedDate":"2023-11-05"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"                               String command, String userInput) throws DukeException {","lastModifiedDate":"2023-11-05"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"        String arguments \u003d userInput.substring(command.length()).trim();","lastModifiedDate":"2023-11-04"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"        switch (command) {","lastModifiedDate":"2023-11-04"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"        case HELP_COMMAND:","lastModifiedDate":"2023-11-17"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"            UserInterface.MessageDisplay.helpUserOnCommand();","lastModifiedDate":"2023-11-17"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"            break;","lastModifiedDate":"2023-11-17"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"        case LIST_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"            executeListCommand(display, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"            break;","lastModifiedDate":"2023-11-04"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"        case TODO_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"            executeTodoCommand(fileStorage, display, taskList, arguments);","lastModifiedDate":"2023-11-04"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"            break;","lastModifiedDate":"2023-11-04"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"        case DEADLINE_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"            executeDeadlineCommand(fileStorage, display, taskList, arguments);","lastModifiedDate":"2023-11-04"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"            break;","lastModifiedDate":"2023-11-04"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"        case EVENT_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"            executeEventCommand(fileStorage, display, taskList, arguments);","lastModifiedDate":"2023-11-04"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"            break;","lastModifiedDate":"2023-11-04"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"        case ON_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"            executeOnCommand(display, taskList, arguments);","lastModifiedDate":"2023-11-04"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"            break;","lastModifiedDate":"2023-11-04"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"        case FIND_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"            executeFindCommand(display, taskList, arguments);","lastModifiedDate":"2023-11-04"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"            break;","lastModifiedDate":"2023-11-04"},{"lineNumber":93,"author":{"gitId":"ZiMing2983"},"content":"        case RESCHEDULE_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":94,"author":{"gitId":"ZiMing2983"},"content":"            rescheduleTask(fileStorage, display, taskList, arguments);","lastModifiedDate":"2023-11-04"},{"lineNumber":95,"author":{"gitId":"ZiMing2983"},"content":"            break;","lastModifiedDate":"2023-11-04"},{"lineNumber":96,"author":{"gitId":"ZiMing2983"},"content":"        case DELETE_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":97,"author":{"gitId":"ZiMing2983"},"content":"        case MARK_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":98,"author":{"gitId":"ZiMing2983"},"content":"        case UNMARK_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":99,"author":{"gitId":"ZiMing2983"},"content":"            modifyTask(fileStorage, display, taskList, userInput);","lastModifiedDate":"2023-11-04"},{"lineNumber":100,"author":{"gitId":"ZiMing2983"},"content":"            break;","lastModifiedDate":"2023-11-04"},{"lineNumber":101,"author":{"gitId":"ZiMing2983"},"content":"        default:","lastModifiedDate":"2023-11-04"},{"lineNumber":102,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2023-11-04"},{"lineNumber":103,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":104,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":105,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":106,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":107,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command to add a todo task based on the provided task name.","lastModifiedDate":"2023-11-13"},{"lineNumber":108,"author":{"gitId":"ZiMing2983"},"content":"     * This method validates the provided task name for creating a todo task","lastModifiedDate":"2023-11-13"},{"lineNumber":109,"author":{"gitId":"ZiMing2983"},"content":"     * and then executes the command to add the todo task to the task list.","lastModifiedDate":"2023-11-13"},{"lineNumber":110,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-05"},{"lineNumber":111,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage for persisting task data.","lastModifiedDate":"2023-11-13"},{"lineNumber":112,"author":{"gitId":"ZiMing2983"},"content":"     * @param display The message display for printing messages to the user.","lastModifiedDate":"2023-11-13"},{"lineNumber":113,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to which the todo task will be added.","lastModifiedDate":"2023-11-13"},{"lineNumber":114,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName The user input specifying the todo task name.","lastModifiedDate":"2023-11-13"},{"lineNumber":115,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If an empty task name is encountered or provided for the todo command.","lastModifiedDate":"2023-11-13"},{"lineNumber":116,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":117,"author":{"gitId":"ZiMing2983"},"content":"    private void executeTodoCommand(FileStorage fileStorage, MessageDisplay display,","lastModifiedDate":"2023-11-05"},{"lineNumber":118,"author":{"gitId":"ZiMing2983"},"content":"                                    List\u003cTask\u003e taskList, String taskName) throws DukeException {","lastModifiedDate":"2023-11-05"},{"lineNumber":119,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":120,"author":{"gitId":"ZiMing2983"},"content":"        if (taskName.isEmpty()) {","lastModifiedDate":"2023-11-04"},{"lineNumber":121,"author":{"gitId":"ZiMing2983"},"content":"            throw new EmptyArgumentException(TODO_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":122,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":123,"author":{"gitId":"ZiMing2983"},"content":"        new AddTodoCommand(taskName).execute(fileStorage, display, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":124,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":125,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":126,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":127,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command to add a deadline task based on the provided arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":128,"author":{"gitId":"ZiMing2983"},"content":"     * This method validates the provided arguments for creating a deadline task,","lastModifiedDate":"2023-11-13"},{"lineNumber":129,"author":{"gitId":"ZiMing2983"},"content":"     * extracts the task name and due date, and then executes the command to add","lastModifiedDate":"2023-11-13"},{"lineNumber":130,"author":{"gitId":"ZiMing2983"},"content":"     * the deadline task to the task list.","lastModifiedDate":"2023-11-13"},{"lineNumber":131,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-05"},{"lineNumber":132,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage for persisting task data.","lastModifiedDate":"2023-11-13"},{"lineNumber":133,"author":{"gitId":"ZiMing2983"},"content":"     * @param display The message display for printing messages to the user.","lastModifiedDate":"2023-11-13"},{"lineNumber":134,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to which the deadline task will be added.","lastModifiedDate":"2023-11-13"},{"lineNumber":135,"author":{"gitId":"ZiMing2983"},"content":"     * @param arguments The user input arguments specifying the deadline task details.","lastModifiedDate":"2023-11-13"},{"lineNumber":136,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If an empty argument is encountered or provided for the deadline command,","lastModifiedDate":"2023-11-13"},{"lineNumber":137,"author":{"gitId":"ZiMing2983"},"content":"     *                      the task name or due date information is missing, an invalid date format is provided,","lastModifiedDate":"2023-11-13"},{"lineNumber":138,"author":{"gitId":"ZiMing2983"},"content":"     *                      or the due date is in the past.","lastModifiedDate":"2023-11-13"},{"lineNumber":139,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":140,"author":{"gitId":"ZiMing2983"},"content":"    private void executeDeadlineCommand(FileStorage fileStorage, MessageDisplay display,","lastModifiedDate":"2023-11-05"},{"lineNumber":141,"author":{"gitId":"ZiMing2983"},"content":"                                        List\u003cTask\u003e taskList, String arguments) throws DukeException {","lastModifiedDate":"2023-11-05"},{"lineNumber":142,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":143,"author":{"gitId":"ZiMing2983"},"content":"        if (arguments.isEmpty()) {","lastModifiedDate":"2023-11-04"},{"lineNumber":144,"author":{"gitId":"ZiMing2983"},"content":"            throw new EmptyArgumentException(DEADLINE_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":145,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":146,"author":{"gitId":"ZiMing2983"},"content":"        String taskName \u003d","lastModifiedDate":"2023-11-05"},{"lineNumber":147,"author":{"gitId":"ZiMing2983"},"content":"            DukeParser.extractTaskName(arguments, DukeParser.extractDeadlineByIndex(arguments));","lastModifiedDate":"2023-11-05"},{"lineNumber":148,"author":{"gitId":"ZiMing2983"},"content":"        String taskDueDateString \u003d DukeParser.extractDeadlineDueDateString(arguments);","lastModifiedDate":"2023-11-04"},{"lineNumber":149,"author":{"gitId":"ZiMing2983"},"content":"        if (taskDueDateString.isEmpty() || taskName.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":150,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidTaskFormatException(DEADLINE_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":151,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":152,"author":{"gitId":"ZiMing2983"},"content":"        try {","lastModifiedDate":"2023-11-04"},{"lineNumber":153,"author":{"gitId":"ZiMing2983"},"content":"            LocalDateTime taskDueDate \u003d DukeParser.parseDateTimeOrDate(taskDueDateString);","lastModifiedDate":"2023-11-04"},{"lineNumber":154,"author":{"gitId":"ZiMing2983"},"content":"            if (taskDueDate.isBefore((LocalDateTime.now()))) {","lastModifiedDate":"2023-11-05"},{"lineNumber":155,"author":{"gitId":"ZiMing2983"},"content":"                throw new DueDatePastDateException();","lastModifiedDate":"2023-11-18"},{"lineNumber":156,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-05"},{"lineNumber":157,"author":{"gitId":"ZiMing2983"},"content":"            assert taskDueDate.isAfter(LocalDateTime.now());","lastModifiedDate":"2023-11-04"},{"lineNumber":158,"author":{"gitId":"ZiMing2983"},"content":"            new AddDeadlineCommand(taskName, taskDueDate).execute(fileStorage, display, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":159,"author":{"gitId":"ZiMing2983"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-11-04"},{"lineNumber":160,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidTaskFormatException(DEADLINE_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":161,"author":{"gitId":"ZiMing2983"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2023-11-04"},{"lineNumber":162,"author":{"gitId":"ZiMing2983"},"content":"            throw new DueDatePastDateException();","lastModifiedDate":"2023-11-18"},{"lineNumber":163,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":164,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":165,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":166,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":167,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command to display tasks with a specified date.","lastModifiedDate":"2023-11-13"},{"lineNumber":168,"author":{"gitId":"ZiMing2983"},"content":"     * This method validates the provided date string for the \"on\" command, trims it,","lastModifiedDate":"2023-11-13"},{"lineNumber":169,"author":{"gitId":"ZiMing2983"},"content":"     * and then executes the command to display tasks with the specified date.","lastModifiedDate":"2023-11-13"},{"lineNumber":170,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-05"},{"lineNumber":171,"author":{"gitId":"ZiMing2983"},"content":"     * @param display The message display for printing messages to the user.","lastModifiedDate":"2023-11-13"},{"lineNumber":172,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to search for tasks with the specified date.","lastModifiedDate":"2023-11-13"},{"lineNumber":173,"author":{"gitId":"ZiMing2983"},"content":"     * @param arguments The user input arguments specifying the date for the \"on\" command.","lastModifiedDate":"2023-11-13"},{"lineNumber":174,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If an empty date string is encountered or provided for the \"on\" command,","lastModifiedDate":"2023-11-13"},{"lineNumber":175,"author":{"gitId":"ZiMing2983"},"content":"     *                      or an invalid date format is provided.","lastModifiedDate":"2023-11-13"},{"lineNumber":176,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":177,"author":{"gitId":"ZiMing2983"},"content":"    private void executeOnCommand(MessageDisplay display, List\u003cTask\u003e taskList, String arguments)","lastModifiedDate":"2023-11-05"},{"lineNumber":178,"author":{"gitId":"ZiMing2983"},"content":"            throws DukeException {","lastModifiedDate":"2023-11-05"},{"lineNumber":179,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":180,"author":{"gitId":"ZiMing2983"},"content":"        String dateString \u003d arguments.trim();","lastModifiedDate":"2023-11-04"},{"lineNumber":181,"author":{"gitId":"ZiMing2983"},"content":"        if (dateString.isEmpty()) {","lastModifiedDate":"2023-11-04"},{"lineNumber":182,"author":{"gitId":"ZiMing2983"},"content":"            throw new EmptyArgumentException(ON_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":183,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":184,"author":{"gitId":"ZiMing2983"},"content":"        try {","lastModifiedDate":"2023-11-04"},{"lineNumber":185,"author":{"gitId":"ZiMing2983"},"content":"            LocalDate date \u003d DukeParser.parseDate(dateString);","lastModifiedDate":"2023-11-04"},{"lineNumber":186,"author":{"gitId":"ZiMing2983"},"content":"            new OnCommand(date).execute(display, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":187,"author":{"gitId":"ZiMing2983"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-11-04"},{"lineNumber":188,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidDateFormatException();","lastModifiedDate":"2023-11-04"},{"lineNumber":189,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":190,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":191,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":192,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":193,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command to find tasks containing a specified keyword.","lastModifiedDate":"2023-11-13"},{"lineNumber":194,"author":{"gitId":"ZiMing2983"},"content":"     * This method validates the provided keyword for the find command, trims it,","lastModifiedDate":"2023-11-13"},{"lineNumber":195,"author":{"gitId":"ZiMing2983"},"content":"     * and then executes the command to find and display tasks containing the specified keyword.","lastModifiedDate":"2023-11-13"},{"lineNumber":196,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-05"},{"lineNumber":197,"author":{"gitId":"ZiMing2983"},"content":"     * @param display The message display for printing messages to the user.","lastModifiedDate":"2023-11-13"},{"lineNumber":198,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to search for the keyword.","lastModifiedDate":"2023-11-13"},{"lineNumber":199,"author":{"gitId":"ZiMing2983"},"content":"     * @param arguments The user input arguments specifying the keyword for the find command.","lastModifiedDate":"2023-11-13"},{"lineNumber":200,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If an empty keyword is encountered or provided for the find command.","lastModifiedDate":"2023-11-13"},{"lineNumber":201,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":202,"author":{"gitId":"ZiMing2983"},"content":"    private void executeFindCommand(MessageDisplay display, List\u003cTask\u003e taskList, String arguments)","lastModifiedDate":"2023-11-05"},{"lineNumber":203,"author":{"gitId":"ZiMing2983"},"content":"            throws DukeException {","lastModifiedDate":"2023-11-05"},{"lineNumber":204,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":205,"author":{"gitId":"ZiMing2983"},"content":"        String keywordString \u003d arguments.trim();","lastModifiedDate":"2023-11-04"},{"lineNumber":206,"author":{"gitId":"ZiMing2983"},"content":"        if (keywordString.isEmpty()) {","lastModifiedDate":"2023-11-04"},{"lineNumber":207,"author":{"gitId":"ZiMing2983"},"content":"            throw new EmptyArgumentException(FIND_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":208,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":209,"author":{"gitId":"ZiMing2983"},"content":"        new FindCommand(keywordString).execute(display, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":210,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":211,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":212,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":213,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command to add an event task based on the provided arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":214,"author":{"gitId":"ZiMing2983"},"content":"     * This method validates the provided arguments for creating an event task, extracts","lastModifiedDate":"2023-11-13"},{"lineNumber":215,"author":{"gitId":"ZiMing2983"},"content":"     * the task name, start date, and end date, and then executes the command to add the","lastModifiedDate":"2023-11-13"},{"lineNumber":216,"author":{"gitId":"ZiMing2983"},"content":"     * event task to the task list.","lastModifiedDate":"2023-11-13"},{"lineNumber":217,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-05"},{"lineNumber":218,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage for persisting task data.","lastModifiedDate":"2023-11-13"},{"lineNumber":219,"author":{"gitId":"ZiMing2983"},"content":"     * @param display The message display for printing messages to the user.","lastModifiedDate":"2023-11-13"},{"lineNumber":220,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to which the event task will be added.","lastModifiedDate":"2023-11-13"},{"lineNumber":221,"author":{"gitId":"ZiMing2983"},"content":"     * @param arguments The user input arguments specifying the event task details.","lastModifiedDate":"2023-11-13"},{"lineNumber":222,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If an empty argument is encountered, the task name or date","lastModifiedDate":"2023-11-13"},{"lineNumber":223,"author":{"gitId":"ZiMing2983"},"content":"     *                      information is missing, an invalid date format is provided,","lastModifiedDate":"2023-11-13"},{"lineNumber":224,"author":{"gitId":"ZiMing2983"},"content":"     *                      or the start date is after the end date.","lastModifiedDate":"2023-11-13"},{"lineNumber":225,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":226,"author":{"gitId":"ZiMing2983"},"content":"    private void executeEventCommand(FileStorage fileStorage, MessageDisplay display,","lastModifiedDate":"2023-11-05"},{"lineNumber":227,"author":{"gitId":"ZiMing2983"},"content":"                                     List\u003cTask\u003e taskList, String arguments) throws DukeException {","lastModifiedDate":"2023-11-05"},{"lineNumber":228,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":229,"author":{"gitId":"ZiMing2983"},"content":"        if (arguments.isEmpty()) {","lastModifiedDate":"2023-11-04"},{"lineNumber":230,"author":{"gitId":"ZiMing2983"},"content":"            throw new EmptyArgumentException(EVENT_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":231,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":232,"author":{"gitId":"ZiMing2983"},"content":"        String taskName;","lastModifiedDate":"2023-11-04"},{"lineNumber":233,"author":{"gitId":"ZiMing2983"},"content":"        String taskFromDateString;","lastModifiedDate":"2023-11-04"},{"lineNumber":234,"author":{"gitId":"ZiMing2983"},"content":"        String taskToDateString;","lastModifiedDate":"2023-11-04"},{"lineNumber":235,"author":{"gitId":"ZiMing2983"},"content":"        taskFromDateString \u003d DukeParser.extractEventFromDateString(arguments);","lastModifiedDate":"2023-11-04"},{"lineNumber":236,"author":{"gitId":"ZiMing2983"},"content":"        taskName \u003d DukeParser.extractTaskName(arguments, DukeParser.extractEventFromIndex(arguments));","lastModifiedDate":"2023-11-04"},{"lineNumber":237,"author":{"gitId":"ZiMing2983"},"content":"        taskToDateString \u003d DukeParser.extractEventToDateString(arguments);","lastModifiedDate":"2023-11-04"},{"lineNumber":238,"author":{"gitId":"ZiMing2983"},"content":"        if (taskFromDateString.isEmpty() || taskToDateString.isEmpty() || taskName.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":239,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidTaskFormatException(EVENT_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":240,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":241,"author":{"gitId":"ZiMing2983"},"content":"        try {","lastModifiedDate":"2023-11-04"},{"lineNumber":242,"author":{"gitId":"ZiMing2983"},"content":"            LocalDateTime taskFromDateTime \u003d DukeParser.parseDateTimeOrDate(taskFromDateString);","lastModifiedDate":"2023-11-04"},{"lineNumber":243,"author":{"gitId":"ZiMing2983"},"content":"            LocalDateTime taskToDateTime \u003d DukeParser.parseDateTimeOrDate(taskToDateString);","lastModifiedDate":"2023-11-04"},{"lineNumber":244,"author":{"gitId":"ZiMing2983"},"content":"            if (taskFromDateTime.isAfter(taskToDateTime)) {","lastModifiedDate":"2023-11-05"},{"lineNumber":245,"author":{"gitId":"ZiMing2983"},"content":"                throw new EventDateException();","lastModifiedDate":"2023-11-05"},{"lineNumber":246,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-05"},{"lineNumber":247,"author":{"gitId":"ZiMing2983"},"content":"            if (taskToDateTime.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2023-11-18"},{"lineNumber":248,"author":{"gitId":"ZiMing2983"},"content":"                throw new DueDatePastDateException();","lastModifiedDate":"2023-11-18"},{"lineNumber":249,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-18"},{"lineNumber":250,"author":{"gitId":"ZiMing2983"},"content":"            assert taskFromDateTime.isBefore(taskToDateTime);","lastModifiedDate":"2023-11-04"},{"lineNumber":251,"author":{"gitId":"ZiMing2983"},"content":"            new AddEventCommand(taskName, taskFromDateTime, taskToDateTime).execute(fileStorage, display,","lastModifiedDate":"2023-11-05"},{"lineNumber":252,"author":{"gitId":"ZiMing2983"},"content":"                taskList);","lastModifiedDate":"2023-11-05"},{"lineNumber":253,"author":{"gitId":"ZiMing2983"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-11-04"},{"lineNumber":254,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidTaskFormatException(EVENT_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":255,"author":{"gitId":"ZiMing2983"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2023-11-04"},{"lineNumber":256,"author":{"gitId":"ZiMing2983"},"content":"            throw new EventDateException();","lastModifiedDate":"2023-11-04"},{"lineNumber":257,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":258,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":259,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":260,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":261,"author":{"gitId":"ZiMing2983"},"content":"     * Executes the command to list all tasks.","lastModifiedDate":"2023-11-13"},{"lineNumber":262,"author":{"gitId":"ZiMing2983"},"content":"     * This method executes the command to list and display all tasks in the task list.","lastModifiedDate":"2023-11-13"},{"lineNumber":263,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-05"},{"lineNumber":264,"author":{"gitId":"ZiMing2983"},"content":"     * @param display The message display for printing messages to the user.","lastModifiedDate":"2023-11-13"},{"lineNumber":265,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to be listed.","lastModifiedDate":"2023-11-13"},{"lineNumber":266,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":267,"author":{"gitId":"ZiMing2983"},"content":"    private void executeListCommand(MessageDisplay display, List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-11-04"},{"lineNumber":268,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":269,"author":{"gitId":"ZiMing2983"},"content":"        new ListCommand().execute(display, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":270,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":271,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":272,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":273,"author":{"gitId":"ZiMing2983"},"content":"     * Reschedules a task based on the provided user input.","lastModifiedDate":"2023-11-13"},{"lineNumber":274,"author":{"gitId":"ZiMing2983"},"content":"     * This method allows the user to reschedule a task by providing a new date and time.","lastModifiedDate":"2023-11-13"},{"lineNumber":275,"author":{"gitId":"ZiMing2983"},"content":"     * The method validates the input and performs the rescheduling action on the task list.","lastModifiedDate":"2023-11-13"},{"lineNumber":276,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-05"},{"lineNumber":277,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage for persisting task data.","lastModifiedDate":"2023-11-13"},{"lineNumber":278,"author":{"gitId":"ZiMing2983"},"content":"     * @param display The message display for printing messages to the user.","lastModifiedDate":"2023-11-13"},{"lineNumber":279,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to be rescheduled.","lastModifiedDate":"2023-11-13"},{"lineNumber":280,"author":{"gitId":"ZiMing2983"},"content":"     * @param userInput The user input specifying the task index and the new date and time.","lastModifiedDate":"2023-11-13"},{"lineNumber":281,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If an empty argument is encountered, an invalid item index,","lastModifiedDate":"2023-11-13"},{"lineNumber":282,"author":{"gitId":"ZiMing2983"},"content":"     *                      a task not found, or an unsupported date format is provided.","lastModifiedDate":"2023-11-13"},{"lineNumber":283,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":284,"author":{"gitId":"ZiMing2983"},"content":"    private void rescheduleTask(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList,","lastModifiedDate":"2023-11-05"},{"lineNumber":285,"author":{"gitId":"ZiMing2983"},"content":"                                String userInput) throws DukeException {","lastModifiedDate":"2023-11-05"},{"lineNumber":286,"author":{"gitId":"ZiMing2983"},"content":"        String[] input \u003d userInput.split(\" \");","lastModifiedDate":"2023-11-04"},{"lineNumber":287,"author":{"gitId":"ZiMing2983"},"content":"        if (input.length \u003c 2) {","lastModifiedDate":"2023-11-13"},{"lineNumber":288,"author":{"gitId":"ZiMing2983"},"content":"            throw new EmptyArgumentException(RESCHEDULE_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":289,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":290,"author":{"gitId":"ZiMing2983"},"content":"        try {","lastModifiedDate":"2023-11-04"},{"lineNumber":291,"author":{"gitId":"ZiMing2983"},"content":"            int itemIndex \u003d DukeParser.parseInteger(input[0]) - 1;","lastModifiedDate":"2023-11-04"},{"lineNumber":292,"author":{"gitId":"ZiMing2983"},"content":"            String revisedDateTimeString;","lastModifiedDate":"2023-11-18"},{"lineNumber":293,"author":{"gitId":"ZiMing2983"},"content":"            if (input.length \u003e 2) {","lastModifiedDate":"2023-11-18"},{"lineNumber":294,"author":{"gitId":"ZiMing2983"},"content":"                revisedDateTimeString \u003d input[1] + \" \" + input[2];","lastModifiedDate":"2023-11-18"},{"lineNumber":295,"author":{"gitId":"ZiMing2983"},"content":"            } else {","lastModifiedDate":"2023-11-18"},{"lineNumber":296,"author":{"gitId":"ZiMing2983"},"content":"                revisedDateTimeString \u003d input[1];","lastModifiedDate":"2023-11-18"},{"lineNumber":297,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-18"},{"lineNumber":298,"author":{"gitId":"ZiMing2983"},"content":"            LocalDateTime revisedDateTime \u003d DukeParser.parseDateTimeOrDate(revisedDateTimeString);","lastModifiedDate":"2023-11-18"},{"lineNumber":299,"author":{"gitId":"ZiMing2983"},"content":"            // Item index must be positive and does not exceed the maximum number of tasks in the list.","lastModifiedDate":"2023-11-05"},{"lineNumber":300,"author":{"gitId":"ZiMing2983"},"content":"            if (itemIndex \u003c 0 || itemIndex \u003e\u003d taskList.size()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":301,"author":{"gitId":"ZiMing2983"},"content":"                throw new TaskNotFoundException();","lastModifiedDate":"2023-11-13"},{"lineNumber":302,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":303,"author":{"gitId":"ZiMing2983"},"content":"            if (taskList.get(itemIndex).getTaskType() \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2023-11-04"},{"lineNumber":304,"author":{"gitId":"ZiMing2983"},"content":"                throw new ChangeTodoDateException();","lastModifiedDate":"2023-11-04"},{"lineNumber":305,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-04"},{"lineNumber":306,"author":{"gitId":"ZiMing2983"},"content":"            new RescheduleCommand(itemIndex, revisedDateTime).execute(fileStorage, display, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":307,"author":{"gitId":"ZiMing2983"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":308,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidDateFormatException();","lastModifiedDate":"2023-11-13"},{"lineNumber":309,"author":{"gitId":"ZiMing2983"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2023-11-04"},{"lineNumber":310,"author":{"gitId":"ZiMing2983"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-11-04"},{"lineNumber":311,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":312,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":313,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":314,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":315,"author":{"gitId":"ZiMing2983"},"content":"     * Modifies a task based on the provided user input.","lastModifiedDate":"2023-11-13"},{"lineNumber":316,"author":{"gitId":"ZiMing2983"},"content":"     * This method allows the user to modify a task by marking it as completed,","lastModifiedDate":"2023-11-13"},{"lineNumber":317,"author":{"gitId":"ZiMing2983"},"content":"     * marking it as incomplete, or deleting it from the task list. The specific","lastModifiedDate":"2023-11-13"},{"lineNumber":318,"author":{"gitId":"ZiMing2983"},"content":"     * modification is determined by the command extracted from the user input.","lastModifiedDate":"2023-11-13"},{"lineNumber":319,"author":{"gitId":"ZiMing2983"},"content":"     * The method validates the command and performs the corresponding action on","lastModifiedDate":"2023-11-13"},{"lineNumber":320,"author":{"gitId":"ZiMing2983"},"content":"     * the task list.","lastModifiedDate":"2023-11-13"},{"lineNumber":321,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-05"},{"lineNumber":322,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage for persisting task data.","lastModifiedDate":"2023-11-13"},{"lineNumber":323,"author":{"gitId":"ZiMing2983"},"content":"     * @param display The message display for printing messages to the user.","lastModifiedDate":"2023-11-13"},{"lineNumber":324,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks to be modified.","lastModifiedDate":"2023-11-13"},{"lineNumber":325,"author":{"gitId":"ZiMing2983"},"content":"     * @param userInput The user input specifying the modification command and task index.","lastModifiedDate":"2023-11-13"},{"lineNumber":326,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If the task list is empty, an invalid command or","lastModifiedDate":"2023-11-13"},{"lineNumber":327,"author":{"gitId":"ZiMing2983"},"content":"     *                      task index is provided, or an empty argument is encountered.","lastModifiedDate":"2023-11-13"},{"lineNumber":328,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":329,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":330,"author":{"gitId":"ZiMing2983"},"content":"    public void modifyTask(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":331,"author":{"gitId":"ZiMing2983"},"content":"                           String userInput) throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":332,"author":{"gitId":"ZiMing2983"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":333,"author":{"gitId":"ZiMing2983"},"content":"            throw new EmptyTaskListException();","lastModifiedDate":"2023-11-13"},{"lineNumber":334,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":335,"author":{"gitId":"ZiMing2983"},"content":"        try {","lastModifiedDate":"2023-11-04"},{"lineNumber":336,"author":{"gitId":"ZiMing2983"},"content":"            String command \u003d DukeParser.parseCommandFromInput(userInput);","lastModifiedDate":"2023-11-13"},{"lineNumber":337,"author":{"gitId":"ZiMing2983"},"content":"            int itemIndex \u003d DukeParser.extractItemIndex(taskList, command, userInput);","lastModifiedDate":"2023-11-13"},{"lineNumber":338,"author":{"gitId":"ZiMing2983"},"content":"            if (itemIndex \u003d\u003d -1) {","lastModifiedDate":"2023-11-04"},{"lineNumber":339,"author":{"gitId":"ZiMing2983"},"content":"                return;","lastModifiedDate":"2023-11-04"},{"lineNumber":340,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-04"},{"lineNumber":341,"author":{"gitId":"ZiMing2983"},"content":"            if (itemIndex \u003c 0 || itemIndex \u003e\u003d taskList.size()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":342,"author":{"gitId":"ZiMing2983"},"content":"                throw new TaskNotFoundException();","lastModifiedDate":"2023-11-13"},{"lineNumber":343,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":344,"author":{"gitId":"ZiMing2983"},"content":"            switch (command) {","lastModifiedDate":"2023-11-13"},{"lineNumber":345,"author":{"gitId":"ZiMing2983"},"content":"            case MARK_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":346,"author":{"gitId":"ZiMing2983"},"content":"                new MarkAsCompletedCommand(itemIndex).execute(fileStorage, display, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":347,"author":{"gitId":"ZiMing2983"},"content":"                break;","lastModifiedDate":"2023-11-04"},{"lineNumber":348,"author":{"gitId":"ZiMing2983"},"content":"            case UNMARK_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":349,"author":{"gitId":"ZiMing2983"},"content":"                new MarkAsInCompletedCommand(itemIndex).execute(fileStorage, display, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":350,"author":{"gitId":"ZiMing2983"},"content":"                break;","lastModifiedDate":"2023-11-04"},{"lineNumber":351,"author":{"gitId":"ZiMing2983"},"content":"            case DELETE_COMMAND:","lastModifiedDate":"2023-11-04"},{"lineNumber":352,"author":{"gitId":"ZiMing2983"},"content":"                new DeleteCommand(itemIndex).execute(fileStorage, display, taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":353,"author":{"gitId":"ZiMing2983"},"content":"                break;","lastModifiedDate":"2023-11-04"},{"lineNumber":354,"author":{"gitId":"ZiMing2983"},"content":"            default:","lastModifiedDate":"2023-11-04"},{"lineNumber":355,"author":{"gitId":"ZiMing2983"},"content":"                throw new InvalidNumberFormatException();","lastModifiedDate":"2023-11-04"},{"lineNumber":356,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-04"},{"lineNumber":357,"author":{"gitId":"ZiMing2983"},"content":"        } catch (InvalidNumberFormatException e) {","lastModifiedDate":"2023-11-04"},{"lineNumber":358,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"%s\\n\", e.getMessage());","lastModifiedDate":"2023-11-04"},{"lineNumber":359,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":360,"author":{"gitId":"ZiMing2983"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":361,"author":{"gitId":"ZiMing2983"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2023-11-04"},{"lineNumber":362,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":363,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":364,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":365,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-11-04"}],"authorContributionMap":{"ZiMing2983":365}},{"path":"src/main/java/duke/parser/DukeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.parser;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-11-05"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-11-05"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-05"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.ChangeTodoDateException;","lastModifiedDate":"2023-11-04"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.DukeException;","lastModifiedDate":"2023-11-04"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.EmptyArgumentException;","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.EmptyCommandException;","lastModifiedDate":"2023-11-04"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.InvalidNumberFormatException;","lastModifiedDate":"2023-11-04"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.InvalidTaskFormatException;","lastModifiedDate":"2023-11-04"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.TaskNotFoundException;","lastModifiedDate":"2023-11-04"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-04"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":" * The `DukeParser` class is responsible for parsing user input and converting it into","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":" * commands and parameters for execution.","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"public class DukeParser {","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"    private static final int BY_KEYWORD_LENGTH \u003d 3;","lastModifiedDate":"2023-11-04"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    private static final int FROM_KEYWORD_LENGTH \u003d 5;","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"    private static final int TO_KEYWORD_LENGTH \u003d 3;","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    private static final String DATE_FORMAT \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    private static final String DATE_TIME_FORMAT \u003d \"yyyy-MM-dd HH:mm\";","lastModifiedDate":"2023-11-04"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"    private static final DateTimeFormatter dateTimeFormatter;","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    private static final DateTimeFormatter dateFormatter;","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    static {","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"        dateFormatter \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        dateTimeFormatter \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT);","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    private final CommandValidator commandValidator;","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-05"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a new DukeParser object and initializes the commandValidator.","lastModifiedDate":"2023-11-13"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-05"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    public DukeParser() {","lastModifiedDate":"2023-11-04"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"        this.commandValidator \u003d new CommandValidator();","lastModifiedDate":"2023-11-13"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"     * Parses a date and time string and returns a `LocalDateTime` object.","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"     * @param dateTimeString The date and time string to be parsed.","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"     * @return A `LocalDateTime` object representing the parsed date and time.","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DateTimeParseException if the string cannot be parsed as a valid date and time.","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"    static LocalDateTime parseDateTime(String dateTimeString) throws DateTimeParseException {","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        return LocalDateTime.parse(dateTimeString, dateTimeFormatter);","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"     * Parses a date string and returns a `LocalDate` object.","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"     * @param dateString The date string to be parsed.","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"     * @return A `LocalDate` object representing the parsed date.","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DateTimeParseException if the string cannot be parsed as a valid date.","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"    static LocalDate parseDate(String dateString) throws DateTimeParseException {","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"        return LocalDate.parse(dateString, dateFormatter);","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"     * Parses a date and time string or a date string and returns a `LocalDateTime` object.","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"     * @param dateTimeString The date and time string to be parsed.","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"     * @return A `LocalDateTime` object representing the parsed date and time.","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DateTimeParseException if the string cannot be parsed as a valid date and time.","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"    public static LocalDateTime parseDateTimeOrDate(String dateTimeString) {","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"        if (dateTimeString.contains(\" \")) {","lastModifiedDate":"2023-10-30"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"            return parseDateTime(dateTimeString);","lastModifiedDate":"2023-10-30"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"        } else {","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"            return parseDate(dateTimeString).atStartOfDay();","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"     * Parses an integer from a string and returns it.","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"ZiMing2983"},"content":"     * @param integer The string containing the integer.","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"ZiMing2983"},"content":"     * @return The parsed integer.","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"ZiMing2983"},"content":"     * @throws InvalidNumberFormatException if the string is not a valid integer.","lastModifiedDate":"2023-10-24"},{"lineNumber":96,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"ZiMing2983"},"content":"    public static Integer parseInteger(String integer) throws InvalidNumberFormatException {","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":99,"author":{"gitId":"ZiMing2983"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"ZiMing2983"},"content":"            return Integer.parseInt(integer);","lastModifiedDate":"2023-10-24"},{"lineNumber":101,"author":{"gitId":"ZiMing2983"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidNumberFormatException(e.getMessage());","lastModifiedDate":"2023-10-24"},{"lineNumber":103,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":105,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":106,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":107,"author":{"gitId":"ZiMing2983"},"content":"     * Parse command from user\u0027s input string.","lastModifiedDate":"2023-11-04"},{"lineNumber":108,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"ZiMing2983"},"content":"     * @param userInput User\u0027s input string","lastModifiedDate":"2023-11-04"},{"lineNumber":110,"author":{"gitId":"ZiMing2983"},"content":"     * @return The parsed command from the input.","lastModifiedDate":"2023-11-04"},{"lineNumber":111,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":112,"author":{"gitId":"ZiMing2983"},"content":"    protected static String parseCommandFromInput(String userInput) throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":113,"author":{"gitId":"ZiMing2983"},"content":"        int spaceIndex \u003d userInput.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-11-04"},{"lineNumber":114,"author":{"gitId":"ZiMing2983"},"content":"        if (spaceIndex \u003d\u003d -1) {","lastModifiedDate":"2023-11-13"},{"lineNumber":115,"author":{"gitId":"ZiMing2983"},"content":"            throw new EmptyArgumentException(userInput);","lastModifiedDate":"2023-11-13"},{"lineNumber":116,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":117,"author":{"gitId":"ZiMing2983"},"content":"        return userInput.substring(0, spaceIndex);","lastModifiedDate":"2023-11-04"},{"lineNumber":118,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":119,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":120,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":121,"author":{"gitId":"ZiMing2983"},"content":"     * Extracts and validates the task index from the user input.","lastModifiedDate":"2023-11-13"},{"lineNumber":122,"author":{"gitId":"ZiMing2983"},"content":"     * This method takes a list of tasks and the user input string. It extracts the part","lastModifiedDate":"2023-11-13"},{"lineNumber":123,"author":{"gitId":"ZiMing2983"},"content":"     * of the input string containing the task index, converts it to an integer, and","lastModifiedDate":"2023-11-13"},{"lineNumber":124,"author":{"gitId":"ZiMing2983"},"content":"     * validates it. If the index is valid, it returns the corresponding item index in","lastModifiedDate":"2023-11-13"},{"lineNumber":125,"author":{"gitId":"ZiMing2983"},"content":"     * the task list. If the index is out of bounds or cannot be parsed, it throws an","lastModifiedDate":"2023-11-13"},{"lineNumber":126,"author":{"gitId":"ZiMing2983"},"content":"     * appropriate exception and prints an error message.","lastModifiedDate":"2023-11-13"},{"lineNumber":127,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":128,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2023-11-04"},{"lineNumber":129,"author":{"gitId":"ZiMing2983"},"content":"     * @param userInput The user input string containing the task index.","lastModifiedDate":"2023-11-13"},{"lineNumber":130,"author":{"gitId":"ZiMing2983"},"content":"     * @return The validated item index in the task list.","lastModifiedDate":"2023-11-13"},{"lineNumber":131,"author":{"gitId":"ZiMing2983"},"content":"     * @throws DukeException If the task index is out of bounds or cannot be parsed,","lastModifiedDate":"2023-11-13"},{"lineNumber":132,"author":{"gitId":"ZiMing2983"},"content":"     *                      indicating a task not found or an invalid number format.","lastModifiedDate":"2023-11-13"},{"lineNumber":133,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"ZiMing2983"},"content":"    static int extractItemIndex(List\u003cTask\u003e taskList, String command , String userInput) throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":135,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":136,"author":{"gitId":"ZiMing2983"},"content":"        try {","lastModifiedDate":"2023-11-04"},{"lineNumber":137,"author":{"gitId":"ZiMing2983"},"content":"            int spaceIndex \u003d userInput.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-11-04"},{"lineNumber":138,"author":{"gitId":"ZiMing2983"},"content":"            String integerPart \u003d userInput.substring(spaceIndex + 1).trim();","lastModifiedDate":"2023-11-04"},{"lineNumber":139,"author":{"gitId":"ZiMing2983"},"content":"            if (integerPart.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":140,"author":{"gitId":"ZiMing2983"},"content":"                throw new EmptyArgumentException(command);","lastModifiedDate":"2023-11-13"},{"lineNumber":141,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":142,"author":{"gitId":"ZiMing2983"},"content":"            int itemIndex \u003d parseInteger(integerPart) - 1;","lastModifiedDate":"2023-11-04"},{"lineNumber":143,"author":{"gitId":"ZiMing2983"},"content":"            if (itemIndex \u003c 0 || itemIndex \u003e\u003d taskList.size()) {","lastModifiedDate":"2023-11-04"},{"lineNumber":144,"author":{"gitId":"ZiMing2983"},"content":"                // Handle exception case where the item index is out of bounds or does not exist","lastModifiedDate":"2023-11-04"},{"lineNumber":145,"author":{"gitId":"ZiMing2983"},"content":"                throw new TaskNotFoundException();","lastModifiedDate":"2023-11-04"},{"lineNumber":146,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"ZiMing2983"},"content":"            return itemIndex;","lastModifiedDate":"2023-11-04"},{"lineNumber":148,"author":{"gitId":"ZiMing2983"},"content":"        } catch (InvalidNumberFormatException e) {","lastModifiedDate":"2023-11-04"},{"lineNumber":149,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"%s\\n\", e.getMessage());","lastModifiedDate":"2023-11-04"},{"lineNumber":150,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":151,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":152,"author":{"gitId":"ZiMing2983"},"content":"        return -1;","lastModifiedDate":"2023-11-04"},{"lineNumber":153,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":155,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":156,"author":{"gitId":"ZiMing2983"},"content":"     * Extracts the task name from the provided arguments, up to the specified index.","lastModifiedDate":"2023-11-13"},{"lineNumber":157,"author":{"gitId":"ZiMing2983"},"content":"     * This method takes a string of arguments and an index indicating the first occurrence","lastModifiedDate":"2023-11-13"},{"lineNumber":158,"author":{"gitId":"ZiMing2983"},"content":"     * of a delimiter. It extracts the task name by taking a substring from the beginning","lastModifiedDate":"2023-11-13"},{"lineNumber":159,"author":{"gitId":"ZiMing2983"},"content":"     * of the arguments up to the specified index (exclusive), and then trims any leading","lastModifiedDate":"2023-11-13"},{"lineNumber":160,"author":{"gitId":"ZiMing2983"},"content":"     * or trailing whitespace.","lastModifiedDate":"2023-11-13"},{"lineNumber":161,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-13"},{"lineNumber":162,"author":{"gitId":"ZiMing2983"},"content":"     * @param arguments The string containing the arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":163,"author":{"gitId":"ZiMing2983"},"content":"     * @param firstIndex The index indicating the first occurrence of a delimiter.","lastModifiedDate":"2023-11-13"},{"lineNumber":164,"author":{"gitId":"ZiMing2983"},"content":"     * @return The extracted task name.","lastModifiedDate":"2023-11-13"},{"lineNumber":165,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":166,"author":{"gitId":"ZiMing2983"},"content":"    static String extractTaskName(String arguments, int firstIndex) {","lastModifiedDate":"2023-11-13"},{"lineNumber":167,"author":{"gitId":"ZiMing2983"},"content":"        return arguments.substring(0, firstIndex).trim();","lastModifiedDate":"2023-11-04"},{"lineNumber":168,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":169,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":170,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":171,"author":{"gitId":"ZiMing2983"},"content":"     * Extracts the deadline due date string from the provided arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":172,"author":{"gitId":"ZiMing2983"},"content":"     * This method takes a string of arguments and extracts the deadline due date string","lastModifiedDate":"2023-11-13"},{"lineNumber":173,"author":{"gitId":"ZiMing2983"},"content":"     * by locating the \"/by\" keyword and retrieving the substring following it. The extracted","lastModifiedDate":"2023-11-13"},{"lineNumber":174,"author":{"gitId":"ZiMing2983"},"content":"     * string is then trimmed to remove any leading or trailing whitespace. If the resulting","lastModifiedDate":"2023-11-13"},{"lineNumber":175,"author":{"gitId":"ZiMing2983"},"content":"     * string is empty, an exception is thrown to indicate an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":176,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-13"},{"lineNumber":177,"author":{"gitId":"ZiMing2983"},"content":"     * @param arguments The string containing the arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":178,"author":{"gitId":"ZiMing2983"},"content":"     * @return The extracted deadline due date string.","lastModifiedDate":"2023-11-13"},{"lineNumber":179,"author":{"gitId":"ZiMing2983"},"content":"     * @throws InvalidTaskFormatException If the deadline due date string is empty,","lastModifiedDate":"2023-11-13"},{"lineNumber":180,"author":{"gitId":"ZiMing2983"},"content":"     *                      indicating an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":181,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":182,"author":{"gitId":"ZiMing2983"},"content":"    static String extractDeadlineDueDateString(String arguments) throws DukeException {","lastModifiedDate":"2023-11-04"},{"lineNumber":183,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":184,"author":{"gitId":"ZiMing2983"},"content":"        String taskDueDateString \u003d","lastModifiedDate":"2023-11-05"},{"lineNumber":185,"author":{"gitId":"ZiMing2983"},"content":"            arguments.substring(extractDeadlineByIndex(arguments) + BY_KEYWORD_LENGTH).trim();","lastModifiedDate":"2023-11-05"},{"lineNumber":186,"author":{"gitId":"ZiMing2983"},"content":"        if (taskDueDateString.isEmpty()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":187,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidTaskFormatException(CommandValidator.DEADLINE_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":188,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":189,"author":{"gitId":"ZiMing2983"},"content":"        return taskDueDateString;","lastModifiedDate":"2023-11-04"},{"lineNumber":190,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":191,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":192,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":193,"author":{"gitId":"ZiMing2983"},"content":"     * Extracts the deadline due date string from the provided arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":194,"author":{"gitId":"ZiMing2983"},"content":"     * This method takes a string of arguments and extracts the deadline due date string","lastModifiedDate":"2023-11-13"},{"lineNumber":195,"author":{"gitId":"ZiMing2983"},"content":"     * by locating the \"by\" keyword and retrieving the substring following it. The extracted","lastModifiedDate":"2023-11-13"},{"lineNumber":196,"author":{"gitId":"ZiMing2983"},"content":"     * string is then trimmed to remove any leading or trailing whitespace. If the resulting","lastModifiedDate":"2023-11-13"},{"lineNumber":197,"author":{"gitId":"ZiMing2983"},"content":"     * string is empty, an exception is thrown to indicate an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":198,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-13"},{"lineNumber":199,"author":{"gitId":"ZiMing2983"},"content":"     * @param arguments The string containing the arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":200,"author":{"gitId":"ZiMing2983"},"content":"     * @return The extracted deadline due date string.","lastModifiedDate":"2023-11-13"},{"lineNumber":201,"author":{"gitId":"ZiMing2983"},"content":"     * @throws InvalidTaskFormatException If the deadline due date string is empty,","lastModifiedDate":"2023-11-13"},{"lineNumber":202,"author":{"gitId":"ZiMing2983"},"content":"     *                      indicating an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":203,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":204,"author":{"gitId":"ZiMing2983"},"content":"    static String extractEventFromDateString(String arguments) throws DukeException {","lastModifiedDate":"2023-11-04"},{"lineNumber":205,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":206,"author":{"gitId":"ZiMing2983"},"content":"        int fromIndex \u003d extractEventFromIndex(arguments);","lastModifiedDate":"2023-11-04"},{"lineNumber":207,"author":{"gitId":"ZiMing2983"},"content":"        String taskFromDateString \u003d","lastModifiedDate":"2023-11-05"},{"lineNumber":208,"author":{"gitId":"ZiMing2983"},"content":"            arguments.substring(fromIndex + FROM_KEYWORD_LENGTH, extractEventToIndex(arguments)).trim();","lastModifiedDate":"2023-11-05"},{"lineNumber":209,"author":{"gitId":"ZiMing2983"},"content":"        if (taskFromDateString.isEmpty()) {","lastModifiedDate":"2023-11-04"},{"lineNumber":210,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidTaskFormatException(CommandValidator.EVENT_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":211,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":212,"author":{"gitId":"ZiMing2983"},"content":"        return taskFromDateString;","lastModifiedDate":"2023-11-04"},{"lineNumber":213,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":214,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":215,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":216,"author":{"gitId":"ZiMing2983"},"content":"     * Extracts the event end date string from the provided arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":217,"author":{"gitId":"ZiMing2983"},"content":"     * This method takes a string of arguments and extracts the event end date string","lastModifiedDate":"2023-11-13"},{"lineNumber":218,"author":{"gitId":"ZiMing2983"},"content":"     * by locating the \"to\" keyword and retrieving the substring following it. The extracted","lastModifiedDate":"2023-11-13"},{"lineNumber":219,"author":{"gitId":"ZiMing2983"},"content":"     * string is then trimmed to remove any leading or trailing whitespace. If the resulting","lastModifiedDate":"2023-11-13"},{"lineNumber":220,"author":{"gitId":"ZiMing2983"},"content":"     * string is empty, an exception is thrown to indicate an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":221,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-13"},{"lineNumber":222,"author":{"gitId":"ZiMing2983"},"content":"     * @param arguments The string containing the arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":223,"author":{"gitId":"ZiMing2983"},"content":"     * @return The extracted event end date string.","lastModifiedDate":"2023-11-13"},{"lineNumber":224,"author":{"gitId":"ZiMing2983"},"content":"     * @throws InvalidTaskFormatException If the event end date string is empty,","lastModifiedDate":"2023-11-13"},{"lineNumber":225,"author":{"gitId":"ZiMing2983"},"content":"     *                      indicating an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":226,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":227,"author":{"gitId":"ZiMing2983"},"content":"    static String extractEventToDateString(String arguments) throws DukeException {","lastModifiedDate":"2023-11-04"},{"lineNumber":228,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":229,"author":{"gitId":"ZiMing2983"},"content":"        int toindex \u003d extractEventToIndex(arguments);","lastModifiedDate":"2023-11-04"},{"lineNumber":230,"author":{"gitId":"ZiMing2983"},"content":"        String taskToDateString \u003d arguments.substring(toindex + TO_KEYWORD_LENGTH).trim();","lastModifiedDate":"2023-11-04"},{"lineNumber":231,"author":{"gitId":"ZiMing2983"},"content":"        if (taskToDateString.isEmpty()) {","lastModifiedDate":"2023-11-04"},{"lineNumber":232,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidTaskFormatException(CommandValidator.EVENT_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":233,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":234,"author":{"gitId":"ZiMing2983"},"content":"        return taskToDateString;","lastModifiedDate":"2023-11-04"},{"lineNumber":235,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":236,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":237,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":238,"author":{"gitId":"ZiMing2983"},"content":"     * Extracts the index of the \"/by\" keyword from the provided arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":239,"author":{"gitId":"ZiMing2983"},"content":"     * This method searches for the position of the \"/by\" keyword within the given string","lastModifiedDate":"2023-11-13"},{"lineNumber":240,"author":{"gitId":"ZiMing2983"},"content":"     * of arguments. If the keyword is found, the method returns its starting index. If not","lastModifiedDate":"2023-11-13"},{"lineNumber":241,"author":{"gitId":"ZiMing2983"},"content":"     * found, an exception is thrown to indicate an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":242,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-13"},{"lineNumber":243,"author":{"gitId":"ZiMing2983"},"content":"     * @param arguments The string containing the arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":244,"author":{"gitId":"ZiMing2983"},"content":"     * @return The index of the \"/by\" keyword in the arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":245,"author":{"gitId":"ZiMing2983"},"content":"     * @throws InvalidTaskFormatException If the \"/by\" keyword is not found,","lastModifiedDate":"2023-11-13"},{"lineNumber":246,"author":{"gitId":"ZiMing2983"},"content":"     *                      indicating an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":247,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":248,"author":{"gitId":"ZiMing2983"},"content":"    static int extractDeadlineByIndex(String arguments) throws DukeException {","lastModifiedDate":"2023-11-04"},{"lineNumber":249,"author":{"gitId":"ZiMing2983"},"content":"        int byIndex \u003d arguments.indexOf(\"/by\");","lastModifiedDate":"2023-11-04"},{"lineNumber":250,"author":{"gitId":"ZiMing2983"},"content":"        if (byIndex \u003d\u003d -1) {","lastModifiedDate":"2023-11-04"},{"lineNumber":251,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidTaskFormatException(CommandValidator.DEADLINE_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":252,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":253,"author":{"gitId":"ZiMing2983"},"content":"        return byIndex;","lastModifiedDate":"2023-11-04"},{"lineNumber":254,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":255,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":256,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":257,"author":{"gitId":"ZiMing2983"},"content":"     * Extracts the index of the \"/from\" keyword from the provided arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":258,"author":{"gitId":"ZiMing2983"},"content":"     * This method searches for the position of the \"/from\" keyword within the given string","lastModifiedDate":"2023-11-13"},{"lineNumber":259,"author":{"gitId":"ZiMing2983"},"content":"     * of arguments. If the keyword is found, the method returns its starting index. If not","lastModifiedDate":"2023-11-13"},{"lineNumber":260,"author":{"gitId":"ZiMing2983"},"content":"     * found, an exception is thrown to indicate an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":261,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-13"},{"lineNumber":262,"author":{"gitId":"ZiMing2983"},"content":"     * @param arguments The string containing the arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":263,"author":{"gitId":"ZiMing2983"},"content":"     * @return The index of the \"/from\" keyword in the arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":264,"author":{"gitId":"ZiMing2983"},"content":"     * @throws InvalidTaskFormatException If the \"/from\" keyword is not found,","lastModifiedDate":"2023-11-13"},{"lineNumber":265,"author":{"gitId":"ZiMing2983"},"content":"     *                      indicating an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":266,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":267,"author":{"gitId":"ZiMing2983"},"content":"    static int extractEventFromIndex(String arguments) throws DukeException {","lastModifiedDate":"2023-11-04"},{"lineNumber":268,"author":{"gitId":"ZiMing2983"},"content":"        int fromIndex \u003d arguments.indexOf(\"/from\");","lastModifiedDate":"2023-11-04"},{"lineNumber":269,"author":{"gitId":"ZiMing2983"},"content":"        if (fromIndex \u003d\u003d -1) {","lastModifiedDate":"2023-11-04"},{"lineNumber":270,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidTaskFormatException(CommandValidator.EVENT_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":271,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":272,"author":{"gitId":"ZiMing2983"},"content":"        return fromIndex;","lastModifiedDate":"2023-11-04"},{"lineNumber":273,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":274,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":275,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":276,"author":{"gitId":"ZiMing2983"},"content":"     * Extracts the index of the \"/to\" keyword from the provided arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":277,"author":{"gitId":"ZiMing2983"},"content":"     * This method searches for the position of the \"/to\" keyword within the given string","lastModifiedDate":"2023-11-13"},{"lineNumber":278,"author":{"gitId":"ZiMing2983"},"content":"     * of arguments. If the keyword is found, the method returns its starting index. If not","lastModifiedDate":"2023-11-13"},{"lineNumber":279,"author":{"gitId":"ZiMing2983"},"content":"     * found, an exception is thrown to indicate an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":280,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-13"},{"lineNumber":281,"author":{"gitId":"ZiMing2983"},"content":"     * @param arguments The string containing the arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":282,"author":{"gitId":"ZiMing2983"},"content":"     * @return The index of the \"/to\" keyword in the arguments.","lastModifiedDate":"2023-11-13"},{"lineNumber":283,"author":{"gitId":"ZiMing2983"},"content":"     * @throws InvalidTaskFormatException If the \"/to\" keyword is not found,","lastModifiedDate":"2023-11-13"},{"lineNumber":284,"author":{"gitId":"ZiMing2983"},"content":"     *                      indicating an invalid task format.","lastModifiedDate":"2023-11-13"},{"lineNumber":285,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":286,"author":{"gitId":"ZiMing2983"},"content":"    static int extractEventToIndex(String arguments) throws DukeException {","lastModifiedDate":"2023-11-04"},{"lineNumber":287,"author":{"gitId":"ZiMing2983"},"content":"        int toIndex \u003d arguments.indexOf(\"/to\");","lastModifiedDate":"2023-11-04"},{"lineNumber":288,"author":{"gitId":"ZiMing2983"},"content":"        if (toIndex \u003d\u003d -1) {","lastModifiedDate":"2023-11-04"},{"lineNumber":289,"author":{"gitId":"ZiMing2983"},"content":"            throw new InvalidTaskFormatException(CommandValidator.EVENT_COMMAND);","lastModifiedDate":"2023-11-13"},{"lineNumber":290,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":291,"author":{"gitId":"ZiMing2983"},"content":"        return toIndex;","lastModifiedDate":"2023-11-04"},{"lineNumber":292,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":293,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":294,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":295,"author":{"gitId":"ZiMing2983"},"content":"     * Parse the user\u0027s input into commands and parameters for execution.","lastModifiedDate":"2023-11-04"},{"lineNumber":296,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":297,"author":{"gitId":"ZiMing2983"},"content":"     * @param fileStorage The file storage to manage tasks.","lastModifiedDate":"2023-11-04"},{"lineNumber":298,"author":{"gitId":"ZiMing2983"},"content":"     * @param display     The message display for showing output.","lastModifiedDate":"2023-11-04"},{"lineNumber":299,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskList    The list of tasks to operate on.","lastModifiedDate":"2023-11-04"},{"lineNumber":300,"author":{"gitId":"ZiMing2983"},"content":"     * @param userInput   The user\u0027s input string of commands.","lastModifiedDate":"2023-11-04"},{"lineNumber":301,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":302,"author":{"gitId":"ZiMing2983"},"content":"    public void parseUserInput(FileStorage fileStorage, MessageDisplay display, List\u003cTask\u003e taskList,","lastModifiedDate":"2023-11-05"},{"lineNumber":303,"author":{"gitId":"ZiMing2983"},"content":"                               String userInput) {","lastModifiedDate":"2023-11-05"},{"lineNumber":304,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":305,"author":{"gitId":"ZiMing2983"},"content":"        try {","lastModifiedDate":"2023-11-04"},{"lineNumber":306,"author":{"gitId":"ZiMing2983"},"content":"            String[] inputs \u003d userInput.split(\"\\\\s+\");","lastModifiedDate":"2023-11-04"},{"lineNumber":307,"author":{"gitId":"ZiMing2983"},"content":"            if (inputs.length \u003d\u003d 0 || userInput.isEmpty()) {","lastModifiedDate":"2023-11-04"},{"lineNumber":308,"author":{"gitId":"ZiMing2983"},"content":"                throw new EmptyCommandException();","lastModifiedDate":"2023-11-04"},{"lineNumber":309,"author":{"gitId":"ZiMing2983"},"content":"            }","lastModifiedDate":"2023-11-04"},{"lineNumber":310,"author":{"gitId":"ZiMing2983"},"content":"            String command \u003d inputs[0];","lastModifiedDate":"2023-11-04"},{"lineNumber":311,"author":{"gitId":"ZiMing2983"},"content":"            commandValidator.executeCommand(fileStorage, display, taskList, command, userInput);","lastModifiedDate":"2023-11-13"},{"lineNumber":312,"author":{"gitId":"ZiMing2983"},"content":"        } catch (InvalidNumberFormatException e) {","lastModifiedDate":"2023-11-04"},{"lineNumber":313,"author":{"gitId":"ZiMing2983"},"content":"            // Handle the case where the task is not found by index","lastModifiedDate":"2023-11-04"},{"lineNumber":314,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"%s\\n\", e.getMessage());","lastModifiedDate":"2023-11-04"},{"lineNumber":315,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":316,"author":{"gitId":"ZiMing2983"},"content":"        } catch (DateTimeParseException | ChangeTodoDateException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":317,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"%s\\n\", e.getMessage());","lastModifiedDate":"2023-11-04"},{"lineNumber":318,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":319,"author":{"gitId":"ZiMing2983"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-11-04"},{"lineNumber":320,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"%s\\n\", e.getMessage());","lastModifiedDate":"2023-11-04"},{"lineNumber":321,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":322,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":323,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":324,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":325,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":325}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.task;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.DueDatePastDateException;","lastModifiedDate":"2023-11-18"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `DeadlineTask` class that extends `Task` and represents a task with a deadline.","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    private LocalDateTime taskDueDate;","lastModifiedDate":"2023-11-04"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `DeadlineTask` with the specified task name and due date.","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName    The name of the deadline task.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskDueDate The due date and time of the deadline task.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"    public DeadlineTask(String taskName, LocalDateTime taskDueDate) {","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"        super(\u0027D\u0027, taskName);","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"        this.taskDueDate \u003d taskDueDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `DeadlineTask` with the specified task name, completion status, and due date.","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName    The name of the deadline task.","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"     * @param completed   `true` if the task is completed, `false` otherwise.","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskDueDate The due date and time of the deadline task.","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"    public DeadlineTask(String taskName, boolean completed, LocalDateTime taskDueDate) {","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"        super(\u0027D\u0027, taskName, completed);","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        this.taskDueDate \u003d taskDueDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"     * Gets the formatted due date of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"     * @return The due date of the task as a formatted string.","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    String getTaskDueDateString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"        return dateTimetoString(taskDueDate);","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"     * Gets the due date of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"     * @return The due date of the task as a LocalDate object.","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"    public LocalDate getTaskDueDate() {","lastModifiedDate":"2023-11-04"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        return taskDueDate.toLocalDate();","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"     * Change the end date of the task.","lastModifiedDate":"2023-11-04"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskDueDate The new end date for the task.","lastModifiedDate":"2023-11-04"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-11-04"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"    public void changeEndDate(LocalDateTime taskDueDate) throws DueDatePastDateException {","lastModifiedDate":"2023-11-18"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"        if (taskDueDate.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2023-11-05"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"            throw new DueDatePastDateException();","lastModifiedDate":"2023-11-18"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-05"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"        this.taskDueDate \u003d taskDueDate;","lastModifiedDate":"2023-11-04"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"     * Get the end date of the task.","lastModifiedDate":"2023-11-04"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"     * @return The end date of the task as a LocalDateTime object.","lastModifiedDate":"2023-11-04"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-11-04"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"    public LocalDateTime getTaskEndDate() {","lastModifiedDate":"2023-11-04"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"        return taskDueDate;","lastModifiedDate":"2023-11-04"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"     * Checks if a given date matches the due date of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"     * @param checkedDate The date to be checked.","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"     * @return `true` if the checked date matches the due date of the task, `false` otherwise.","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"    public boolean checkDate(LocalDate checkedDate) {","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":94,"author":{"gitId":"ZiMing2983"},"content":"        return checkedDate.equals(getTaskDueDate());","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":96,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"ZiMing2983"},"content":"     * Converts the `DeadlineTask` to a string for display.","lastModifiedDate":"2023-10-24"},{"lineNumber":99,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"ZiMing2983"},"content":"     * @return A string representation of the `DeadlineTask`.","lastModifiedDate":"2023-10-24"},{"lineNumber":101,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":103,"author":{"gitId":"ZiMing2983"},"content":"    public String toString() {","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":105,"author":{"gitId":"ZiMing2983"},"content":"        return super.toString() + String.format(\" (by: %s)\", getTaskDueDateString());","lastModifiedDate":"2023-10-24"},{"lineNumber":106,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":107,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":108,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"ZiMing2983"},"content":"     * Converts the `DeadlineTask` to a string for saving to Duke Data File.","lastModifiedDate":"2023-10-24"},{"lineNumber":110,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":111,"author":{"gitId":"ZiMing2983"},"content":"     * @return A string representation of the `DeadlineTask` for saving to Duke Data File.","lastModifiedDate":"2023-10-24"},{"lineNumber":112,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":113,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":114,"author":{"gitId":"ZiMing2983"},"content":"    public String toFile() {","lastModifiedDate":"2023-10-24"},{"lineNumber":115,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":116,"author":{"gitId":"ZiMing2983"},"content":"        return super.toFile() + \" | \" + taskDueDate.toString().replace(\"T\", \" \");","lastModifiedDate":"2023-10-30"},{"lineNumber":117,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":118,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":119,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":119}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.task;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.EventDateException;","lastModifiedDate":"2023-11-05"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":" * Represents an `EventTask` class that extends `Task` and represents a task with an event.","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"public class EventTask extends Task {","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    private final LocalDateTime taskFrom;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"    private LocalDateTime taskTo;","lastModifiedDate":"2023-11-04"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs an `EventTask` with the specified task name, start date, and end date.","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName The name of the event task.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskFrom The start date and time of the event task.","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskTo   The end date and time of the event task.","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    public EventTask(String taskName, LocalDateTime taskFrom, LocalDateTime taskTo) {","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"        super(\u0027E\u0027, taskName);","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"        this.taskFrom \u003d taskFrom;","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"        this.taskTo \u003d taskTo;","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs an `EventTask` with the specified task name,","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"     * completion status, start date, and end date.","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName  The name of the event task.","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"     * @param completed `true` if the task is completed, `false` otherwise.","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskFrom  The start date and time of the event task.","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskTo    The end date and time of the event task.","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    public EventTask(String taskName, boolean completed, LocalDateTime taskFrom,","lastModifiedDate":"2023-11-05"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"                     LocalDateTime taskTo) {","lastModifiedDate":"2023-11-05"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"        super(\u0027E\u0027, taskName, completed);","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        this.taskFrom \u003d taskFrom;","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"        this.taskTo \u003d taskTo;","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"     * Gets the formatted start date and time of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"     * @return The start date and time of the task as a formatted string.","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"    String getTaskFromString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        return dateTimetoString(taskFrom);","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"     * Gets the formatted end date and time of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"     * @return The end date and time of the task as a formatted string.","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"    String getTaskToString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"        return dateTimetoString(taskTo);","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"     * Gets the start date of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"     * @return The start date of the task as a LocalDate object.","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"    private LocalDate getTaskFromDate() {","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"        return taskFrom.toLocalDate();","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"     * Gets the end date of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"     * @return The end date of the task as a LocalDate object.","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"    private LocalDate getTaskToDate() {","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"        return taskTo.toLocalDate();","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"     * Get the end date of the task.","lastModifiedDate":"2023-11-04"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"     * @return The end date of the task as a LocalDateTime object.","lastModifiedDate":"2023-11-04"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-11-04"},{"lineNumber":93,"author":{"gitId":"ZiMing2983"},"content":"    public LocalDateTime getTaskEndDate() {","lastModifiedDate":"2023-11-04"},{"lineNumber":94,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":95,"author":{"gitId":"ZiMing2983"},"content":"        return taskTo;","lastModifiedDate":"2023-11-04"},{"lineNumber":96,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":97,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":98,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":99,"author":{"gitId":"ZiMing2983"},"content":"     * Change the end date of the task.","lastModifiedDate":"2023-11-04"},{"lineNumber":100,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":101,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskDueDate The new end date for the task.","lastModifiedDate":"2023-11-04"},{"lineNumber":102,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":103,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-11-04"},{"lineNumber":104,"author":{"gitId":"ZiMing2983"},"content":"    public void changeEndDate(LocalDateTime taskDueDate) throws EventDateException {","lastModifiedDate":"2023-11-04"},{"lineNumber":105,"author":{"gitId":"ZiMing2983"},"content":"        if (taskDueDate.isBefore(taskFrom)) {","lastModifiedDate":"2023-11-18"},{"lineNumber":106,"author":{"gitId":"ZiMing2983"},"content":"            throw new EventDateException();","lastModifiedDate":"2023-11-05"},{"lineNumber":107,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-05"},{"lineNumber":108,"author":{"gitId":"ZiMing2983"},"content":"        this.taskTo \u003d taskDueDate;","lastModifiedDate":"2023-11-04"},{"lineNumber":109,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":110,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":111,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":112,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":113,"author":{"gitId":"ZiMing2983"},"content":"     * Checks if a given date matches either the start date or the end date of the task.","lastModifiedDate":"2023-11-05"},{"lineNumber":114,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":115,"author":{"gitId":"ZiMing2983"},"content":"     * @param checkedDate The date to check against the task\u0027s start and end dates.","lastModifiedDate":"2023-11-05"},{"lineNumber":116,"author":{"gitId":"ZiMing2983"},"content":"     * @return true if the checked date matches either the start date or the end date of the task.","lastModifiedDate":"2023-11-05"},{"lineNumber":117,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":118,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":119,"author":{"gitId":"ZiMing2983"},"content":"    public boolean checkDate(LocalDate checkedDate) {","lastModifiedDate":"2023-10-24"},{"lineNumber":120,"author":{"gitId":"ZiMing2983"},"content":"        return checkedDate.equals(getTaskFromDate()) || checkedDate.equals(getTaskToDate());","lastModifiedDate":"2023-10-24"},{"lineNumber":121,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":122,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":123,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":124,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":125,"author":{"gitId":"ZiMing2983"},"content":"     * Converts the `EventTask` to a string for display.","lastModifiedDate":"2023-10-24"},{"lineNumber":126,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":127,"author":{"gitId":"ZiMing2983"},"content":"     * @return A string representation of the `EventTask`.","lastModifiedDate":"2023-10-24"},{"lineNumber":128,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":129,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":130,"author":{"gitId":"ZiMing2983"},"content":"    public String toString() {","lastModifiedDate":"2023-10-24"},{"lineNumber":131,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":132,"author":{"gitId":"ZiMing2983"},"content":"        return super.toString()","lastModifiedDate":"2023-11-05"},{"lineNumber":133,"author":{"gitId":"ZiMing2983"},"content":"                + String.format(\" (from: %s to: %s)\", getTaskFromString(), getTaskToString());","lastModifiedDate":"2023-11-05"},{"lineNumber":134,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":135,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":136,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":137,"author":{"gitId":"ZiMing2983"},"content":"     * Converts the `EventTask` to a string for saving to Duke Data File.","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":139,"author":{"gitId":"ZiMing2983"},"content":"     * @return A string representation of the `EventTask` for saving to Duke Data File.","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":141,"author":{"gitId":"ZiMing2983"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"ZiMing2983"},"content":"    public String toFile() {","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":144,"author":{"gitId":"ZiMing2983"},"content":"        return super.toFile() + \" | \" + taskFrom.toString().replace(\"T\", \" \") + \" | \"","lastModifiedDate":"2023-11-05"},{"lineNumber":145,"author":{"gitId":"ZiMing2983"},"content":"                + taskTo.toString().replace(\"T\", \" \");","lastModifiedDate":"2023-11-05"},{"lineNumber":146,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":148,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":148}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.task;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.DueDatePastDateException;","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.EventDateException;","lastModifiedDate":"2023-11-05"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":" * Represents an abstract `Task` class for tasks in Duke.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"public abstract class Task {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"    private final String taskName;","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    private final Character taskType;","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    private boolean completed;","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `Task` with the specified task type and name, initializing it as not completed.","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskType The type of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName The name of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    public Task(Character taskType, String taskName) {","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"        this.completed \u003d false;","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `Task` with the specified task type, name, and completion status.","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskType    The type of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName    The name of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"     * @param isCompleted `true` if the task is completed, `false` otherwise.","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    public Task(Character taskType, String taskName, boolean isCompleted) {","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        this.completed \u003d isCompleted;","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"     * Marks the task as completed.","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"    public void markAsCompleted() {","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"        this.completed \u003d true;","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"     * Marks the task as not completed.","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"    public void markAsNotCompleted() {","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        this.completed \u003d false;","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"     * Gets the name of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"     * @return The name of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"    public String getTaskName() {","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"        return taskName;","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"     * Gets the type of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"     * @return The type of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"    public Character getTaskType() {","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"        return taskType;","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"     * Checks if the task is completed.","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"     * @return `true` if the task is completed, `false` otherwise.","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"        return completed;","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":93,"author":{"gitId":"ZiMing2983"},"content":"     * Checks if the task matches a specific date.","lastModifiedDate":"2023-10-30"},{"lineNumber":94,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-30"},{"lineNumber":95,"author":{"gitId":"ZiMing2983"},"content":"     * @param checkedDate The date to compare with the task\u0027s date (if applicable).","lastModifiedDate":"2023-10-30"},{"lineNumber":96,"author":{"gitId":"ZiMing2983"},"content":"     * @return `true` if the task matches the date, `false` otherwise.","lastModifiedDate":"2023-10-30"},{"lineNumber":97,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":98,"author":{"gitId":"ZiMing2983"},"content":"    public boolean checkDate(LocalDate checkedDate) {","lastModifiedDate":"2023-10-24"},{"lineNumber":99,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":100,"author":{"gitId":"ZiMing2983"},"content":"        return false; // Override this method in subclasses if the task has a date.","lastModifiedDate":"2023-10-30"},{"lineNumber":101,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":103,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":104,"author":{"gitId":"ZiMing2983"},"content":"     * This method allows you to change the end date of a task.","lastModifiedDate":"2023-11-04"},{"lineNumber":105,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":106,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskDueDate The new end date for the task.","lastModifiedDate":"2023-11-04"},{"lineNumber":107,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":108,"author":{"gitId":"ZiMing2983"},"content":"    public void changeEndDate(LocalDateTime taskDueDate)","lastModifiedDate":"2023-11-05"},{"lineNumber":109,"author":{"gitId":"ZiMing2983"},"content":"            throws DueDatePastDateException, EventDateException {","lastModifiedDate":"2023-11-18"},{"lineNumber":110,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":111,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":112,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":113,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":114,"author":{"gitId":"ZiMing2983"},"content":"     * Get the end date of the task.","lastModifiedDate":"2023-11-04"},{"lineNumber":115,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":116,"author":{"gitId":"ZiMing2983"},"content":"     * @return The end date of the task as a LocalDateTime object.","lastModifiedDate":"2023-11-04"},{"lineNumber":117,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":118,"author":{"gitId":"ZiMing2983"},"content":"    public LocalDateTime getTaskEndDate() {","lastModifiedDate":"2023-11-04"},{"lineNumber":119,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":120,"author":{"gitId":"ZiMing2983"},"content":"        return LocalDateTime.now();","lastModifiedDate":"2023-11-04"},{"lineNumber":121,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-04"},{"lineNumber":122,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":123,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":124,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":125,"author":{"gitId":"ZiMing2983"},"content":"     * Converts the `Task` to a string for display.","lastModifiedDate":"2023-10-24"},{"lineNumber":126,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":127,"author":{"gitId":"ZiMing2983"},"content":"     * @return A string representation of the `Task`.","lastModifiedDate":"2023-10-24"},{"lineNumber":128,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":129,"author":{"gitId":"ZiMing2983"},"content":"    public String toString() {","lastModifiedDate":"2023-10-24"},{"lineNumber":130,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":131,"author":{"gitId":"ZiMing2983"},"content":"        String taskName \u003d getTaskName();","lastModifiedDate":"2023-10-24"},{"lineNumber":132,"author":{"gitId":"ZiMing2983"},"content":"        Character taskType \u003d getTaskType();","lastModifiedDate":"2023-10-24"},{"lineNumber":133,"author":{"gitId":"ZiMing2983"},"content":"        char taskComplete \u003d isCompleted() ? \u0027X\u0027 : \u0027 \u0027;","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"ZiMing2983"},"content":"        return \"[\" + taskType + \"]\" + \"[\" + taskComplete + \"] \" + taskName;","lastModifiedDate":"2023-10-24"},{"lineNumber":135,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":136,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":137,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"ZiMing2983"},"content":"     * Converts the date and time to a formatted string.","lastModifiedDate":"2023-10-24"},{"lineNumber":139,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"ZiMing2983"},"content":"     * @param dateTime The date and time to format.","lastModifiedDate":"2023-10-24"},{"lineNumber":141,"author":{"gitId":"ZiMing2983"},"content":"     * @return The formatted date and time as a string.","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"ZiMing2983"},"content":"    public String dateTimetoString(LocalDateTime dateTime) {","lastModifiedDate":"2023-10-24"},{"lineNumber":144,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":145,"author":{"gitId":"ZiMing2983"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"E dd MMM yyyy HH:mm\");","lastModifiedDate":"2023-10-30"},{"lineNumber":146,"author":{"gitId":"ZiMing2983"},"content":"        return dateTime.format(formatter);","lastModifiedDate":"2023-10-30"},{"lineNumber":147,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":148,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":149,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":150,"author":{"gitId":"ZiMing2983"},"content":"     * Converts the `Task` to a string for saving to a file.","lastModifiedDate":"2023-10-24"},{"lineNumber":151,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":152,"author":{"gitId":"ZiMing2983"},"content":"     * @return A string representation of the `Task` for saving to a file.","lastModifiedDate":"2023-10-24"},{"lineNumber":153,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"ZiMing2983"},"content":"    public String toFile() {","lastModifiedDate":"2023-10-24"},{"lineNumber":155,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":156,"author":{"gitId":"ZiMing2983"},"content":"        String taskName \u003d getTaskName();","lastModifiedDate":"2023-10-24"},{"lineNumber":157,"author":{"gitId":"ZiMing2983"},"content":"        Character taskType \u003d getTaskType();","lastModifiedDate":"2023-10-24"},{"lineNumber":158,"author":{"gitId":"ZiMing2983"},"content":"        int taskComplete \u003d isCompleted() ? 1 : 0;","lastModifiedDate":"2023-10-24"},{"lineNumber":159,"author":{"gitId":"ZiMing2983"},"content":"        return taskType + \" | \" + taskComplete + \" | \" + taskName;","lastModifiedDate":"2023-10-24"},{"lineNumber":160,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":161,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":162,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":162}},{"path":"src/main/java/duke/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.task;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":" * Represents a `TodoTask` class for tasks in Duke.","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"public class TodoTask extends Task {","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `TodoTask` with the specified task name, initializing it as not completed.","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName The name of the todo task.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    public TodoTask(String taskName) {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"        super(\u0027T\u0027, taskName);","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     * Constructs a `TodoTask` with the specified task name and completion status.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"     * @param taskName  The name of the todo task.","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"     * @param completed `true` if the todo task is completed, `false` otherwise.","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    public TodoTask(String taskName, boolean completed) {","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"        super(\u0027T\u0027, taskName, completed);","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":29}},{"path":"src/main/java/duke/userinterface/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.userinterface;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":" * Represents the user interface for the Duke application.","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"public class UserInterface {","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    private final UserInterface.UserInput userInput;","lastModifiedDate":"2023-11-17"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"    private final UserInterface.MessageDisplay messageDisplay;","lastModifiedDate":"2023-11-17"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     * The UserInterface class represents the user interface of the Duke application.","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * It provides components for user input and message display.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"    public UserInterface() {","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"        userInput \u003d new UserInterface.UserInput();","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"        messageDisplay \u003d new UserInterface.MessageDisplay();","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    public UserInput getUserInput() {","lastModifiedDate":"2023-11-05"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"        return userInput;","lastModifiedDate":"2023-11-05"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-05"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    public MessageDisplay getMessageDisplay() {","lastModifiedDate":"2023-11-05"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"        return messageDisplay;","lastModifiedDate":"2023-11-05"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-05"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"     * Represents the user input part of the user interface.","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    public static class UserInput {","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        private final Scanner scanner;","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"        private UserInput() {","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"            scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"         * Get user input from the console.","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"         *","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"         * @return The user\u0027s input as a String.","lastModifiedDate":"2023-11-04"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"        public String getLine() {","lastModifiedDate":"2023-11-05"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"            return scanner.nextLine().trim().toLowerCase();","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"         * Close the underlying scanner when done.","lastModifiedDate":"2023-11-04"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        public void closeScanner() {","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"            scanner.close();","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"     * Represents the message display part of the user interface.","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"    public static class MessageDisplay {","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"        public static final String LINE_BREAK \u003d \"********************************************\";","lastModifiedDate":"2023-11-17"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"        private static final String LOGO \u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"                \"███████╗ ██████╗ ██████╗ ██╗  ██╗ ██████╗ ███╗   ██╗\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"                + \"██╔════╝██╔═══██╗██╔══██╗██║  ██║██╔═══██╗████╗  ██║\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"                + \"███████╗██║   ██║██████╔╝███████║██║   ██║██╔██╗ ██║\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"                + \"╚════██║██║   ██║██╔═══╝ ██╔══██║██║   ██║██║╚██╗██║\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"                + \"███████║╚██████╔╝██║     ██║  ██║╚██████╔╝██║ ╚████║\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"                + \"╚══════╝ ╚═════╝ ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝\" + System.lineSeparator();","lastModifiedDate":"2023-11-17"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-11-04"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"         * Prints a line break using a predefined LINE_BREAK constant.","lastModifiedDate":"2023-11-04"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-11-04"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"        public static void printLineBreak() {","lastModifiedDate":"2023-11-04"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println(LINE_BREAK);","lastModifiedDate":"2023-11-04"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"         * Displays a message when a task is added.","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"         *","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"         * @param taskList The list of user tasks.","lastModifiedDate":"2023-11-04"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"        public void addedMessage(List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-10-30"},{"lineNumber":93,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"ZiMing2983"},"content":"                    + \"   %s\\nNow you have %d tasks in the list.\\n%s%n\",","lastModifiedDate":"2023-10-24"},{"lineNumber":96,"author":{"gitId":"ZiMing2983"},"content":"                taskList.get(taskList.size() - 1).toString(), taskList.size(), LINE_BREAK);","lastModifiedDate":"2023-10-30"},{"lineNumber":97,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":99,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"ZiMing2983"},"content":"         * Displays a message when attempting to mark a task that is already marked as completed.","lastModifiedDate":"2023-10-24"},{"lineNumber":101,"author":{"gitId":"ZiMing2983"},"content":"         *","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"ZiMing2983"},"content":"         * @param taskName The name of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":103,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"ZiMing2983"},"content":"        public void alreadyMark(String taskName) {","lastModifiedDate":"2023-10-29"},{"lineNumber":105,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":106,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println(taskName + \" is already marked!\");","lastModifiedDate":"2023-11-04"},{"lineNumber":107,"author":{"gitId":"ZiMing2983"},"content":"            printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":108,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":110,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-10-24"},{"lineNumber":111,"author":{"gitId":"ZiMing2983"},"content":"         * Displays a message when attempting to unmark a task that is not marked as completed.","lastModifiedDate":"2023-10-24"},{"lineNumber":112,"author":{"gitId":"ZiMing2983"},"content":"         *","lastModifiedDate":"2023-10-24"},{"lineNumber":113,"author":{"gitId":"ZiMing2983"},"content":"         * @param taskName The name of the task.","lastModifiedDate":"2023-10-24"},{"lineNumber":114,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-10-24"},{"lineNumber":115,"author":{"gitId":"ZiMing2983"},"content":"        public void notMark(String taskName) {","lastModifiedDate":"2023-10-29"},{"lineNumber":116,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":117,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println(\"You did not complete \" + taskName + \" before!\");","lastModifiedDate":"2023-11-04"},{"lineNumber":118,"author":{"gitId":"ZiMing2983"},"content":"            printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":119,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":120,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":121,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-10-24"},{"lineNumber":122,"author":{"gitId":"ZiMing2983"},"content":"         * Displays a message when a task is marked as completed.","lastModifiedDate":"2023-10-24"},{"lineNumber":123,"author":{"gitId":"ZiMing2983"},"content":"         *","lastModifiedDate":"2023-10-24"},{"lineNumber":124,"author":{"gitId":"ZiMing2983"},"content":"         * @param taskList   The list of user tasks.","lastModifiedDate":"2023-11-04"},{"lineNumber":125,"author":{"gitId":"ZiMing2983"},"content":"         * @param itemNumber The index of the completed task.","lastModifiedDate":"2023-10-24"},{"lineNumber":126,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-10-24"},{"lineNumber":127,"author":{"gitId":"ZiMing2983"},"content":"        public void completeMessage(List\u003cTask\u003e taskList, int itemNumber) {","lastModifiedDate":"2023-11-04"},{"lineNumber":128,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":129,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"That\u0027s some progress! I\u0027ve marked this task as done:\\n   %s\\n\",","lastModifiedDate":"2023-11-04"},{"lineNumber":130,"author":{"gitId":"ZiMing2983"},"content":"                taskList.get(itemNumber).toString());","lastModifiedDate":"2023-11-04"},{"lineNumber":131,"author":{"gitId":"ZiMing2983"},"content":"            printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":132,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":133,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-10-24"},{"lineNumber":135,"author":{"gitId":"ZiMing2983"},"content":"         * Displays a message when a task is unmarked.","lastModifiedDate":"2023-10-24"},{"lineNumber":136,"author":{"gitId":"ZiMing2983"},"content":"         *","lastModifiedDate":"2023-10-24"},{"lineNumber":137,"author":{"gitId":"ZiMing2983"},"content":"         * @param taskList   The list of user tasks.","lastModifiedDate":"2023-11-04"},{"lineNumber":138,"author":{"gitId":"ZiMing2983"},"content":"         * @param itemNumber The index of the unmarked task.","lastModifiedDate":"2023-10-24"},{"lineNumber":139,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"ZiMing2983"},"content":"        public void unCompleteMessage(List\u003cTask\u003e taskList, int itemNumber) {","lastModifiedDate":"2023-11-04"},{"lineNumber":141,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"Okay, you can do it at a later time:\\n   %s\\n%s\\n\",","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"ZiMing2983"},"content":"                taskList.get(itemNumber).toString(), LINE_BREAK);","lastModifiedDate":"2023-11-04"},{"lineNumber":144,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":145,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"ZiMing2983"},"content":"         * Displays a message when a task is deleted.","lastModifiedDate":"2023-10-24"},{"lineNumber":148,"author":{"gitId":"ZiMing2983"},"content":"         *","lastModifiedDate":"2023-10-24"},{"lineNumber":149,"author":{"gitId":"ZiMing2983"},"content":"         * @param taskList The list of user tasks.","lastModifiedDate":"2023-11-04"},{"lineNumber":150,"author":{"gitId":"ZiMing2983"},"content":"         * @param task     The deleted task.","lastModifiedDate":"2023-10-24"},{"lineNumber":151,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-10-24"},{"lineNumber":152,"author":{"gitId":"ZiMing2983"},"content":"        public void deleteMessage(List\u003cTask\u003e taskList, Task task) {","lastModifiedDate":"2023-10-30"},{"lineNumber":153,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"Noted. I\u0027ve removed this task:\\n   %s\\n\"","lastModifiedDate":"2023-10-24"},{"lineNumber":155,"author":{"gitId":"ZiMing2983"},"content":"                    + \"Now you have %s tasks in the list.\\n\",","lastModifiedDate":"2023-11-04"},{"lineNumber":156,"author":{"gitId":"ZiMing2983"},"content":"                task.toString(), taskList.size());","lastModifiedDate":"2023-11-04"},{"lineNumber":157,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":158,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":159,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":160,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-11-04"},{"lineNumber":161,"author":{"gitId":"ZiMing2983"},"content":"         * Displays a message when a task is snoozed.","lastModifiedDate":"2023-11-04"},{"lineNumber":162,"author":{"gitId":"ZiMing2983"},"content":"         *","lastModifiedDate":"2023-11-04"},{"lineNumber":163,"author":{"gitId":"ZiMing2983"},"content":"         * @param task The task being snoozed.","lastModifiedDate":"2023-11-04"},{"lineNumber":164,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-11-04"},{"lineNumber":165,"author":{"gitId":"ZiMing2983"},"content":"        public void rescheduleMessage(Task task) {","lastModifiedDate":"2023-11-04"},{"lineNumber":166,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":167,"author":{"gitId":"ZiMing2983"},"content":"            System.out.printf(\"Noted. I\u0027ve updated the due date of this task:\\n   %s\\n\",","lastModifiedDate":"2023-11-04"},{"lineNumber":168,"author":{"gitId":"ZiMing2983"},"content":"                task.toString());","lastModifiedDate":"2023-11-04"},{"lineNumber":169,"author":{"gitId":"ZiMing2983"},"content":"            MessageDisplay.printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":170,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-04"},{"lineNumber":171,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":172,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":173,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-10-24"},{"lineNumber":174,"author":{"gitId":"ZiMing2983"},"content":"         * Displays a welcome message for existing user with the Duke LOGO.","lastModifiedDate":"2023-11-17"},{"lineNumber":175,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-10-24"},{"lineNumber":176,"author":{"gitId":"ZiMing2983"},"content":"        public void existingUserHello() {","lastModifiedDate":"2023-11-17"},{"lineNumber":177,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println(LOGO + \"Sophon here, Your personal Task assistant! \\nHow can I assist you today?\");","lastModifiedDate":"2023-11-17"},{"lineNumber":178,"author":{"gitId":"ZiMing2983"},"content":"            printLineBreak();","lastModifiedDate":"2023-11-17"},{"lineNumber":179,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-17"},{"lineNumber":180,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-11-17"},{"lineNumber":181,"author":{"gitId":"ZiMing2983"},"content":"         * Displays an informative guide for new user to help them understand what are the commands available.","lastModifiedDate":"2023-11-17"},{"lineNumber":182,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-11-17"},{"lineNumber":183,"author":{"gitId":"ZiMing2983"},"content":"        public void newUserHello() {","lastModifiedDate":"2023-11-17"},{"lineNumber":184,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-17"},{"lineNumber":185,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println(LOGO + \"Hello, I\u0027m Sophon. Your personal Task assistant.\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":186,"author":{"gitId":"ZiMing2983"},"content":"                + LINE_BREAK + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":187,"author":{"gitId":"ZiMing2983"},"content":"                 + \"It seems that you\u0027re here for the first time. Here are the list of the \"","lastModifiedDate":"2023-11-17"},{"lineNumber":188,"author":{"gitId":"ZiMing2983"},"content":"                 + \"command that can help you with your task management:\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":189,"author":{"gitId":"ZiMing2983"},"content":"                 + \"Todo        -\u003e To create a simple to-do task.\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":190,"author":{"gitId":"ZiMing2983"},"content":"                + \"Deadline    -\u003e To create a deadline task with a deadline.\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":191,"author":{"gitId":"ZiMing2983"},"content":"                + \"Event       -\u003e To create a event task that comes with a start and end date.\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":192,"author":{"gitId":"ZiMing2983"},"content":"                + \"Delete      -\u003e To delete a task from the list.\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":193,"author":{"gitId":"ZiMing2983"},"content":"                + \"Find        -\u003e To find a task from the list using a keyword.\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":194,"author":{"gitId":"ZiMing2983"},"content":"                + \"List        -\u003e To show all recorded tasks.\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":195,"author":{"gitId":"ZiMing2983"},"content":"                + \"Mark        -\u003e To mark a task as completed.\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":196,"author":{"gitId":"ZiMing2983"},"content":"                + \"Unmark      -\u003e To unmark a task as incomplete.\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":197,"author":{"gitId":"ZiMing2983"},"content":"                + \"On          -\u003e To check if any task is due on a certain deadline.\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":198,"author":{"gitId":"ZiMing2983"},"content":"                + \"Reschedule  -\u003e To reschedule a task\u0027s deadline.\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":199,"author":{"gitId":"ZiMing2983"},"content":"                + \"You can also use \u0027help\u0027 to learn the command format.\"","lastModifiedDate":"2023-11-17"},{"lineNumber":200,"author":{"gitId":"ZiMing2983"},"content":"            );","lastModifiedDate":"2023-11-17"},{"lineNumber":201,"author":{"gitId":"ZiMing2983"},"content":"            printLineBreak();","lastModifiedDate":"2023-11-17"},{"lineNumber":202,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-11-17"},{"lineNumber":203,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-11-17"},{"lineNumber":204,"author":{"gitId":"ZiMing2983"},"content":"         * Displays an informative guide for new user to help them understand how to interact with Sophon.","lastModifiedDate":"2023-11-17"},{"lineNumber":205,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-11-17"},{"lineNumber":206,"author":{"gitId":"ZiMing2983"},"content":"        public static void helpUserOnCommand() {","lastModifiedDate":"2023-11-17"},{"lineNumber":207,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-17"},{"lineNumber":208,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println( \"Here are the format of the commands:\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":209,"author":{"gitId":"ZiMing2983"},"content":"                + \"Todo        -\u003e \u003ctodo\u003e + \u003cTask Name\u003e\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":210,"author":{"gitId":"ZiMing2983"},"content":"                + \"Deadline    -\u003e \u003cdeadline\u003e + \u003ctask name\u003e + \u003c/by\u003e + \u003ctask due Date (yyyy-MM-dd HH:mm)\u003e\"","lastModifiedDate":"2023-11-17"},{"lineNumber":211,"author":{"gitId":"ZiMing2983"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":212,"author":{"gitId":"ZiMing2983"},"content":"                + \"Event       -\u003e \u003cevent\u003e + \u003ctask name\u003e + \u003c/from\u003e + \u003ctask start Date (yyyy-MM-dd HH:mm)\u003e \"","lastModifiedDate":"2023-11-17"},{"lineNumber":213,"author":{"gitId":"ZiMing2983"},"content":"                + \"+ \u003c/to\u003e + \u003ctask due Date (yyyy-MM-dd HH:mm)\u003e\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":214,"author":{"gitId":"ZiMing2983"},"content":"                + \"Delete      -\u003e \u003cdelete\u003e + \u003ctask index\u003e\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":215,"author":{"gitId":"ZiMing2983"},"content":"                + \"Find        -\u003e \u003cfind\u003e + \u003ckeyword in task name\u003e\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":216,"author":{"gitId":"ZiMing2983"},"content":"                + \"List        -\u003e \u003clist\u003e\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":217,"author":{"gitId":"ZiMing2983"},"content":"                + \"Mark        -\u003e \u003cmark\u003e + \u003ctask index\u003e\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":218,"author":{"gitId":"ZiMing2983"},"content":"                + \"Unmark      -\u003e \u003cunmark\u003e + \u003ctask index\u003e\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":219,"author":{"gitId":"ZiMing2983"},"content":"                + \"On          -\u003e \u003con\u003e + \u003ctask due Date (yyyy-MM-dd HH:mm)\u003e\" + System.lineSeparator()","lastModifiedDate":"2023-11-17"},{"lineNumber":220,"author":{"gitId":"ZiMing2983"},"content":"                + \"Reschedule  -\u003e \u003creschedule\u003e + \u003ctask index\u003e + \u003ctask due Date (yyyy-MM-dd HH:mm)\u003e\"","lastModifiedDate":"2023-11-17"},{"lineNumber":221,"author":{"gitId":"ZiMing2983"},"content":"            );","lastModifiedDate":"2023-11-17"},{"lineNumber":222,"author":{"gitId":"ZiMing2983"},"content":"            printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":223,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":224,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":225,"author":{"gitId":"ZiMing2983"},"content":"        /**","lastModifiedDate":"2023-10-24"},{"lineNumber":226,"author":{"gitId":"ZiMing2983"},"content":"         * Displays a goodbye message.","lastModifiedDate":"2023-10-24"},{"lineNumber":227,"author":{"gitId":"ZiMing2983"},"content":"         */","lastModifiedDate":"2023-10-24"},{"lineNumber":228,"author":{"gitId":"ZiMing2983"},"content":"        public void goodbye() {","lastModifiedDate":"2023-10-24"},{"lineNumber":229,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":230,"author":{"gitId":"ZiMing2983"},"content":"            System.out.println(\"Bye! Hope to see you again soon!\");","lastModifiedDate":"2023-11-04"},{"lineNumber":231,"author":{"gitId":"ZiMing2983"},"content":"            printLineBreak();","lastModifiedDate":"2023-11-04"},{"lineNumber":232,"author":{"gitId":"ZiMing2983"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":233,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":234,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":235,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":236,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"ZiMing2983":236}},{"path":"src/test/java/duke/command/AddDeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-05"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the AddDeadlineCommand class.","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"public class AddDeadlineCommandTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    private AddDeadlineCommand addDeadlineCommand;","lastModifiedDate":"2023-11-04"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Set up the test environment before each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    public void setUp() {","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        addDeadlineCommand \u003d new AddDeadlineCommand(\"Test Deadline\", LocalDateTime.now());","lastModifiedDate":"2023-11-04"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"     * Clear the test environment after each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    @AfterEach","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    public void tearDown() {","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        taskList.clear();","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"     * Test the addition of a DeadlineTask to the task list.","lastModifiedDate":"2023-11-04"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    public void testAddsDeadlineTaskToTaskList() {","lastModifiedDate":"2023-11-04"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"        addDeadlineCommand.execute(new FileStorage(), new MessageDisplay(), taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(taskList.get(0) instanceof DeadlineTask);","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"Test Deadline\", taskList.get(0).getTaskName());","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":59}},{"path":"src/test/java/duke/command/AddEventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-05"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the AddEventCommand class.","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"public class AddEventCommandTest {","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    private AddEventCommand addEventCommand;","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Set up the test environment before each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    public void setUp() {","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        addEventCommand \u003d","lastModifiedDate":"2023-11-05"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"            new AddEventCommand(\"Test Event\", LocalDateTime.now(), LocalDateTime.now().plusHours(2));","lastModifiedDate":"2023-11-05"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"     * Clear the test environment after each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    @AfterEach","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"    public void tearDown() {","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"        taskList.clear();","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"     * Test the addition of an EventTask to the task list.","lastModifiedDate":"2023-11-04"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"    public void testAddsEventTaskToTaskList() {","lastModifiedDate":"2023-11-04"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"        addEventCommand.execute(new FileStorage(), new MessageDisplay(), taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(taskList.get(0) instanceof EventTask);","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"Test Event\", taskList.get(0).getTaskName());","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"ZiMing2983":60}},{"path":"src/test/java/duke/command/AddTodoCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the AddTodoCommand class.","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"public class AddTodoCommandTest {","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    private AddTodoCommand addTodoCommand;","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     * Set up the test environment before each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    public void setUp() {","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        addTodoCommand \u003d new AddTodoCommand(\"Test Todo\");","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"     * Clear the test environment after each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    @AfterEach","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    public void tearDown() {","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"        taskList.clear();","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"     * Test the addition of a TodoTask to the task list.","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"    public void testAddsTodoTaskToTaskList() {","lastModifiedDate":"2023-11-04"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"        addTodoCommand.execute(new FileStorage(), new MessageDisplay(), taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(taskList.get(0) instanceof TodoTask);","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"Test Todo\", taskList.get(0).getTaskName());","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"ZiMing2983":57}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the DeleteCommand class.","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"    private DeleteCommand deleteCommand;","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     * Set up the test environment before each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    public void setUp() {","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"        deleteCommand \u003d new DeleteCommand(1);","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"     * Clear the test environment after each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    @AfterEach","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    public void tearDown() {","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"        taskList.clear();","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"     * Test deleting a task from the task list.","lastModifiedDate":"2023-11-04"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"    public void testDeleteTask() {","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"        Task task1 \u003d new TodoTask(\"Task 1\");","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"        Task task2 \u003d new TodoTask(\"Task 2\");","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(task1);","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(task2);","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"        int initialSize \u003d taskList.size();","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        deleteCommand.execute(new FileStorage(), new MessageDisplay(), taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(initialSize - 1, taskList.size());","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(task1.getTaskName(), taskList.get(0).getTaskName());","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"ZiMing2983":64}},{"path":"src/test/java/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-11-13"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-13"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-11-13"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-11-13"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-13"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-13"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-11-13"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-13"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-11-13"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-13"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"class FindCommandTest {","lastModifiedDate":"2023-11-13"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-11-13"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"    private ByteArrayOutputStream outputStream;","lastModifiedDate":"2023-11-13"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    private MessageDisplay display;","lastModifiedDate":"2023-11-13"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     * Set up the test environment before each test case.","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    public void setUp() {","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-13"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"        outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"        display \u003d new MessageDisplay();","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"     * Clear the task list after each test case.","lastModifiedDate":"2023-11-13"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    @AfterEach","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    public void tearDown() {","lastModifiedDate":"2023-11-13"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        taskList.clear();","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    void printListWithKeyword_emptyTaskList_shouldPrintNoTasksMessage() {","lastModifiedDate":"2023-11-13"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-11-13"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"        FindCommand findCommand \u003d new FindCommand(\"keyword\");","lastModifiedDate":"2023-11-13"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"        findCommand.printListWithKeyword(display, taskList);","lastModifiedDate":"2023-11-13"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2023-11-13"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"            \"There\u0027s nothing in your list\" + System.lineSeparator() + MessageDisplay.LINE_BREAK","lastModifiedDate":"2023-11-13"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-11-13"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-11-13"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-11-13"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"    void printListWithKeyword_matchingTasks_shouldPrintMatchingTasks() {","lastModifiedDate":"2023-11-13"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-11-13"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"        FindCommand findCommand \u003d new FindCommand(\"Task\");","lastModifiedDate":"2023-11-13"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new TodoTask(\"TaskOne\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new TodoTask(\"TaskTwo\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new TodoTask(\"AnotherTask\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"        findCommand.printListWithKeyword(display, taskList);","lastModifiedDate":"2023-11-13"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2023-11-13"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"            \"Here are the matching tasks in your list:\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"                + MessageDisplay.LINE_BREAK + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"                + \"1.[T][ ] TaskOne\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"                + \"2.[T][ ] TaskTwo\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"                + \"3.[T][ ] AnotherTask\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"                + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-13"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-11-13"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-11-13"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-11-13"}],"authorContributionMap":{"ZiMing2983":74}},{"path":"src/test/java/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the ListCommand class for listing tasks.","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"public class ListCommandTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    private ByteArrayOutputStream outputStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    private ListCommand listCommand;","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Set up the test environment before each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    public void setUp() {","lastModifiedDate":"2023-11-04"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        listCommand \u003d new ListCommand();","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"     * Clear the task list after each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    @AfterEach","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"    public void tearDown() {","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"        taskList.clear();","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"     * Test printing an empty task list.","lastModifiedDate":"2023-11-04"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"    void testPrintListWithEmptyTaskList() {","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        listCommand.printList(taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2023-11-05"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"                \"There\u0027s nothing in your list\" + System.lineSeparator() + MessageDisplay.LINE_BREAK","lastModifiedDate":"2023-11-05"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"                        + System.lineSeparator();","lastModifiedDate":"2023-11-05"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"     * Test printing a non-empty task list.","lastModifiedDate":"2023-11-04"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"    void testPrintTaskList() {","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new TodoTask(\"Test Task 1\"));","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new TodoTask(\"Test Task 2\"));","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"        listCommand.printList(taskList);","lastModifiedDate":"2023-11-04"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d \"Here are the tasks in your list:\" + System.lineSeparator()","lastModifiedDate":"2023-11-04"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"                + MessageDisplay.LINE_BREAK + System.lineSeparator()","lastModifiedDate":"2023-11-04"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"                + \"1.\" + taskList.get(0).toString() + System.lineSeparator()","lastModifiedDate":"2023-11-04"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"                + \"2.\" + taskList.get(1).toString() + System.lineSeparator()","lastModifiedDate":"2023-11-04"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"                + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-04"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":84}},{"path":"src/test/java/duke/command/MarkAsCompletedCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-05"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the MarkAsCompletedCommand class for marking tasks as completed.","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"public class MarkAsCompletedCommandTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    private ByteArrayOutputStream outputStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Set up the test environment before each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    void setUp() {","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"     * Clear the task list after each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    @AfterEach","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    public void tearDown() {","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        taskList.clear();","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"     * Test marking an incomplete task as completed.","lastModifiedDate":"2023-11-04"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    void testMarkingIncompleteTask() {","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task 1\");","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(task);","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"        MarkAsCompletedCommand markCommand \u003d new MarkAsCompletedCommand(0);","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        markCommand.execute(new FileStorage(), new MessageDisplay(), taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2023-11-05"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"                \"That\u0027s some progress! I\u0027ve marked this task as done:\" + System.lineSeparator()","lastModifiedDate":"2023-11-05"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"                        + \"   \" + taskList.get(0).toString()","lastModifiedDate":"2023-11-05"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"                        + System.lineSeparator() + MessageDisplay.LINE_BREAK","lastModifiedDate":"2023-11-05"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"                        + System.lineSeparator();","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"     * Test marking an already completed task.","lastModifiedDate":"2023-11-04"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"    void testMarkingCompletedTask() {","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task 1\");","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"        task.markAsCompleted();","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(task);","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"        MarkAsCompletedCommand markCommand \u003d new MarkAsCompletedCommand(0);","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"        markCommand.execute(new FileStorage(), new MessageDisplay(), taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d task.getTaskName() + \" is already marked!\" + System.lineSeparator()","lastModifiedDate":"2023-11-05"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"                + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-05"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":88}},{"path":"src/test/java/duke/command/MarkAsInCompletedCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-05"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the MarkAsInCompletedCommand class for marking tasks as incomplete.","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"public class MarkAsInCompletedCommandTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    private ByteArrayOutputStream outputStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Set up the test environment before each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    void setUp() {","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"     * Clear the task list after each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    @AfterEach","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    public void tearDown() {","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        taskList.clear();","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"     * Test marking a completed task as incomplete.","lastModifiedDate":"2023-11-04"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    void testExecuteMarkingIncompleteTask() {","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task 1\");","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"        task.markAsCompleted();","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(task);","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        MarkAsInCompletedCommand markCommand \u003d new MarkAsInCompletedCommand(0);","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"        markCommand.execute(new FileStorage(), new MessageDisplay(), taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d \"Okay, you can do it at a later time:\" + System.lineSeparator()","lastModifiedDate":"2023-11-04"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"            + \"   \" + taskList.get(0).toString() + System.lineSeparator()","lastModifiedDate":"2023-11-04"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"            + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-04"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"     * Test marking an already incomplete task as incomplete.","lastModifiedDate":"2023-11-04"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"    void testExecuteMarkingAlreadyIncompleteTask() {","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task 1\");","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(task);","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"        MarkAsInCompletedCommand markCommand \u003d new MarkAsInCompletedCommand(0);","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"        markCommand.execute(new FileStorage(), new MessageDisplay(), taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2023-11-05"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"            \"You did not complete \" + task.getTaskName() + \" before!\" + System.lineSeparator()","lastModifiedDate":"2023-11-05"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"                + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-04"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":87}},{"path":"src/test/java/duke/command/OnCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-11-04"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-05"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the OnCommand class for checking tasks on a specific date.","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"public class OnCommandTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    private LocalDate checkDate;","lastModifiedDate":"2023-11-05"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"    private ByteArrayOutputStream outputStream;","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    private OnCommand onCommand;","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     * Set up the test environment before each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    void setUp() {","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        checkDate \u003d LocalDate.now();","lastModifiedDate":"2023-11-04"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        onCommand \u003d new OnCommand(checkDate);","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"     * Clear the task list after each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    @AfterEach","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    public void tearDown() {","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"        taskList.clear();","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"     * Test checking tasks with an empty task list for a specific date.","lastModifiedDate":"2023-11-04"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"    void testCheckTasksWithEmptyTaskList() {","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        onCommand.checkTasks(taskList, checkDate);","lastModifiedDate":"2023-11-04"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2023-11-05"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"                \"There\u0027s nothing on \" + checkDate + System.lineSeparator() + MessageDisplay.LINE_BREAK","lastModifiedDate":"2023-11-05"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"                        + System.lineSeparator();","lastModifiedDate":"2023-11-05"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"     * Test checking tasks with a non-empty task list for a specific date.","lastModifiedDate":"2023-11-04"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"    void testCheckTasksWithNonEmptyTaskList() {","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"        LocalDate checkDate \u003d LocalDate.now();","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"        Task task1 \u003d new DeadlineTask(\"Task 1\", checkDate.atStartOfDay());","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"        Task task2 \u003d new DeadlineTask(\"Task 2\", checkDate.atStartOfDay());","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(task1);","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(task2);","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"        onCommand.checkTasks(taskList, checkDate);","lastModifiedDate":"2023-11-04"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2023-11-05"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"                \"Here are the tasks in your list as of \" + checkDate + System.lineSeparator()","lastModifiedDate":"2023-11-05"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"                        + MessageDisplay.LINE_BREAK + System.lineSeparator()","lastModifiedDate":"2023-11-05"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"                        + \"1.\" + task1 + System.lineSeparator()","lastModifiedDate":"2023-11-04"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"                        + \"2.\" + task2 + System.lineSeparator()","lastModifiedDate":"2023-11-04"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"                        + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-04"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"     * Test checking tasks with a task list where tasks do not match the specified date.","lastModifiedDate":"2023-11-04"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":93,"author":{"gitId":"ZiMing2983"},"content":"    void testCheckTasksWithTaskNotMatchingDate() {","lastModifiedDate":"2023-10-30"},{"lineNumber":94,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":95,"author":{"gitId":"ZiMing2983"},"content":"        LocalDate checkDate \u003d LocalDate.now();","lastModifiedDate":"2023-10-30"},{"lineNumber":96,"author":{"gitId":"ZiMing2983"},"content":"        LocalDate futureDate \u003d checkDate.plusDays(1);","lastModifiedDate":"2023-10-30"},{"lineNumber":97,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-10-30"},{"lineNumber":98,"author":{"gitId":"ZiMing2983"},"content":"        Task task1 \u003d new DeadlineTask(\"Task 1\", checkDate.atStartOfDay());","lastModifiedDate":"2023-10-30"},{"lineNumber":99,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":100,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(task1);","lastModifiedDate":"2023-10-30"},{"lineNumber":101,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":102,"author":{"gitId":"ZiMing2983"},"content":"        onCommand.checkTasks(taskList, futureDate);","lastModifiedDate":"2023-11-04"},{"lineNumber":103,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-10-30"},{"lineNumber":104,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2023-11-05"},{"lineNumber":105,"author":{"gitId":"ZiMing2983"},"content":"                \"There\u0027s nothing on \" + futureDate + System.lineSeparator() + MessageDisplay.LINE_BREAK","lastModifiedDate":"2023-11-05"},{"lineNumber":106,"author":{"gitId":"ZiMing2983"},"content":"                        + System.lineSeparator();","lastModifiedDate":"2023-11-05"},{"lineNumber":107,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":108,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":109,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":110,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":110}},{"path":"src/test/java/duke/command/RescheduleCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.command;","lastModifiedDate":"2023-11-13"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-13"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-13"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-13"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-13"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-11-13"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-13"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.DukeException;","lastModifiedDate":"2023-11-13"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-11-13"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-13"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-13"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"class RescheduleCommandTest {","lastModifiedDate":"2023-11-13"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-11-13"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"    private MessageDisplay display;","lastModifiedDate":"2023-11-13"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    private FileStorage fileStorage;","lastModifiedDate":"2023-11-13"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-11-13"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"    public void setUp() {","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-13"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"        display \u003d new MessageDisplay();","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"        fileStorage \u003d new FileStorage();","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"     * Clear the task list after each test case.","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"    @AfterEach","lastModifiedDate":"2023-11-13"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    public void tearDown() {","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"        taskList.clear();","lastModifiedDate":"2023-11-13"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    void execute_validItemIndex_shouldRescheduleTask() throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime initialDateTime \u003d LocalDateTime.now();","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new DeadlineTask(\"Task 1\", initialDateTime));","lastModifiedDate":"2023-11-13"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"        int itemIndex \u003d 0;","lastModifiedDate":"2023-11-13"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime revisedDateTime \u003d initialDateTime.plusDays(1);","lastModifiedDate":"2023-11-13"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"        RescheduleCommand rescheduleCommand \u003d new RescheduleCommand(itemIndex, revisedDateTime);","lastModifiedDate":"2023-11-13"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"        rescheduleCommand.execute(fileStorage, display, taskList);","lastModifiedDate":"2023-11-13"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(revisedDateTime, taskList.get(itemIndex).getTaskEndDate());","lastModifiedDate":"2023-11-13"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-11-13"}],"authorContributionMap":{"ZiMing2983":49}},{"path":"src/test/java/duke/filehandler/FileReadTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.filehandler;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-05"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.io.File;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the FileRead class.","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"public class FileReadTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"    private FileRead fileRead;","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    private File testFile;","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Set up the test environment before each test case.","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    public void setup() {","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        fileRead \u003d new FileRead();","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        testFile \u003d new File(\"./data/duke.txt\");","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"     * Test loading saved tasks from a file.","lastModifiedDate":"2023-11-04"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"     * @throws IOException if there is an issue with file operations.","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    public void testGetSavedTask() throws IOException {","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"        // Create a temporary file with sample task data","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"        FileWriter writer \u003d new FileWriter(testFile);","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"        writer.write(\"T | 0 | TestTodo\\n\");","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"        writer.write(\"D | 0 | TestDeadline | 2023-10-31 12:00\\n\");","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"        writer.write(\"E | 1 | TestEvent | 2023-10-31 12:00 | 2023-10-31 14:00\\n\");","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"        writer.close();","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"        fileRead.getSavedTask(taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        // Verify the loaded tasks","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"TestTodo\", taskList.get(0).getTaskName());","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"        assertFalse(taskList.get(0).isCompleted());","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"TestDeadline\", taskList.get(1).getTaskName());","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"        assertFalse(taskList.get(1).isCompleted());","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"TestEvent\", taskList.get(2).getTaskName());","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(taskList.get(2).isCompleted());","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"     * Test loading saved tasks when the file is not found.","lastModifiedDate":"2023-11-04"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"    public void testGetSavedTaskFileNotFound() {","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"        // Attempt to load saved tasks from a non-existing file","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"        fileRead.getSavedTask(taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"        // Verify that no tasks were loaded","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(0, taskList.size());","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"     * Test loading saved tasks when the file contains corrupted data.","lastModifiedDate":"2023-11-04"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"     * @throws IOException if there is an issue with file operations.","lastModifiedDate":"2023-11-04"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"    public void testGetSavedTaskFileCorrupted() throws IOException {","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"        // Create a temporary file with corrupted task data","lastModifiedDate":"2023-10-30"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"        FileWriter writer \u003d new FileWriter(testFile);","lastModifiedDate":"2023-10-30"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"        writer.write(\"T | 0 | Test Todo 1 | AdditionalData\\n\");","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"        writer.write(\"D | Test Deadline 1 | false\\n\");","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"        writer.write(\"E | Test Event 1 | true | 2023-10-31T12:00 | InvalidDate\\n\");","lastModifiedDate":"2023-10-30"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"        writer.close();","lastModifiedDate":"2023-10-30"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"        fileRead.getSavedTask(taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"        // Verify that no tasks were loaded due to data corruption","lastModifiedDate":"2023-10-30"},{"lineNumber":93,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(0, taskList.size());","lastModifiedDate":"2023-10-30"},{"lineNumber":94,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":95,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":96,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":96}},{"path":"src/test/java/duke/filehandler/FileStorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.filehandler;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.io.File;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-11-05"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the FileStorage class for saving tasks to a file.","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"public class FileStorageTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"     * Test storing a list of tasks in a file.","lastModifiedDate":"2023-11-04"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     *","lastModifiedDate":"2023-11-04"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"     * @throws IOException if there is an issue with file operations.","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    public void testStore() throws IOException {","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new TodoTask(\"Test Todo 1\"));","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new DeadlineTask(\"Test Deadline 1\", false, LocalDate.now().atStartOfDay()));","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new EventTask(\"Test Event 1\", true, LocalDate.now().atStartOfDay(),","lastModifiedDate":"2023-11-05"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"                LocalDate.now().atStartOfDay()));","lastModifiedDate":"2023-11-05"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        FileStorage fileStorage \u003d new FileStorage();","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        // Store the tasks in the file","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"        fileStorage.store(taskList);","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        // Specify the file path for testing","lastModifiedDate":"2023-11-04"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"        String testFilePath \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-11-04"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"        // Check if the file was created and contains the correct data","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"        File outputFile \u003d new File(testFilePath);","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(outputFile.exists());","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"        List\u003cString\u003e lines \u003d java.nio.file.Files.readAllLines(outputFile.toPath());","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(3, lines.size());","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"T | 0 | Test Todo 1\", lines.get(0));","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(","lastModifiedDate":"2023-11-05"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"                \"D | 0 | Test Deadline 1 | \" + LocalDate.now().atStartOfDay().toString().replace(\"T\", \" \"),","lastModifiedDate":"2023-11-05"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"                lines.get(1));","lastModifiedDate":"2023-11-05"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(","lastModifiedDate":"2023-11-05"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"                \"E | 1 | Test Event 1 | \" + LocalDate.now().atStartOfDay().toString().replace(\"T\", \" \")","lastModifiedDate":"2023-11-05"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"                        + \" | \" + LocalDate.now().atStartOfDay().toString().replace(\"T\", \" \"), lines.get(2));","lastModifiedDate":"2023-11-05"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":62}},{"path":"src/test/java/duke/parser/CommandValidatorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.parser;","lastModifiedDate":"2023-11-13"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-13"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-11-13"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-13"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-11-13"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-11-13"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-13"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-13"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import java.util.List;","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-11-13"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-13"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.DukeException;","lastModifiedDate":"2023-11-13"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.EmptyArgumentException;","lastModifiedDate":"2023-11-13"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.InvalidDateFormatException;","lastModifiedDate":"2023-11-13"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.TaskNotFoundException;","lastModifiedDate":"2023-11-13"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"import duke.filehandler.FileStorage;","lastModifiedDate":"2023-11-13"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-11-13"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-11-13"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.Task;","lastModifiedDate":"2023-11-13"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-11-13"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"import duke.userinterface.UserInterface.MessageDisplay;","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"class CommandValidatorTest {","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    private FileStorage fileStorage;","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    private MessageDisplay messageDisplay;","lastModifiedDate":"2023-11-13"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"    private CommandValidator commandValidator;","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    private ByteArrayOutputStream outputStream;","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"    @BeforeEach","lastModifiedDate":"2023-11-13"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    void setUp() {","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"        fileStorage \u003d new FileStorage();","lastModifiedDate":"2023-11-13"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        messageDisplay \u003d new MessageDisplay();","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"        commandValidator \u003d new CommandValidator();","lastModifiedDate":"2023-11-13"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"     * Clear the task list after each test case.","lastModifiedDate":"2023-11-13"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    */","lastModifiedDate":"2023-11-13"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    @AfterEach","lastModifiedDate":"2023-11-13"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"    public void tearDown() {","lastModifiedDate":"2023-11-13"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"        taskList.clear();","lastModifiedDate":"2023-11-13"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_validListCommand_shouldExecuteListCommand() throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-11-13"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new TodoTask(\"Sample Task\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"        commandValidator.executeCommand(fileStorage, messageDisplay, taskList, CommandValidator.LIST_COMMAND, \"list\");","lastModifiedDate":"2023-11-13"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d \"Here are the tasks in your list:\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"                    + MessageDisplay.LINE_BREAK + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"            + \"1.[T][ ] Sample Task\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"            + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-13"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-11-13"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(System.out);","lastModifiedDate":"2023-11-13"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_validTodoCommand_shouldExecuteTodoCommand() throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-11-13"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"        commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"            CommandValidator.TODO_COMMAND, \"todo Buy groceries\");","lastModifiedDate":"2023-11-13"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d","lastModifiedDate":"2023-11-13"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"                \"Got it. I\u0027ve added this task:\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"                + \"   [T][ ] Buy groceries\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"                + \"Now you have 1 tasks in the list.\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"                + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-13"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-11-13"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2023-11-13"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(taskList.get(0) instanceof TodoTask);","lastModifiedDate":"2023-11-13"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_emptyTodoArgument_shouldThrowEmptyTodoArgumentException() {","lastModifiedDate":"2023-11-13"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"        DukeException exception \u003d assertThrows(EmptyArgumentException.class, () -\u003e commandValidator.executeCommand(","lastModifiedDate":"2023-11-13"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"            fileStorage, messageDisplay, taskList, CommandValidator.TODO_COMMAND, \"todo\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d \"The description of a todo task cannot be empty!\";","lastModifiedDate":"2023-11-13"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, exception.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_validDeadlineCommand_shouldExecuteDeadlineCommand() throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-11-13"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"        commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"            CommandValidator.DEADLINE_COMMAND, \"deadline Homework /by 2023-12-31 18:00\");","lastModifiedDate":"2023-11-13"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d \"Got it. I\u0027ve added this task:\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"            + \"   [D][ ] Homework (by: Sun 31 Dec 2023 18:00)\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":93,"author":{"gitId":"ZiMing2983"},"content":"            + \"Now you have 1 tasks in the list.\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":94,"author":{"gitId":"ZiMing2983"},"content":"            + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-13"},{"lineNumber":95,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-11-13"},{"lineNumber":96,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2023-11-13"},{"lineNumber":97,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(taskList.get(0) instanceof DeadlineTask);","lastModifiedDate":"2023-11-13"},{"lineNumber":98,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":99,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":100,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_emptyDeadlineArgument_shouldThrowEmptyDeadlineArgumentException() {","lastModifiedDate":"2023-11-13"},{"lineNumber":101,"author":{"gitId":"ZiMing2983"},"content":"        DukeException exception \u003d assertThrows(EmptyArgumentException.class, () -\u003e commandValidator.executeCommand(","lastModifiedDate":"2023-11-13"},{"lineNumber":102,"author":{"gitId":"ZiMing2983"},"content":"            fileStorage, messageDisplay, taskList, CommandValidator.DEADLINE_COMMAND, \"deadline\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":103,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":104,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"The description of a deadline task cannot be empty!\", exception.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":105,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":106,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":107,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":108,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_validEventCommand_shouldExecuteEventCommand() throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":109,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-11-13"},{"lineNumber":110,"author":{"gitId":"ZiMing2983"},"content":"        commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":111,"author":{"gitId":"ZiMing2983"},"content":"            CommandValidator.EVENT_COMMAND, \"event Homework /from 2023-12-31 18:00 /to 2024-01-01 18:00\");","lastModifiedDate":"2023-11-13"},{"lineNumber":112,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d \"Got it. I\u0027ve added this task:\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":113,"author":{"gitId":"ZiMing2983"},"content":"            + \"   [E][ ] Homework (from: Sun 31 Dec 2023 18:00 to: Mon 01 Jan 2024 18:00)\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":114,"author":{"gitId":"ZiMing2983"},"content":"            + \"Now you have 1 tasks in the list.\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":115,"author":{"gitId":"ZiMing2983"},"content":"            + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-13"},{"lineNumber":116,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-11-13"},{"lineNumber":117,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2023-11-13"},{"lineNumber":118,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(taskList.get(0) instanceof EventTask);","lastModifiedDate":"2023-11-13"},{"lineNumber":119,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":120,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":121,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":122,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_emptyEventArgument_shouldThrowEmptyEventArgumentException() {","lastModifiedDate":"2023-11-13"},{"lineNumber":123,"author":{"gitId":"ZiMing2983"},"content":"        DukeException exception \u003d assertThrows(EmptyArgumentException.class, () -\u003e","lastModifiedDate":"2023-11-13"},{"lineNumber":124,"author":{"gitId":"ZiMing2983"},"content":"            commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":125,"author":{"gitId":"ZiMing2983"},"content":"                CommandValidator.EVENT_COMMAND, \"event\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":126,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":127,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"The description of a event task cannot be empty!\", exception.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":128,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":129,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":130,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":131,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_validOnCommand_shouldExecuteOnCommand() throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":132,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-11-13"},{"lineNumber":133,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime date \u003d DukeParser.parseDateTimeOrDate(\"2023-11-11\");","lastModifiedDate":"2023-11-13"},{"lineNumber":134,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new DeadlineTask(\"Sample Task\", date));","lastModifiedDate":"2023-11-13"},{"lineNumber":135,"author":{"gitId":"ZiMing2983"},"content":"        commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":136,"author":{"gitId":"ZiMing2983"},"content":"            CommandValidator.ON_COMMAND, \"on 2023-11-11\");","lastModifiedDate":"2023-11-13"},{"lineNumber":137,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d \"Here are the tasks in your list as of 2023-11-11\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":138,"author":{"gitId":"ZiMing2983"},"content":"            + MessageDisplay.LINE_BREAK + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":139,"author":{"gitId":"ZiMing2983"},"content":"            + \"1.[D][ ] Sample Task (by: Sat 11 Nov 2023 00:00)\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":140,"author":{"gitId":"ZiMing2983"},"content":"            + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-13"},{"lineNumber":141,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-11-13"},{"lineNumber":142,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":143,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":144,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":145,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_emptyOnArgument_shouldThrowEmptyOnArgumentException() {","lastModifiedDate":"2023-11-13"},{"lineNumber":146,"author":{"gitId":"ZiMing2983"},"content":"        DukeException exception \u003d assertThrows(EmptyArgumentException.class, () -\u003e","lastModifiedDate":"2023-11-13"},{"lineNumber":147,"author":{"gitId":"ZiMing2983"},"content":"            commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":148,"author":{"gitId":"ZiMing2983"},"content":"                CommandValidator.ON_COMMAND, \"on\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":149,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"Please provide the specific date that you want to check if a task exists!\",","lastModifiedDate":"2023-11-13"},{"lineNumber":150,"author":{"gitId":"ZiMing2983"},"content":"            exception.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":151,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":152,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":153,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":154,"author":{"gitId":"ZiMing2983"},"content":"     void executeCommand_invalidOnArgument_shouldThrowInvalidDateFormatException() {","lastModifiedDate":"2023-11-13"},{"lineNumber":155,"author":{"gitId":"ZiMing2983"},"content":"        DukeException exception \u003d assertThrows(InvalidDateFormatException.class, () -\u003e","lastModifiedDate":"2023-11-13"},{"lineNumber":156,"author":{"gitId":"ZiMing2983"},"content":"            commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":157,"author":{"gitId":"ZiMing2983"},"content":"                CommandValidator.ON_COMMAND, \"on 2023/01/01\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":158,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":159,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"Please provide date in the format of yyyy-mm-dd hh:mm:ss\", exception.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":160,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":161,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":162,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":163,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_validFindCommand_shouldExecuteFindCommand() throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":164,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-11-13"},{"lineNumber":165,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new TodoTask(\"borrow book\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":166,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new TodoTask(\"return book\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":167,"author":{"gitId":"ZiMing2983"},"content":"        commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":168,"author":{"gitId":"ZiMing2983"},"content":"            CommandValidator.FIND_COMMAND, \"find book\");","lastModifiedDate":"2023-11-13"},{"lineNumber":169,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":170,"author":{"gitId":"ZiMing2983"},"content":"        String expectedOutput \u003d \"Here are the matching tasks in your list:\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":171,"author":{"gitId":"ZiMing2983"},"content":"            + MessageDisplay.LINE_BREAK + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":172,"author":{"gitId":"ZiMing2983"},"content":"            + \"1.[T][ ] borrow book\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":173,"author":{"gitId":"ZiMing2983"},"content":"            + \"2.[T][ ] return book\" + System.lineSeparator()","lastModifiedDate":"2023-11-13"},{"lineNumber":174,"author":{"gitId":"ZiMing2983"},"content":"            + MessageDisplay.LINE_BREAK + System.lineSeparator();","lastModifiedDate":"2023-11-13"},{"lineNumber":175,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expectedOutput, outputStream.toString());","lastModifiedDate":"2023-11-13"},{"lineNumber":176,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":177,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":178,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":179,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_emptyFindArgument_shouldThrowEmptyFindArgumentException() {","lastModifiedDate":"2023-11-13"},{"lineNumber":180,"author":{"gitId":"ZiMing2983"},"content":"        DukeException exception \u003d assertThrows(EmptyArgumentException.class, () -\u003e","lastModifiedDate":"2023-11-13"},{"lineNumber":181,"author":{"gitId":"ZiMing2983"},"content":"            commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":182,"author":{"gitId":"ZiMing2983"},"content":"                CommandValidator.FIND_COMMAND, \"find\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":183,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"Please provide the specific keyword that you want to check if a task exists!\",","lastModifiedDate":"2023-11-13"},{"lineNumber":184,"author":{"gitId":"ZiMing2983"},"content":"            exception.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":185,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":186,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":187,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_validRescheduleCommand_shouldExecuteRescheduleCommand() throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":188,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime date \u003d DukeParser.parseDateTimeOrDate(\"2050-01-01\");","lastModifiedDate":"2023-11-13"},{"lineNumber":189,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new DeadlineTask(\"Sample Task\", date));","lastModifiedDate":"2023-11-13"},{"lineNumber":190,"author":{"gitId":"ZiMing2983"},"content":"        commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":191,"author":{"gitId":"ZiMing2983"},"content":"            CommandValidator.RESCHEDULE_COMMAND, \"reschedule 1 2050-01-01 18:00\");","lastModifiedDate":"2023-11-13"},{"lineNumber":192,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(taskList.get(0).getTaskEndDate(), date);","lastModifiedDate":"2023-11-13"},{"lineNumber":193,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":194,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":195,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":196,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_emptyRescheduleArgument_shouldThrowInvalidRescheduleArgumentException() {","lastModifiedDate":"2023-11-13"},{"lineNumber":197,"author":{"gitId":"ZiMing2983"},"content":"        DukeException exception \u003d assertThrows(EmptyArgumentException.class, () -\u003e","lastModifiedDate":"2023-11-13"},{"lineNumber":198,"author":{"gitId":"ZiMing2983"},"content":"            commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":199,"author":{"gitId":"ZiMing2983"},"content":"                CommandValidator.RESCHEDULE_COMMAND, \"reschedule\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":200,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"Please provide the specific task and date that you want to postpone!\", exception.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":201,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":202,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":203,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-11-13"},{"lineNumber":204,"author":{"gitId":"ZiMing2983"},"content":"    void executeCommand_invalidRescheduleArgument_shouldThrowTaskNotFoundException() {","lastModifiedDate":"2023-11-13"},{"lineNumber":205,"author":{"gitId":"ZiMing2983"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-11-13"},{"lineNumber":206,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime date \u003d DukeParser.parseDateTimeOrDate(\"2050-01-01\");","lastModifiedDate":"2023-11-13"},{"lineNumber":207,"author":{"gitId":"ZiMing2983"},"content":"        taskList.add(new DeadlineTask(\"Sample Task\", date));","lastModifiedDate":"2023-11-13"},{"lineNumber":208,"author":{"gitId":"ZiMing2983"},"content":"        DukeException exception \u003d assertThrows(TaskNotFoundException.class, () -\u003e","lastModifiedDate":"2023-11-13"},{"lineNumber":209,"author":{"gitId":"ZiMing2983"},"content":"            commandValidator.executeCommand(fileStorage, messageDisplay, taskList,","lastModifiedDate":"2023-11-13"},{"lineNumber":210,"author":{"gitId":"ZiMing2983"},"content":"                CommandValidator.RESCHEDULE_COMMAND, \"reschedule 2 2023-12-31\"));","lastModifiedDate":"2023-11-13"},{"lineNumber":211,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":212,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":213,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-11-13"}],"authorContributionMap":{"ZiMing2983":213}},{"path":"src/test/java/duke/parser/DukeParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.parser;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.DukeException;","lastModifiedDate":"2023-11-13"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"import duke.dukeexceptions.InvalidNumberFormatException;","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the DukeParser class.","lastModifiedDate":"2023-11-04"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"public class DukeParserTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     * Test parsing a date and time string into a LocalDateTime object.","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"    public void testParseDateTime() {","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime dateTime \u003d DukeParser.parseDateTime(\"2023-10-31 08:00\");","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(LocalDateTime.of(2023, 10, 31, 8, 0), dateTime);","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     * Test parsing a date string into a LocalDate object.","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"    public void testParseDate() {","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        LocalDate date \u003d DukeParser.parseDate(\"2023-10-31\");","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(LocalDate.of(2023, 10, 31), date);","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"     * Test parsing a date and time string into a LocalDateTime object,","lastModifiedDate":"2023-11-05"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"     * with a fallback to midnight if the time is not provided.","lastModifiedDate":"2023-11-05"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"    public void testParseDateTimeOrDate() {","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime dateTime \u003d DukeParser.parseDateTimeOrDate(\"2023-10-31 08:00\");","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(LocalDateTime.of(2023, 10, 31, 8, 0), dateTime);","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime date \u003d DukeParser.parseDateTimeOrDate(\"2023-10-31\");","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(LocalDateTime.of(2023, 10, 31, 0, 0), date);","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"     * Test parsing an integer from a string.","lastModifiedDate":"2023-11-04"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"    public void testParseInteger() throws InvalidNumberFormatException {","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"        Integer integer \u003d DukeParser.parseInteger(\"42\");","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(42, integer.intValue());","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"     * Test parsing a command from user input.","lastModifiedDate":"2023-11-04"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"    public void testParseCommandFromInput() throws DukeException {","lastModifiedDate":"2023-11-13"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"        String command \u003d DukeParser.parseCommandFromInput(\"delete 1\");","lastModifiedDate":"2023-11-04"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(command, \"delete\");","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":72}},{"path":"src/test/java/duke/task/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.task;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-05"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the DeadlineTask class.","lastModifiedDate":"2023-11-04"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"public class DeadlineTaskTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * Test the conversion of a DeadlineTask to its string representation.","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"    public void testToString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime dueDate \u003d LocalDateTime.of(2023, 10, 31, 12, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"Test Deadline\", dueDate);","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"[D][ ] Test Deadline (by: Tue 31 Oct 2023 12:00)\";","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"     * Test the conversion of a DeadlineTask to a file format string.","lastModifiedDate":"2023-11-04"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    public void testToFile() {","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime dueDate \u003d LocalDateTime.of(2023, 10, 31, 12, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"Test Deadline\", dueDate);","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"D | 0 | Test Deadline | 2023-10-31 12:00\";","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.toFile());","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"     * Test checking a given date against the due date of the task.","lastModifiedDate":"2023-11-04"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    public void testCheckDate() {","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime dueDate \u003d LocalDateTime.of(2023, 10, 31, 12, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"Test Deadline\", dueDate);","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"        // Check with a date that matches the due date","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"        LocalDate checkedDate \u003d LocalDate.of(2023, 10, 31);","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(task.checkDate(checkedDate));","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        // Check with a date that doesn\u0027t match the due date","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"        LocalDate differentDate \u003d LocalDate.of(2023, 11, 1);","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"        assertFalse(task.checkDate(differentDate));","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"     * Test getting the due date of the task as a string.","lastModifiedDate":"2023-11-04"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"    public void testGetTaskDueDateString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime dueDate \u003d LocalDateTime.of(2023, 10, 31, 12, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"Test Deadline\", dueDate);","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"Tue 31 Oct 2023 12:00\";","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.getTaskDueDateString());","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":71}},{"path":"src/test/java/duke/task/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.task;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-05"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-05"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-05"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the EventTask class.","lastModifiedDate":"2023-11-04"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"public class EventTaskTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     * Test the conversion of an EventTask to its string representation.","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"    public void testToString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime from \u003d LocalDateTime.of(2023, 10, 31, 12, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime to \u003d LocalDateTime.of(2023, 10, 31, 14, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"        EventTask task \u003d new EventTask(\"Test Event\", from, to);","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"[E][ ] Test Event (from: Tue 31 Oct 2023 12:00 to: Tue 31 Oct 2023 14:00)\";","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"     * Test the conversion of an EventTask to a file format string.","lastModifiedDate":"2023-11-04"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"    public void testToFile() {","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime from \u003d LocalDateTime.of(2023, 10, 31, 12, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime to \u003d LocalDateTime.of(2023, 10, 31, 14, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"        EventTask task \u003d new EventTask(\"Test Event\", from, to);","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"E | 0 | Test Event | 2023-10-31 12:00 | 2023-10-31 14:00\";","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.toFile());","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"     * Test checking a given date against the start and end dates of the task.","lastModifiedDate":"2023-11-04"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"    public void testCheckDate() {","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime from \u003d LocalDateTime.of(2023, 10, 31, 12, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime to \u003d LocalDateTime.of(2023, 10, 31, 14, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"        EventTask task \u003d new EventTask(\"Test Event\", from, to);","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"        // Check with a date that matches the start date","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"        LocalDate checkedDateFrom \u003d LocalDate.of(2023, 10, 31);","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(task.checkDate(checkedDateFrom));","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        // Check with a date that matches the end date","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"        LocalDate checkedDateTo \u003d LocalDate.of(2023, 10, 31);","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(task.checkDate(checkedDateTo));","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"        // Check with a date that doesn\u0027t match either the start or end date","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"        LocalDate differentDate \u003d LocalDate.of(2023, 11, 1);","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"        assertFalse(task.checkDate(differentDate));","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"     * Test getting the string representation of the start date of the event.","lastModifiedDate":"2023-11-04"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"    public void testGetTaskFromString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime from \u003d LocalDateTime.of(2023, 10, 31, 12, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime to \u003d LocalDateTime.of(2023, 10, 31, 14, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"        EventTask task \u003d new EventTask(\"Test Event\", from, to);","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"Tue 31 Oct 2023 12:00\";","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.getTaskFromString());","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"     * Test getting the string representation of the end date of the event.","lastModifiedDate":"2023-11-04"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"    public void testGetTaskToString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime from \u003d LocalDateTime.of(2023, 10, 31, 12, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime to \u003d LocalDateTime.of(2023, 10, 31, 14, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"        EventTask task \u003d new EventTask(\"Test Event\", from, to);","lastModifiedDate":"2023-10-30"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"Tue 31 Oct 2023 14:00\";","lastModifiedDate":"2023-10-30"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.getTaskToString());","lastModifiedDate":"2023-10-30"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":92}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.task;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-04"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-04"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-05"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the Task class and its subclasses (TodoTask, DeadlineTask, EventTask).","lastModifiedDate":"2023-11-04"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"public class TaskTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"     * Test converting an incomplete task to its string representation.","lastModifiedDate":"2023-11-04"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"    public void testToStringNotCompleted() {","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task\");","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"[T][ ] Test Task\";","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"     * Test converting a completed task to its string representation.","lastModifiedDate":"2023-11-04"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"    public void testToStringCompleted() {","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task\", true);","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"[T][X] Test Task\";","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"     * Test marking a task as completed.","lastModifiedDate":"2023-11-04"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"    public void testMarkAsCompleted() {","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task\");","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"        assertFalse(task.isCompleted());","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"        task.markAsCompleted();","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(task.isCompleted());","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"     * Test marking a task as not completed.","lastModifiedDate":"2023-11-04"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"    public void testMarkAsNotCompleted() {","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task\", true);","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"        assertTrue(task.isCompleted());","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"        task.markAsNotCompleted();","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"        assertFalse(task.isCompleted());","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":63,"author":{"gitId":"ZiMing2983"},"content":"     * Test getting the name of a task.","lastModifiedDate":"2023-11-04"},{"lineNumber":64,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":65,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"ZiMing2983"},"content":"    public void testGetTaskName() {","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":68,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task\");","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\"Test Task\", task.getTaskName());","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":73,"author":{"gitId":"ZiMing2983"},"content":"     * Test getting the type of a task.","lastModifiedDate":"2023-11-04"},{"lineNumber":74,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":75,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"ZiMing2983"},"content":"    public void testGetTaskType() {","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":78,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task\");","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(\u0027T\u0027, task.getTaskType());","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":83,"author":{"gitId":"ZiMing2983"},"content":"     * Test checking if a task is completed or not.","lastModifiedDate":"2023-11-04"},{"lineNumber":84,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":85,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"ZiMing2983"},"content":"    public void testIsCompleted() {","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":88,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task\");","lastModifiedDate":"2023-10-30"},{"lineNumber":89,"author":{"gitId":"ZiMing2983"},"content":"        assertFalse(task.isCompleted());","lastModifiedDate":"2023-10-30"},{"lineNumber":90,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":91,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":92,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":93,"author":{"gitId":"ZiMing2983"},"content":"     * Test converting a LocalDateTime to a string format.","lastModifiedDate":"2023-11-04"},{"lineNumber":94,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":95,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":96,"author":{"gitId":"ZiMing2983"},"content":"    public void testDateTimetoString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":97,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":98,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task\");","lastModifiedDate":"2023-10-30"},{"lineNumber":99,"author":{"gitId":"ZiMing2983"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.of(2023, 10, 31, 12, 0);","lastModifiedDate":"2023-10-30"},{"lineNumber":100,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"Tue 31 Oct 2023 12:00\";","lastModifiedDate":"2023-10-30"},{"lineNumber":101,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.dateTimetoString(dateTime));","lastModifiedDate":"2023-10-30"},{"lineNumber":102,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":103,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":104,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":105,"author":{"gitId":"ZiMing2983"},"content":"     * Test converting a task to a string format for storing in a file.","lastModifiedDate":"2023-11-04"},{"lineNumber":106,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":107,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":108,"author":{"gitId":"ZiMing2983"},"content":"    public void testToFile() {","lastModifiedDate":"2023-10-30"},{"lineNumber":109,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":110,"author":{"gitId":"ZiMing2983"},"content":"        Task task \u003d new TodoTask(\"Test Task\");","lastModifiedDate":"2023-10-30"},{"lineNumber":111,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"T | 0 | Test Task\";","lastModifiedDate":"2023-10-30"},{"lineNumber":112,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.toFile());","lastModifiedDate":"2023-10-30"},{"lineNumber":113,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":115,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":115}},{"path":"src/test/java/duke/task/TodoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"package duke.task;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-04"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-04"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-05"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"/**","lastModifiedDate":"2023-11-04"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":" * Tests the functionality of the TodoTask class.","lastModifiedDate":"2023-11-04"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":" */","lastModifiedDate":"2023-11-04"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"public class TodoTaskTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"     * Test converting an incomplete TodoTask to its string representation.","lastModifiedDate":"2023-11-04"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"    public void testToString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"        TodoTask task \u003d new TodoTask(\"Test Todo\");","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"[T][ ] Test Todo\";","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"     * Test converting a TodoTask to its string format for storing in a file.","lastModifiedDate":"2023-11-04"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"    public void testToFile() {","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"        TodoTask task \u003d new TodoTask(\"Test Todo\");","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"        String expected \u003d \"T | 0 | Test Todo\";","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"        assertEquals(expected, task.toFile());","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"    /**","lastModifiedDate":"2023-11-04"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"     * Test checking if a TodoTask matches a specific date.","lastModifiedDate":"2023-11-04"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"     * Since TodoTasks do not have associated dates, it should always return false.","lastModifiedDate":"2023-11-04"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"     */","lastModifiedDate":"2023-11-04"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"    public void testCheckDate() {","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"        TodoTask task \u003d new TodoTask(\"Test Todo\");","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"        // Check with any date, should always return false","lastModifiedDate":"2023-11-04"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"        assertFalse(task.checkDate(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"","lastModifiedDate":"2023-11-04"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"ZiMing2983":47}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ZiMing2983"},"content":"Unknowncommand","lastModifiedDate":"2023-11-13"},{"lineNumber":2,"author":{"gitId":"ZiMing2983"},"content":"Todo","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"ZiMing2983"},"content":"Deadline","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"ZiMing2983"},"content":"Event","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"ZiMing2983"},"content":"Mark","lastModifiedDate":"2023-11-13"},{"lineNumber":6,"author":{"gitId":"ZiMing2983"},"content":"Unmark","lastModifiedDate":"2023-11-13"},{"lineNumber":7,"author":{"gitId":"ZiMing2983"},"content":"Delete","lastModifiedDate":"2023-11-13"},{"lineNumber":8,"author":{"gitId":"ZiMing2983"},"content":"Find","lastModifiedDate":"2023-11-13"},{"lineNumber":9,"author":{"gitId":"ZiMing2983"},"content":"On","lastModifiedDate":"2023-11-13"},{"lineNumber":10,"author":{"gitId":"ZiMing2983"},"content":"List","lastModifiedDate":"2023-11-13"},{"lineNumber":11,"author":{"gitId":"ZiMing2983"},"content":"Reschedule","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"ZiMing2983"},"content":"Deadline Read book","lastModifiedDate":"2023-11-13"},{"lineNumber":13,"author":{"gitId":"ZiMing2983"},"content":"Deadline Read book /by","lastModifiedDate":"2023-11-13"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"Deadline Read book /by Not a Date","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"Deadline /by 2023-12-31","lastModifiedDate":"2023-11-13"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"Event Return Book","lastModifiedDate":"2023-11-13"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"Event Return Book /from /by","lastModifiedDate":"2023-11-13"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"Event Return Book /from Not a Date","lastModifiedDate":"2023-11-13"},{"lineNumber":19,"author":{"gitId":"ZiMing2983"},"content":"Event Return Book /by Not a Date","lastModifiedDate":"2023-11-13"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"Event /from 2023-11-20 /to 2023-12-01","lastModifiedDate":"2023-11-13"},{"lineNumber":21,"author":{"gitId":"ZiMing2983"},"content":"Mark NotNumber","lastModifiedDate":"2023-11-13"},{"lineNumber":22,"author":{"gitId":"ZiMing2983"},"content":"Unmark NotNumber","lastModifiedDate":"2023-11-13"},{"lineNumber":23,"author":{"gitId":"ZiMing2983"},"content":"Delete NotNumber","lastModifiedDate":"2023-11-13"},{"lineNumber":24,"author":{"gitId":"ZiMing2983"},"content":"Find Empty list","lastModifiedDate":"2023-11-13"},{"lineNumber":25,"author":{"gitId":"ZiMing2983"},"content":"Todo gym","lastModifiedDate":"2023-11-13"},{"lineNumber":26,"author":{"gitId":"ZiMing2983"},"content":"Mark NotNumber","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"ZiMing2983"},"content":"Unmark NotNumber","lastModifiedDate":"2023-11-13"},{"lineNumber":28,"author":{"gitId":"ZiMing2983"},"content":"Delete NotNumber","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"ZiMing2983"},"content":"Find Empty list","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"ZiMing2983"},"content":"On Not a Date","lastModifiedDate":"2023-11-13"},{"lineNumber":31,"author":{"gitId":"ZiMing2983"},"content":"Reschedule Not number 2023-12-01","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"ZiMing2983"},"content":"Reschedule 1 Not a Date","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"ZiMing2983"},"content":"Deadline Borrow Book /by 2023-12-16 20:00","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"ZiMing2983"},"content":"Deadline Homework /by 2023-12-20","lastModifiedDate":"2023-11-13"},{"lineNumber":35,"author":{"gitId":"ZiMing2983"},"content":"Event Return Book /from 2023-12-22 23:00 /to 2023-12-24 12:00","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"ZiMing2983"},"content":"Event Group Project /from 2023-12-10 /to 2023-12-24 12:00","lastModifiedDate":"2023-11-13"},{"lineNumber":37,"author":{"gitId":"ZiMing2983"},"content":"Deadline Dinner /by 2023-12-15","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"ZiMing2983"},"content":"List","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"ZiMing2983"},"content":"Mark 2","lastModifiedDate":"2023-11-13"},{"lineNumber":40,"author":{"gitId":"ZiMing2983"},"content":"Mark 7","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"ZiMing2983"},"content":"Mark -1","lastModifiedDate":"2023-11-13"},{"lineNumber":42,"author":{"gitId":"ZiMing2983"},"content":"Mark 4","lastModifiedDate":"2023-11-13"},{"lineNumber":43,"author":{"gitId":"ZiMing2983"},"content":"Mark 4","lastModifiedDate":"2023-11-13"},{"lineNumber":44,"author":{"gitId":"ZiMing2983"},"content":"Unmark 1","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"ZiMing2983"},"content":"Unmark 2","lastModifiedDate":"2023-11-13"},{"lineNumber":46,"author":{"gitId":"ZiMing2983"},"content":"Unmarked 7","lastModifiedDate":"2023-11-13"},{"lineNumber":47,"author":{"gitId":"ZiMing2983"},"content":"Unmarked -1","lastModifiedDate":"2023-11-13"},{"lineNumber":48,"author":{"gitId":"ZiMing2983"},"content":"Unmark 2","lastModifiedDate":"2023-11-13"},{"lineNumber":49,"author":{"gitId":"ZiMing2983"},"content":"Reschedule 6 2023-12-25","lastModifiedDate":"2023-11-13"},{"lineNumber":50,"author":{"gitId":"ZiMing2983"},"content":"Reschedule 1 2022-12-11","lastModifiedDate":"2023-11-13"},{"lineNumber":51,"author":{"gitId":"ZiMing2983"},"content":"Reschedule 2 2022-12-11","lastModifiedDate":"2023-11-13"},{"lineNumber":52,"author":{"gitId":"ZiMing2983"},"content":"Reschedule -1 2023-12-14","lastModifiedDate":"2023-11-13"},{"lineNumber":53,"author":{"gitId":"ZiMing2983"},"content":"List","lastModifiedDate":"2023-11-13"},{"lineNumber":54,"author":{"gitId":"ZiMing2983"},"content":"Delete 1","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"ZiMing2983"},"content":"Delete -1","lastModifiedDate":"2023-11-13"},{"lineNumber":56,"author":{"gitId":"ZiMing2983"},"content":"Delete 10","lastModifiedDate":"2023-11-13"},{"lineNumber":57,"author":{"gitId":"ZiMing2983"},"content":"List","lastModifiedDate":"2023-09-23"},{"lineNumber":58,"author":{"gitId":"ZiMing2983"},"content":"Find book","lastModifiedDate":"2023-11-13"},{"lineNumber":59,"author":{"gitId":"ZiMing2983"},"content":"reschedule 2 2023-12-25","lastModifiedDate":"2023-11-13"},{"lineNumber":60,"author":{"gitId":"ZiMing2983"},"content":"On 2023-12-25","lastModifiedDate":"2023-11-13"},{"lineNumber":61,"author":{"gitId":"ZiMing2983"},"content":"Bye","lastModifiedDate":"2023-09-16"}],"authorContributionMap":{"ZiMing2983":61}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ZiMing2983"},"content":"java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ZiMing2983":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"ZiMing2983"},"content":"if [ -e \"./Data\" ]","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"ZiMing2983"},"content":"then","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"ZiMing2983"},"content":"    rm ./Data","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"ZiMing2983"},"content":"fi","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"ZiMing2983"},"content":"if ! javac -cp ../src/main/java/ -Xlint:none -d ../bin ../src/main/java/Duke/*.java","lastModifiedDate":"2023-10-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ZiMing2983":5,"-":37}}]
