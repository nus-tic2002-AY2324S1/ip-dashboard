[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"3. After that, locate the `src/main/java/nus/duke/Duke.java` file, right-click it, and choose `Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"   Hello! I\u0027m","lastModifiedDate":"2023-11-10"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"    ______   __   __  ___   _  _______  _______  _______  _______ ","lastModifiedDate":"2023-11-10"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"   |      | |  | |  ||   | | ||       ||  _    ||       ||       |","lastModifiedDate":"2023-11-10"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"   |  _    ||  | |  ||   |_| ||    ___|| |_|   ||   _   ||_     _|","lastModifiedDate":"2023-11-10"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"   | | |   ||  |_|  ||      _||   |___ |       ||  | |  |  |   |  ","lastModifiedDate":"2023-11-10"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"   | |_|   ||       ||     |_ |    ___||  _   | |  |_|  |  |   |  ","lastModifiedDate":"2023-11-10"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"   |       ||       ||    _  ||   |___ | |_|   ||       |  |   |  ","lastModifiedDate":"2023-11-10"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"   |______| |_______||___| |_||_______||_______||_______|  |___|  ","lastModifiedDate":"2023-11-10"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"   What can I do for you?","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"4. Duke is released under an MIT license.","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"yongjiema":10,"-":18}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"checkstyle {","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"    toolVersion \u003d \u002710.12.4\u0027","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-params:5.10.0\u0027","lastModifiedDate":"2023-11-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"    mainClass.set(\"nus.duke.Duke\")","lastModifiedDate":"2023-10-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yongjiema":7,"-":41}},{"path":"src/main/java/nus/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.AbstractCommand;","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.UnknownCommandDukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.parser.Parser;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":" * The Duke task manager is a command-line application for managing tasks.","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":" * It allows users to add, delete, and view tasks, as well as mark tasks as done.","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":" * Duke stores tasks in a file for persistence and offers a text-based user interface.","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"    private final Storage storage;","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"    private final TaskList tasks;","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"    private final Ui ui;","lastModifiedDate":"2023-10-17"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new Duke instance with the specified storage file path.","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"     * @param filePath The file path where Duke stores and loads tasks.","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"        assert filePath !\u003d null;","lastModifiedDate":"2023-11-05"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-10-17"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-10-15"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"        TaskList tasks;","lastModifiedDate":"2023-10-15"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"        try {","lastModifiedDate":"2023-10-15"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"            tasks \u003d storage.load();","lastModifiedDate":"2023-10-15"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-10-15"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"     * Runs the application.","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"     * @param args The input arguments passed to the application.","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-10-22"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"        Duke duke \u003d new Duke(\"./data/duke.txt\");","lastModifiedDate":"2023-10-22"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"        duke.run();","lastModifiedDate":"2023-10-22"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"     * Runs the Duke application.","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"    public void run() {","lastModifiedDate":"2023-10-15"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-10-17"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-10-17"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"        while (!isExit) {","lastModifiedDate":"2023-10-17"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"            try {","lastModifiedDate":"2023-09-26"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-10-17"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"                ui.showLine();","lastModifiedDate":"2023-10-17"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"                AbstractCommand c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-10-23"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-10-17"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-10-17"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-09-26"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"                if (e instanceof UnknownCommandDukeException) {","lastModifiedDate":"2023-10-15"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"                    ui.showError(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-10-17"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"                } else {","lastModifiedDate":"2023-09-26"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"                    ui.showError(\"OOPS!!! \" + e.getMessage());","lastModifiedDate":"2023-10-17"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"                }","lastModifiedDate":"2023-10-17"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"            } finally {","lastModifiedDate":"2023-10-17"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"                ui.showLine();","lastModifiedDate":"2023-10-17"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"            }","lastModifiedDate":"2023-09-26"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-09-26"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-09-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"yongjiema":73,"-":2}},{"path":"src/main/java/nus/duke/commands/AbstractCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":" * The `AbstractCommand` class serves as the base class for various command objects","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":" * in the Duke task manager application.","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"public abstract class AbstractCommand {","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"     * The arguments associated with the command.","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"    protected final String args;","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new abstract command with the provided arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     * @param args The arguments associated with the command.","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"    public AbstractCommand(String args) {","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"        assert args !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"        this.args \u003d args;","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"     * Executes the command.","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"     * @param tasks   The task list containing tasks to be operated upon.","lastModifiedDate":"2023-10-23"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"     * @param ui      The user interface for displaying information to the user.","lastModifiedDate":"2023-10-23"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"     * @param storage The storage component for reading and writing task data to a file.","lastModifiedDate":"2023-10-23"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"     * @throws DukeException If an error occurs during the execution of the command.","lastModifiedDate":"2023-10-23"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-10-23"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"     * Checks whether the program should exit.","lastModifiedDate":"2023-10-23"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"     * @return {@code true} if the program should exit, {@code false} otherwise.","lastModifiedDate":"2023-10-23"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-10-23"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"        return false;","lastModifiedDate":"2023-10-23"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"yongjiema":47}},{"path":"src/main/java/nus/duke/commands/AbstractTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskAfterOption;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskOptionKey;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskSource;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"import nus.duke.parser.Parser;","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"import nus.duke.util.IntegerUtils;","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":" * The `AbstractTaskCommand` class serves as the base class for commands that create tasks.","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"public abstract class AbstractTaskCommand extends AbstractCommand {","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `AbstractTaskCommand` with the provided arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     * @param args The user input arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"    public AbstractTaskCommand(String args) {","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"        super(args);","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"     * Generates messages to confirm the addition of a task and provide task count information.","lastModifiedDate":"2023-10-23"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"     * @param tasks The task list containing the recently added task.","lastModifiedDate":"2023-10-23"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"     * @return An array of strings representing messages confirming the added task and task count.","lastModifiedDate":"2023-10-23"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"    protected static String[] getTaskAddedMessages(TaskList tasks) {","lastModifiedDate":"2023-10-23"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"        return new String[] {","lastModifiedDate":"2023-10-23"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"            \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2023-10-23"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"            \"  \" + tasks.getLastTask(),","lastModifiedDate":"2023-10-23"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"            String.format(\"Now you have %d tasks in the list.\", tasks.size())","lastModifiedDate":"2023-10-23"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"        };","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"     * Retrieves the task after option, if provided in the user input.","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"     * @param tasks      The task list containing the tasks.","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"     * @param taskSource The source of the task input.","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"     * @return An optional `TaskAfterOption` representing the task after option, or empty if not provided.","lastModifiedDate":"2023-10-31"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"     * @throws InvalidCommandArgsDukeException If the task after option is invalid.","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"    protected static Optional\u003cTaskAfterOption\u003e getAfterOption(TaskList tasks, TaskSource taskSource)","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"        throws InvalidCommandArgsDukeException {","lastModifiedDate":"2023-10-31"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"        assert taskSource !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"        Optional\u003cString\u003e afterOption \u003d taskSource.getOptionValue(TaskOptionKey.AFTER);","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"        if (afterOption.isEmpty()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"        String afterOptionValue \u003d afterOption.get();","lastModifiedDate":"2023-10-31"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"        Integer afterTaskNumber \u003d IntegerUtils.tryParseInt(afterOptionValue);","lastModifiedDate":"2023-10-31"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"        if (afterTaskNumber !\u003d null) {","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"            if (afterTaskNumber \u003c 1 || afterTaskNumber \u003e tasks.size()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"                throw new InvalidCommandArgsDukeException(","lastModifiedDate":"2023-10-31"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"                    String.format(\"The task number of \\\"/%s\\\" is invalid.\", TaskOptionKey.AFTER));","lastModifiedDate":"2023-10-31"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"            }","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"            return Optional.of(new TaskAfterOption(afterTaskNumber));","lastModifiedDate":"2023-10-31"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime afterDateTime \u003d Parser.parseUserDateTime(afterOptionValue);","lastModifiedDate":"2023-10-31"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"        return Optional.of(new TaskAfterOption(afterDateTime));","lastModifiedDate":"2023-10-31"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"yongjiema":73}},{"path":"src/main/java/nus/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":" * The `ByeCommand` class represents a command for exiting the Duke task manager application.","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":" * When executed, this command displays a farewell message and signals the application to exit.","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"public class ByeCommand extends AbstractCommand {","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `ByeCommand` with the provided arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"     * @param args The arguments associated with the bye command (should be empty).","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"    public ByeCommand(String args) {","lastModifiedDate":"2023-10-17"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"        super(args);","lastModifiedDate":"2023-10-17"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"        assert ui !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"        if (!args.isEmpty()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"The bye command should not take any arguments.\");","lastModifiedDate":"2023-10-17"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"        ui.showMessages(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-10-17"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"        return true;","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"yongjiema":40}},{"path":"src/main/java/nus/duke/commands/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-22"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import java.util.SortedMap;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-22"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.AbstractTask;","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-22"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-22"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"import nus.duke.parser.Parser;","lastModifiedDate":"2023-10-22"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-22"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-22"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":" * The `DateCommand` class represents a command to list tasks with a specific due date.","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":" * It retrieves tasks from the task list that match the given date and displays them.","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"public class DateCommand extends AbstractCommand {","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `DateCommand` with the provided arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     * @param args The due date specified in the command.","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"    public DateCommand(String args) {","lastModifiedDate":"2023-10-22"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"        super(args);","lastModifiedDate":"2023-10-22"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-22"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-10-22"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"        assert ui !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        if (args.isEmpty()) {","lastModifiedDate":"2023-10-22"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"The due date cannot be empty.\");","lastModifiedDate":"2023-10-22"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-22"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"        LocalDate date \u003d Parser.parseUserDate(args);","lastModifiedDate":"2023-10-22"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"        SortedMap\u003cInteger, AbstractTask\u003e tasksOnDate \u003d tasks.getTasks(date);","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-22"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"        tasksOnDate.forEach((index, task) -\u003e {","lastModifiedDate":"2023-10-22"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"            lines.add(String.format(\"%d.%s\", index + 1, task));","lastModifiedDate":"2023-10-22"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"        });","lastModifiedDate":"2023-10-22"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"        ui.showMessages(lines.toArray(String[]::new));","lastModifiedDate":"2023-10-22"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-22"}],"authorContributionMap":{"yongjiema":47}},{"path":"src/main/java/nus/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskAfterOption;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskOptionKey;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskSource;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.Deadline;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"import nus.duke.parser.Parser;","lastModifiedDate":"2023-10-22"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":" * The `DeadlineCommand` class represents a command to add a new deadline task.","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":" * When executed, it parses user input to create a deadline task with a description","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":" * and a specific due date/time, then adds the task to the task list.","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"public class DeadlineCommand extends AbstractTaskCommand {","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `DeadlineCommand` with the provided arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"     * @param args The user input containing the description and the due date/time of the deadline task.","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    public DeadlineCommand(String args) {","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        super(args);","lastModifiedDate":"2023-10-17"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        assert ui !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"        if (args.isEmpty()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"        TaskSource taskSource \u003d Parser.parseTaskSource(args);","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"        Optional\u003cString\u003e byOption \u003d taskSource.getOptionValue(TaskOptionKey.BY);","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"        if (byOption.isEmpty()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"                String.format(\"The \\\"/%s {date/time}\\\" of a deadline is required.\", TaskOptionKey.BY));","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"        Optional\u003cTaskAfterOption\u003e optionalAfterOption \u003d getAfterOption(tasks, taskSource);","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime by \u003d Parser.parseUserDateTime(byOption.get());","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"        Deadline deadline \u003d new Deadline(taskSource.getDescription(), by);","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"        optionalAfterOption.ifPresent(deadline::setAfterOption);","lastModifiedDate":"2023-10-31"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"        tasks.addTask(deadline);","lastModifiedDate":"2023-10-17"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-10-17"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"        ui.showMessages(getTaskAddedMessages(tasks));","lastModifiedDate":"2023-10-17"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"yongjiema":56}},{"path":"src/main/java/nus/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.AbstractTask;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import nus.duke.util.IntegerUtils;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":" * The `DeleteCommand` class represents a command to delete a task from the task list.","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":" * When executed, this command validates the user input, deletes the specified task,","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":" * and updates the storage and user interface accordingly.","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"public class DeleteCommand extends AbstractCommand {","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `DeleteCommand` with the provided arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     * @param args The user input containing the task number to be deleted.","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"    public DeleteCommand(String args) {","lastModifiedDate":"2023-10-17"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"        super(args);","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"        assert ui !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"        if (args.isEmpty()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"The task number to be deleted cannot be empty.\");","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"        Integer taskNumber \u003d IntegerUtils.tryParseInt(args);","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"        if (taskNumber \u003d\u003d null || taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"Invalid task number to be deleted.\");","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"        AbstractTask task \u003d tasks.getTask(taskNumber - 1);","lastModifiedDate":"2023-10-23"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"        tasks.removeTask(taskNumber - 1);","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-10-17"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"        ui.showMessages(new String[] {","lastModifiedDate":"2023-10-17"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"            \"Noted. I\u0027ve removed this task:\",","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"            \"  \" + task.toString(),","lastModifiedDate":"2023-10-17"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"            String.format(\"Now you have %d tasks in the list.\", tasks.size())","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"        });","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"yongjiema":50}},{"path":"src/main/java/nus/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskAfterOption;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskOptionKey;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskSource;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.Event;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"import nus.duke.parser.Parser;","lastModifiedDate":"2023-10-22"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":" * The `EventCommand` class represents a command to add a new event task.","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":" * When executed, it parses user input to create an event task with a description","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":" * and specific start and end date/time, and then adds the task to the task list.","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"public class EventCommand extends AbstractTaskCommand {","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `EventCommand` with the provided arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"     * @param args The user input containing the event description, start date/time, and end date/time.","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    public EventCommand(String args) {","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        super(args);","lastModifiedDate":"2023-10-17"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"    private static void setEventAfterOption(Event event, TaskAfterOption afterOption)","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"        throws InvalidCommandArgsDukeException {","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"        assert event !\u003d null;","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"        if (afterOption \u003d\u003d null) {","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"            return;","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"        if (afterOption.isAfterTime()","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"            \u0026\u0026 (!afterOption.getDateTime().isAfter(event.getFrom())","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"            || !afterOption.getDateTime().isBefore(event.getTo()))) {","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"                String.format(","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"                    \"The time of \\\"/%s\\\" is not between \\\"/%s\\\" and \\\"/%s\\\".\",","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"                    TaskOptionKey.AFTER,","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"                    TaskOptionKey.FROM,","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"                    TaskOptionKey.TO));","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"        event.setAfterOption(afterOption);","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-10-17"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"        assert ui !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"        if (args.isEmpty()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2023-10-23"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"        TaskSource taskSource \u003d Parser.parseTaskSource(args);","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"        Optional\u003cString\u003e fromOption \u003d taskSource.getOptionValue(TaskOptionKey.FROM);","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"        Optional\u003cString\u003e toOption \u003d taskSource.getOptionValue(TaskOptionKey.TO);","lastModifiedDate":"2023-10-31"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"        if (fromOption.isEmpty()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"                String.format(\"The \\\"/%s {date/time}\\\" of an event is required.\", TaskOptionKey.FROM));","lastModifiedDate":"2023-10-31"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"        if (toOption.isEmpty()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(","lastModifiedDate":"2023-10-31"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"                String.format(\"The \\\"/%s {date/time}\\\" of an event is required.\", TaskOptionKey.TO));","lastModifiedDate":"2023-10-31"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"        Optional\u003cTaskAfterOption\u003e optionalAfterOption \u003d getAfterOption(tasks, taskSource);","lastModifiedDate":"2023-10-31"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime from \u003d Parser.parseUserDateTime(fromOption.get());","lastModifiedDate":"2023-10-31"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime to \u003d Parser.parseUserRelativeDateTime(from, toOption.get());","lastModifiedDate":"2023-10-31"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"        Event event \u003d new Event(taskSource.getDescription(), from, to);","lastModifiedDate":"2023-10-31"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"        setEventAfterOption(event, optionalAfterOption.orElse(null));","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"        tasks.addTask(event);","lastModifiedDate":"2023-10-17"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-10-17"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"        ui.showMessages(getTaskAddedMessages(tasks));","lastModifiedDate":"2023-10-17"},{"lineNumber":82,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":83,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"yongjiema":83}},{"path":"src/main/java/nus/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.AbstractTask;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":" * Represents a command to search for tasks based on a given criteria.","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"public class FindCommand extends AbstractCommand {","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"     * Creates a FindCommand with the specified search criteria.","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     * @param args The search criteria provided by the user.","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"    public FindCommand(String args) {","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"        super(args);","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        assert ui !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"        if (args.isEmpty()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"The find criteria cannot be empty.\");","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"        String criteria \u003d args.trim();","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"            AbstractTask task \u003d tasks.getTask(i);","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"            if (task.getDescription().toLowerCase().contains(criteria.toLowerCase())) {","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"                lines.add(String.format(\"%d.%s\", i + 1, task));","lastModifiedDate":"2023-10-31"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"            }","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"        ui.showMessages(lines.toArray(String[]::new));","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"yongjiema":45}},{"path":"src/main/java/nus/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.AbstractTask;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":" * The `ListCommand` class represents a command to list all tasks in the task list.","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":" * When executed, this command retrieves all tasks and displays them, including their","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":" * respective task numbers.","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"public class ListCommand extends AbstractCommand {","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `ListCommand`.","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     * @param args The user input arguments (should be empty for the list command).","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"    public ListCommand(String args) {","lastModifiedDate":"2023-10-17"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"        super(args);","lastModifiedDate":"2023-10-17"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        assert ui !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"        if (!args.isEmpty()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"The list command should not take any arguments.\");","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"        String[] lines \u003d new String[tasks.size()];","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-10-17"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"            AbstractTask task \u003d tasks.getTask(i);","lastModifiedDate":"2023-10-23"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"            lines[i] \u003d String.format(\"%d.%s\", i + 1, task.toString());","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"        ui.showMessages(lines);","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"yongjiema":42}},{"path":"src/main/java/nus/duke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.AbstractTask;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import nus.duke.util.IntegerUtils;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":" * The `MarkCommand` class represents a command to mark a task as done in the task list.","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":" * When executed, this command validates the user input, marks the specified task as done,","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":" * and updates the storage and user interface accordingly.","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"public class MarkCommand extends AbstractCommand {","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `MarkCommand` with the provided arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     * @param args The user input containing the task number to be marked as done.","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"    public MarkCommand(String args) {","lastModifiedDate":"2023-10-17"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"        super(args);","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"        assert ui !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"        if (args.isEmpty()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"The task number to be marked cannot be empty.\");","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"        Integer taskNumber \u003d IntegerUtils.tryParseInt(args);","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"        if (taskNumber \u003d\u003d null || taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"Invalid task number to be marked.\");","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"        AbstractTask task \u003d tasks.getTask(taskNumber - 1);","lastModifiedDate":"2023-10-23"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"        task.setDone(true);","lastModifiedDate":"2023-10-17"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-10-17"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"        ui.showMessages(new String[] {","lastModifiedDate":"2023-10-17"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"            \"Nice! I\u0027ve marked this task as done:\",","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"            \"  \" + task","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"        });","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"yongjiema":49}},{"path":"src/main/java/nus/duke/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskAfterOption;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskSource;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.Todo;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"import nus.duke.parser.Parser;","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":" * The `TodoCommand` class represents a command to add a new \"todo\" task.","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":" * When executed, this command validates the user input, creates a todo task with a description,","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":" * and adds it to the task list, providing confirmation messages.","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"public class TodoCommand extends AbstractTaskCommand {","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `TodoCommand` with the provided arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"     * @param args The user input containing the description of the todo task.","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"    public TodoCommand(String args) {","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"        super(args);","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-10-17"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"        assert ui !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"        if (args.isEmpty()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-10-17"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"        TaskSource taskSource \u003d Parser.parseTaskSource(args);","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"        Optional\u003cTaskAfterOption\u003e optionalAfterOption \u003d getAfterOption(tasks, taskSource);","lastModifiedDate":"2023-10-31"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"        Todo todo \u003d new Todo(taskSource.getDescription());","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"        optionalAfterOption.ifPresent(todo::setAfterOption);","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"        tasks.addTask(todo);","lastModifiedDate":"2023-10-23"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-10-17"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"        ui.showMessages(getTaskAddedMessages(tasks));","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"yongjiema":47}},{"path":"src/main/java/nus/duke/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.AbstractTask;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.storage.Storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.ui.Ui;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import nus.duke.util.IntegerUtils;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":" * The `UnmarkCommand` class represents a command to unmark a task as not done in the task list.","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":" * When executed, this command validates the user input, unmarks the specified task, and","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":" * updates the storage and user interface accordingly.","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"public class UnmarkCommand extends AbstractCommand {","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `UnmarkCommand` with the provided arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     * @param args The user input containing the task number to be unmarked.","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"    public UnmarkCommand(String args) {","lastModifiedDate":"2023-10-17"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"        super(args);","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"        assert ui !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"        if (args.isEmpty()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"The task number to be unmarked cannot be empty.\");","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"        Integer taskNumber \u003d IntegerUtils.tryParseInt(args);","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"        if (taskNumber \u003d\u003d null || taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"            throw new InvalidCommandArgsDukeException(\"Invalid task number to be unmarked.\");","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"        AbstractTask task \u003d tasks.getTask(taskNumber - 1);","lastModifiedDate":"2023-10-23"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"        task.setDone(false);","lastModifiedDate":"2023-10-17"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-10-17"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"        ui.showMessages(new String[] {","lastModifiedDate":"2023-10-17"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"            \"OK, I\u0027ve marked this task as not done yet:\",","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"            \"  \" + task","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"        });","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"yongjiema":49}},{"path":"src/main/java/nus/duke/data/TaskAfterOption.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.data;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-10"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":" * The `TaskAfterOption` class represents an option for specifying a task or a date/time","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":" * after which another task or event should occur. This option is used in certain commands","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":" * to indicate a dependency or a specific time reference.","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"public class TaskAfterOption {","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"    private final DataType dataType;","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"    private final int taskNumber;","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `TaskAfterOption` specifying a task dependency.","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     * @param taskNumber The task number after which the dependent task should occur.","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"    public TaskAfterOption(int taskNumber) {","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"        dataType \u003d DataType.TASK;","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"        this.dateTime \u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `TaskAfterOption` specifying a time reference.","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"     * @param dateTime The date and time after which the event should occur.","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"     * @throws NullPointerException If the provided `dateTime` is null.","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"    public TaskAfterOption(LocalDateTime dateTime) {","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        assert dateTime !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"        dataType \u003d DataType.TIME;","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"        this.taskNumber \u003d -1;","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"     * Checks if this `TaskAfterOption` represents a task dependency.","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"     * @return `true` if it represents a task dependency, `false` otherwise.","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"    public boolean isAfterTask() {","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"        return dataType.equals(DataType.TASK);","lastModifiedDate":"2023-10-31"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"     * Checks if this `TaskAfterOption` represents a time reference.","lastModifiedDate":"2023-10-31"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"     * @return `true` if it represents a time reference, `false` otherwise.","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"    public boolean isAfterTime() {","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"        return dataType.equals(DataType.TIME);","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"     * Gets the task number after which the dependent task should occur.","lastModifiedDate":"2023-10-31"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"     * @return The task number or -1 if this `TaskAfterOption` represents a time reference.","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"    public int getTaskNumber() {","lastModifiedDate":"2023-10-31"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"        return taskNumber;","lastModifiedDate":"2023-10-31"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"     * Gets the date and time after which the event should occur.","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"     * @return The date and time or null if this `TaskAfterOption` represents a task dependency.","lastModifiedDate":"2023-10-31"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2023-10-31"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"        return dateTime;","lastModifiedDate":"2023-10-31"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-11-10"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-11-10"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2023-11-10"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"            return true;","lastModifiedDate":"2023-11-10"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-10"},{"lineNumber":82,"author":{"gitId":"yongjiema"},"content":"        if (!(o instanceof TaskAfterOption)) {","lastModifiedDate":"2023-11-10"},{"lineNumber":83,"author":{"gitId":"yongjiema"},"content":"            return false;","lastModifiedDate":"2023-11-10"},{"lineNumber":84,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-10"},{"lineNumber":85,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":86,"author":{"gitId":"yongjiema"},"content":"        TaskAfterOption afterOption \u003d (TaskAfterOption) o;","lastModifiedDate":"2023-11-10"},{"lineNumber":87,"author":{"gitId":"yongjiema"},"content":"        if (dataType.equals(DataType.TASK)) {","lastModifiedDate":"2023-11-10"},{"lineNumber":88,"author":{"gitId":"yongjiema"},"content":"            return afterOption.isAfterTask() \u0026\u0026 taskNumber \u003d\u003d afterOption.getTaskNumber();","lastModifiedDate":"2023-11-10"},{"lineNumber":89,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-10"},{"lineNumber":90,"author":{"gitId":"yongjiema"},"content":"        if (dataType.equals(DataType.TIME)) {","lastModifiedDate":"2023-11-10"},{"lineNumber":91,"author":{"gitId":"yongjiema"},"content":"            return afterOption.isAfterTime() \u0026\u0026 dateTime !\u003d null \u0026\u0026 dateTime.equals(afterOption.getDateTime());","lastModifiedDate":"2023-11-10"},{"lineNumber":92,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-10"},{"lineNumber":93,"author":{"gitId":"yongjiema"},"content":"        return false;","lastModifiedDate":"2023-11-10"},{"lineNumber":94,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":95,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":96,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-11-10"},{"lineNumber":97,"author":{"gitId":"yongjiema"},"content":"    public int hashCode() {","lastModifiedDate":"2023-11-10"},{"lineNumber":98,"author":{"gitId":"yongjiema"},"content":"        return Arrays.hashCode(new Object[] {dataType, taskNumber, dateTime});","lastModifiedDate":"2023-11-10"},{"lineNumber":99,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":100,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":101,"author":{"gitId":"yongjiema"},"content":"    private enum DataType {","lastModifiedDate":"2023-10-31"},{"lineNumber":102,"author":{"gitId":"yongjiema"},"content":"        TASK,","lastModifiedDate":"2023-10-31"},{"lineNumber":103,"author":{"gitId":"yongjiema"},"content":"        TIME","lastModifiedDate":"2023-10-31"},{"lineNumber":104,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":105,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"yongjiema":105}},{"path":"src/main/java/nus/duke/data/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.data;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.text.MessageFormat;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-22"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import java.util.List;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import java.util.SortedMap;","lastModifiedDate":"2023-10-22"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import java.util.TreeMap;","lastModifiedDate":"2023-10-22"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.AbstractTask;","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.Deadline;","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.Event;","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":" * The `TaskList` class represents a list of tasks in Duke.","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"public class TaskList implements Iterable\u003cAbstractTask\u003e {","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"    private final List\u003cAbstractTask\u003e tasks;","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `TaskList` with an empty list of tasks.","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"    public TaskList() {","lastModifiedDate":"2023-10-15"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"        this(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `TaskList` with the provided list of tasks.","lastModifiedDate":"2023-10-23"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"     * @param tasks The list of tasks to initialize the `TaskList`.","lastModifiedDate":"2023-10-23"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"    public TaskList(List\u003cAbstractTask\u003e tasks) {","lastModifiedDate":"2023-10-23"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        assert tasks !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2023-10-23"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"     * @param task The task to add to the list.","lastModifiedDate":"2023-10-23"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"    public void addTask(AbstractTask task) {","lastModifiedDate":"2023-10-23"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"        assert task !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"        tasks.add(task);","lastModifiedDate":"2023-10-15"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"     * Retrieves all tasks in the list.","lastModifiedDate":"2023-10-23"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"     * @return A list of all tasks in the task list.","lastModifiedDate":"2023-10-23"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"    public List\u003cAbstractTask\u003e getAllTasks() {","lastModifiedDate":"2023-10-23"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"        return tasks;","lastModifiedDate":"2023-10-15"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"     * Gets tasks scheduled for a specified date.","lastModifiedDate":"2023-10-23"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"     * @param date The date for which tasks are to be retrieved.","lastModifiedDate":"2023-10-23"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"     * @return A sorted map of task indices and corresponding tasks scheduled for the specified date.","lastModifiedDate":"2023-10-23"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"    public SortedMap\u003cInteger, AbstractTask\u003e getTasks(LocalDate date) {","lastModifiedDate":"2023-10-23"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"        assert date !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"        SortedMap\u003cInteger, AbstractTask\u003e result \u003d new TreeMap\u003c\u003e();","lastModifiedDate":"2023-10-23"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-10-22"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"            AbstractTask task \u003d tasks.get(i);","lastModifiedDate":"2023-10-23"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"            if (task instanceof Deadline) {","lastModifiedDate":"2023-10-22"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"                Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2023-10-22"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"                if (deadline.getBy().toLocalDate().equals(date)) {","lastModifiedDate":"2023-10-22"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"                    result.put(i, task);","lastModifiedDate":"2023-10-22"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"                }","lastModifiedDate":"2023-10-22"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"            } else if (task instanceof Event) {","lastModifiedDate":"2023-10-22"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"                Event event \u003d (Event) task;","lastModifiedDate":"2023-10-22"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"                if (event.getFrom().toLocalDate().minusDays(1).isBefore(date)","lastModifiedDate":"2023-10-22"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"                    \u0026\u0026 event.getTo().toLocalDate().plusDays(1).isAfter(date)) {","lastModifiedDate":"2023-10-22"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"                    result.put(i, task);","lastModifiedDate":"2023-10-22"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"                }","lastModifiedDate":"2023-10-22"},{"lineNumber":82,"author":{"gitId":"yongjiema"},"content":"            }","lastModifiedDate":"2023-10-22"},{"lineNumber":83,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-22"},{"lineNumber":84,"author":{"gitId":"yongjiema"},"content":"        return result;","lastModifiedDate":"2023-10-22"},{"lineNumber":85,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":86,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":87,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":88,"author":{"gitId":"yongjiema"},"content":"     * Retrieves a task at a specified index in the list.","lastModifiedDate":"2023-10-23"},{"lineNumber":89,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":90,"author":{"gitId":"yongjiema"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-10-23"},{"lineNumber":91,"author":{"gitId":"yongjiema"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-10-23"},{"lineNumber":92,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":93,"author":{"gitId":"yongjiema"},"content":"    public AbstractTask getTask(int index) {","lastModifiedDate":"2023-10-23"},{"lineNumber":94,"author":{"gitId":"yongjiema"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-10-15"},{"lineNumber":95,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":96,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":97,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":98,"author":{"gitId":"yongjiema"},"content":"     * Retrieves the last task in the list.","lastModifiedDate":"2023-10-23"},{"lineNumber":99,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":100,"author":{"gitId":"yongjiema"},"content":"     * @return The last task in the task list, or `null` if the list is empty.","lastModifiedDate":"2023-10-23"},{"lineNumber":101,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":102,"author":{"gitId":"yongjiema"},"content":"    public AbstractTask getLastTask() {","lastModifiedDate":"2023-10-23"},{"lineNumber":103,"author":{"gitId":"yongjiema"},"content":"        return !tasks.isEmpty() ? tasks.get(tasks.size() - 1) : null;","lastModifiedDate":"2023-10-17"},{"lineNumber":104,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":105,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":106,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":107,"author":{"gitId":"yongjiema"},"content":"     * Removes a task at the specified index from the list.","lastModifiedDate":"2023-10-31"},{"lineNumber":108,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":109,"author":{"gitId":"yongjiema"},"content":"     * @param index The index of the task to remove.","lastModifiedDate":"2023-10-31"},{"lineNumber":110,"author":{"gitId":"yongjiema"},"content":"     * @throws InvalidCommandArgsDukeException if the provided index is out of range.","lastModifiedDate":"2023-10-31"},{"lineNumber":111,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":112,"author":{"gitId":"yongjiema"},"content":"    public void removeTask(int index) throws InvalidCommandArgsDukeException {","lastModifiedDate":"2023-10-31"},{"lineNumber":113,"author":{"gitId":"yongjiema"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size();","lastModifiedDate":"2023-10-31"},{"lineNumber":114,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":115,"author":{"gitId":"yongjiema"},"content":"        onRemoveTask(index);","lastModifiedDate":"2023-10-31"},{"lineNumber":116,"author":{"gitId":"yongjiema"},"content":"        tasks.remove(index);","lastModifiedDate":"2023-10-31"},{"lineNumber":117,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":118,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":119,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":120,"author":{"gitId":"yongjiema"},"content":"     * Retrieves the number of tasks in the list.","lastModifiedDate":"2023-10-23"},{"lineNumber":121,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":122,"author":{"gitId":"yongjiema"},"content":"     * @return The number of tasks in the task list.","lastModifiedDate":"2023-10-23"},{"lineNumber":123,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":124,"author":{"gitId":"yongjiema"},"content":"    public int size() {","lastModifiedDate":"2023-10-15"},{"lineNumber":125,"author":{"gitId":"yongjiema"},"content":"        return tasks.size();","lastModifiedDate":"2023-10-15"},{"lineNumber":126,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":127,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":128,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-15"},{"lineNumber":129,"author":{"gitId":"yongjiema"},"content":"    public Iterator\u003cAbstractTask\u003e iterator() {","lastModifiedDate":"2023-10-23"},{"lineNumber":130,"author":{"gitId":"yongjiema"},"content":"        return tasks.iterator();","lastModifiedDate":"2023-10-15"},{"lineNumber":131,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":132,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":133,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":134,"author":{"gitId":"yongjiema"},"content":"     * Handles the adjustments needed when a task is to be removed from the list.","lastModifiedDate":"2023-10-31"},{"lineNumber":135,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":136,"author":{"gitId":"yongjiema"},"content":"     * @param taskIndex The index of the task to be removed.","lastModifiedDate":"2023-10-31"},{"lineNumber":137,"author":{"gitId":"yongjiema"},"content":"     * @throws InvalidCommandArgsDukeException if a task depends on the task to be removed.","lastModifiedDate":"2023-10-31"},{"lineNumber":138,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":139,"author":{"gitId":"yongjiema"},"content":"    private void onRemoveTask(int taskIndex) throws InvalidCommandArgsDukeException {","lastModifiedDate":"2023-10-31"},{"lineNumber":140,"author":{"gitId":"yongjiema"},"content":"        int deletingTaskNumber \u003d taskIndex + 1;","lastModifiedDate":"2023-10-31"},{"lineNumber":141,"author":{"gitId":"yongjiema"},"content":"        for (int i \u003d taskIndex + 1; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-10-31"},{"lineNumber":142,"author":{"gitId":"yongjiema"},"content":"            AbstractTask task \u003d getTask(i);","lastModifiedDate":"2023-10-31"},{"lineNumber":143,"author":{"gitId":"yongjiema"},"content":"            TaskAfterOption taskAfterOption \u003d task.getAfterOption();","lastModifiedDate":"2023-10-31"},{"lineNumber":144,"author":{"gitId":"yongjiema"},"content":"            if (taskAfterOption !\u003d null \u0026\u0026 taskAfterOption.isAfterTask()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":145,"author":{"gitId":"yongjiema"},"content":"                if (taskAfterOption.getTaskNumber() \u003d\u003d taskIndex + 1) {","lastModifiedDate":"2023-10-31"},{"lineNumber":146,"author":{"gitId":"yongjiema"},"content":"                    throw new InvalidCommandArgsDukeException(","lastModifiedDate":"2023-10-31"},{"lineNumber":147,"author":{"gitId":"yongjiema"},"content":"                        MessageFormat.format(","lastModifiedDate":"2023-10-31"},{"lineNumber":148,"author":{"gitId":"yongjiema"},"content":"                            \"The task #{0} depends on the task #{1}, please delete the task #{0} first.\",","lastModifiedDate":"2023-10-31"},{"lineNumber":149,"author":{"gitId":"yongjiema"},"content":"                            i + 1,","lastModifiedDate":"2023-10-31"},{"lineNumber":150,"author":{"gitId":"yongjiema"},"content":"                            deletingTaskNumber));","lastModifiedDate":"2023-10-31"},{"lineNumber":151,"author":{"gitId":"yongjiema"},"content":"                }","lastModifiedDate":"2023-10-31"},{"lineNumber":152,"author":{"gitId":"yongjiema"},"content":"                if (taskAfterOption.getTaskNumber() \u003e taskIndex + 1) {","lastModifiedDate":"2023-10-31"},{"lineNumber":153,"author":{"gitId":"yongjiema"},"content":"                    task.setAfterOption(new TaskAfterOption(taskAfterOption.getTaskNumber() - 1));","lastModifiedDate":"2023-10-31"},{"lineNumber":154,"author":{"gitId":"yongjiema"},"content":"                }","lastModifiedDate":"2023-10-31"},{"lineNumber":155,"author":{"gitId":"yongjiema"},"content":"            }","lastModifiedDate":"2023-10-31"},{"lineNumber":156,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":157,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":158,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"yongjiema":158}},{"path":"src/main/java/nus/duke/data/TaskOptionKey.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.data;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":" * The `TaskOptionKey` enum represents keys for task-related options.","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":" * These keys are used to identify and access specific task options in command input.","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"public enum TaskOptionKey {","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"    AFTER(\"after\"),","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"    BY(\"by\"),","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"    FROM(\"from\"),","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"    TO(\"to\");","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"    private final String optionKey;","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"     * Constructs a `TaskOptionKey` with the specified option key.","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     * @param optionKey The string representation of the option key.","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"    TaskOptionKey(String optionKey) {","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"        assert optionKey !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"        this.optionKey \u003d optionKey;","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    public String toString() {","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        return optionKey;","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"yongjiema":30}},{"path":"src/main/java/nus/duke/data/TaskSource.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.data;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":" * The `TaskSource` class represents a task source with a description and optional key-value options.","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":" * This class is used to parse and store task-related information from user input.","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"public class TaskSource {","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"    private final String description;","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"    private final HashMap\u003cString, String\u003e options;","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"     * Constructs a `TaskSource` with the given description.","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the task source. Must not be null.","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"    public TaskSource(String description) {","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"        this(description, new HashMap\u003c\u003e());","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"     * Constructs a `TaskSource` with the given description and options.","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the task source. Must not be null.","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"     * @param options     The key-value options associated with the task source. Must not be null.","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"    public TaskSource(String description, HashMap\u003cString, String\u003e options) {","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"        assert description !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"        assert options !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"        this.options \u003d options;","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"     * Gets the description of the task source.","lastModifiedDate":"2023-11-10"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"     * @return The description of the task source.","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"    public String getDescription() {","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"        return description;","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"     * Gets the key-value options associated with the task source.","lastModifiedDate":"2023-11-10"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"     * @return A HashMap containing the key-value options of the task source.","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"    public HashMap\u003cString, String\u003e getOptions() {","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"        return options;","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"     * Gets the value associated with a specific option key.","lastModifiedDate":"2023-11-10"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"     * @param optionKey The key of the option for which to retrieve the value. Must not be null.","lastModifiedDate":"2023-10-31"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"     * @return An Optional containing the value of the option if it exists, or an empty Optional if it doesn\u0027t.","lastModifiedDate":"2023-10-31"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"    public Optional\u003cString\u003e getOptionValue(String optionKey) {","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"        assert optionKey !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"        return options.containsKey(optionKey)","lastModifiedDate":"2023-10-31"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"            ? Optional.of(options.get(optionKey))","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"            : Optional.empty();","lastModifiedDate":"2023-10-31"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"     * Gets the value associated with a specific option key represented by a `TaskOptionKey` enum.","lastModifiedDate":"2023-11-10"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"     * @param optionKey The `TaskOptionKey` enum representing the option key to retrieve.","lastModifiedDate":"2023-10-31"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"     * @return An Optional containing the value of the option if it exists, or an empty Optional if it doesn\u0027t.","lastModifiedDate":"2023-10-31"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"    public Optional\u003cString\u003e getOptionValue(TaskOptionKey optionKey) {","lastModifiedDate":"2023-10-31"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"        assert optionKey !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"        return getOptionValue(optionKey.toString());","lastModifiedDate":"2023-10-31"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"yongjiema":81}},{"path":"src/main/java/nus/duke/data/tasks/AbstractTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.data.tasks;","lastModifiedDate":"2023-10-23"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import java.util.AbstractMap;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-10"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import java.util.Locale;","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import java.util.Map;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskAfterOption;","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskOptionKey;","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":" * The `AbstractTask` class is an abstract base class for tasks in Duke.","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":" * It provides common properties and methods for tasks, such as description, completion status,","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":" * and date/time formatting.","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"public abstract class AbstractTask {","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"    private static final String DATE_PATTERN_OUTPUT \u003d \"MMM dd yyyy\";","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"    private static final String TIME_PATTERN_OUTPUT \u003d \"h:mma\";","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"    private static final String DATETIME_PATTERN_OUTPUT \u003d DATE_PATTERN_OUTPUT + \" \" + TIME_PATTERN_OUTPUT;","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"     * The description of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    protected String description;","lastModifiedDate":"2023-10-23"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"     * The completion status of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-10-23"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"     * The task after option, indicating what this task should be scheduled after.","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"    protected TaskAfterOption afterOption;","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"     * An array list to store attributes associated with the task, each represented as a key-value pair.","lastModifiedDate":"2023-10-31"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"     * The attributes provide additional information or metadata about the task.","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"    protected ArrayList\u003cMap.Entry\u003cTaskOptionKey, AttributeValueGetter\u003e\u003e attributes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `AbstractTask` with the provided description.","lastModifiedDate":"2023-10-23"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"    protected AbstractTask(String description) {","lastModifiedDate":"2023-10-23"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"        this(description, false);","lastModifiedDate":"2023-10-23"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `AbstractTask` with the provided description and completion status.","lastModifiedDate":"2023-10-23"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"     * @param isDone      The completion status of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"    protected AbstractTask(String description, boolean isDone) {","lastModifiedDate":"2023-10-23"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"        this(description, isDone, null);","lastModifiedDate":"2023-11-10"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-11-10"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `AbstractTask` with the provided description, completion status,","lastModifiedDate":"2023-11-10"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"     * and an optional afterOption.","lastModifiedDate":"2023-11-10"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-11-10"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the task. Must not be null.","lastModifiedDate":"2023-11-10"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"     * @param isDone      The completion status of the task.","lastModifiedDate":"2023-11-10"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"     * @param afterOption An optional afterOption associated with the task.","lastModifiedDate":"2023-11-10"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"     *                    It represents additional data relevant to the task execution.","lastModifiedDate":"2023-11-10"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"     *                    Use null if no afterOption is provided.","lastModifiedDate":"2023-11-10"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-11-10"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"    protected AbstractTask(String description, boolean isDone, TaskAfterOption afterOption) {","lastModifiedDate":"2023-11-10"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"        assert description !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-10-23"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-10-23"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"        this.afterOption \u003d afterOption;","lastModifiedDate":"2023-11-10"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"        addAttribute(TaskOptionKey.AFTER, this::getAfterOptionString);","lastModifiedDate":"2023-10-31"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":82,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":83,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":84,"author":{"gitId":"yongjiema"},"content":"     * Formats a `LocalDateTime` object as a string.","lastModifiedDate":"2023-10-23"},{"lineNumber":85,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":86,"author":{"gitId":"yongjiema"},"content":"     * @param input The `LocalDateTime` object to format.","lastModifiedDate":"2023-10-23"},{"lineNumber":87,"author":{"gitId":"yongjiema"},"content":"     * @return The formatted date and time string.","lastModifiedDate":"2023-10-23"},{"lineNumber":88,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":89,"author":{"gitId":"yongjiema"},"content":"    protected static String formatLocalDateTime(LocalDateTime input) {","lastModifiedDate":"2023-10-23"},{"lineNumber":90,"author":{"gitId":"yongjiema"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":91,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":92,"author":{"gitId":"yongjiema"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(DATETIME_PATTERN_OUTPUT, Locale.ROOT);","lastModifiedDate":"2023-10-23"},{"lineNumber":93,"author":{"gitId":"yongjiema"},"content":"        return input.format(dateTimeFormatter);","lastModifiedDate":"2023-10-23"},{"lineNumber":94,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":95,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":96,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":97,"author":{"gitId":"yongjiema"},"content":"     * Formats a `LocalDateTime` object as a string relative to a reference time.","lastModifiedDate":"2023-10-23"},{"lineNumber":98,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":99,"author":{"gitId":"yongjiema"},"content":"     * @param referenceTime The reference time used to determine the format.","lastModifiedDate":"2023-10-23"},{"lineNumber":100,"author":{"gitId":"yongjiema"},"content":"     * @param input         The `LocalDateTime` object to format.","lastModifiedDate":"2023-10-23"},{"lineNumber":101,"author":{"gitId":"yongjiema"},"content":"     * @return The formatted date and time string.","lastModifiedDate":"2023-10-23"},{"lineNumber":102,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":103,"author":{"gitId":"yongjiema"},"content":"    protected static String formatRelativeLocalDateTime(LocalDateTime referenceTime, LocalDateTime input) {","lastModifiedDate":"2023-10-23"},{"lineNumber":104,"author":{"gitId":"yongjiema"},"content":"        assert referenceTime !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":105,"author":{"gitId":"yongjiema"},"content":"        assert input !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":106,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":107,"author":{"gitId":"yongjiema"},"content":"        String pattern \u003d referenceTime.toLocalDate().equals(input.toLocalDate())","lastModifiedDate":"2023-10-23"},{"lineNumber":108,"author":{"gitId":"yongjiema"},"content":"            ? TIME_PATTERN_OUTPUT","lastModifiedDate":"2023-10-23"},{"lineNumber":109,"author":{"gitId":"yongjiema"},"content":"            : DATETIME_PATTERN_OUTPUT;","lastModifiedDate":"2023-10-23"},{"lineNumber":110,"author":{"gitId":"yongjiema"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(pattern, Locale.ROOT);","lastModifiedDate":"2023-10-23"},{"lineNumber":111,"author":{"gitId":"yongjiema"},"content":"        return input.format(dateTimeFormatter);","lastModifiedDate":"2023-10-23"},{"lineNumber":112,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":113,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":114,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":115,"author":{"gitId":"yongjiema"},"content":"     * Formats the task after option as a string representation.","lastModifiedDate":"2023-10-31"},{"lineNumber":116,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":117,"author":{"gitId":"yongjiema"},"content":"     * @param afterOption The task after option to be formatted.","lastModifiedDate":"2023-10-31"},{"lineNumber":118,"author":{"gitId":"yongjiema"},"content":"     * @return A string representation of the after option, which could be a task number or a date and time.","lastModifiedDate":"2023-10-31"},{"lineNumber":119,"author":{"gitId":"yongjiema"},"content":"     * @throws IllegalArgumentException if the task after option is invalid or unsupported.","lastModifiedDate":"2023-10-31"},{"lineNumber":120,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":121,"author":{"gitId":"yongjiema"},"content":"    protected static String formatAfterOption(TaskAfterOption afterOption) {","lastModifiedDate":"2023-10-31"},{"lineNumber":122,"author":{"gitId":"yongjiema"},"content":"        assert afterOption !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":123,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":124,"author":{"gitId":"yongjiema"},"content":"        if (afterOption.isAfterTask()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":125,"author":{"gitId":"yongjiema"},"content":"            return String.valueOf(afterOption.getTaskNumber());","lastModifiedDate":"2023-10-31"},{"lineNumber":126,"author":{"gitId":"yongjiema"},"content":"        } else if (afterOption.isAfterTime()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":127,"author":{"gitId":"yongjiema"},"content":"            return formatLocalDateTime(afterOption.getDateTime());","lastModifiedDate":"2023-10-31"},{"lineNumber":128,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":129,"author":{"gitId":"yongjiema"},"content":"        throw new IllegalArgumentException(\"Invalid task after option.\");","lastModifiedDate":"2023-10-31"},{"lineNumber":130,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":131,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":132,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":133,"author":{"gitId":"yongjiema"},"content":"     * Gets the type of the task.","lastModifiedDate":"2023-10-31"},{"lineNumber":134,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":135,"author":{"gitId":"yongjiema"},"content":"     * @return A string representing the type of the task.","lastModifiedDate":"2023-10-31"},{"lineNumber":136,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":137,"author":{"gitId":"yongjiema"},"content":"    public abstract String getType();","lastModifiedDate":"2023-10-31"},{"lineNumber":138,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":139,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":140,"author":{"gitId":"yongjiema"},"content":"     * Gets the description of the task.","lastModifiedDate":"2023-10-31"},{"lineNumber":141,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":142,"author":{"gitId":"yongjiema"},"content":"     * @return The description of the task.","lastModifiedDate":"2023-10-31"},{"lineNumber":143,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":144,"author":{"gitId":"yongjiema"},"content":"    public String getDescription() {","lastModifiedDate":"2023-10-31"},{"lineNumber":145,"author":{"gitId":"yongjiema"},"content":"        return description;","lastModifiedDate":"2023-10-31"},{"lineNumber":146,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":147,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":148,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":149,"author":{"gitId":"yongjiema"},"content":"     * Sets the description of the task.","lastModifiedDate":"2023-10-31"},{"lineNumber":150,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":151,"author":{"gitId":"yongjiema"},"content":"     * @param description The new description for the task.","lastModifiedDate":"2023-10-31"},{"lineNumber":152,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":153,"author":{"gitId":"yongjiema"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2023-10-31"},{"lineNumber":154,"author":{"gitId":"yongjiema"},"content":"        assert description !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":155,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":156,"author":{"gitId":"yongjiema"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-10-31"},{"lineNumber":157,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":158,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":159,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":160,"author":{"gitId":"yongjiema"},"content":"     * Gets the completion status of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":161,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":162,"author":{"gitId":"yongjiema"},"content":"     * @return `true` if the task is completed; `false` otherwise.","lastModifiedDate":"2023-10-23"},{"lineNumber":163,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":164,"author":{"gitId":"yongjiema"},"content":"    public boolean getDone() {","lastModifiedDate":"2023-10-23"},{"lineNumber":165,"author":{"gitId":"yongjiema"},"content":"        return isDone;","lastModifiedDate":"2023-10-23"},{"lineNumber":166,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":167,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":168,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":169,"author":{"gitId":"yongjiema"},"content":"     * Sets the completion status of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":170,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":171,"author":{"gitId":"yongjiema"},"content":"     * @param done `true` if the task is completed; `false` otherwise.","lastModifiedDate":"2023-10-23"},{"lineNumber":172,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":173,"author":{"gitId":"yongjiema"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-10-23"},{"lineNumber":174,"author":{"gitId":"yongjiema"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-10-23"},{"lineNumber":175,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":176,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":177,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":178,"author":{"gitId":"yongjiema"},"content":"     * Gets the task after option associated with this task.","lastModifiedDate":"2023-10-31"},{"lineNumber":179,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":180,"author":{"gitId":"yongjiema"},"content":"     * @return The task after option.","lastModifiedDate":"2023-10-31"},{"lineNumber":181,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":182,"author":{"gitId":"yongjiema"},"content":"    public TaskAfterOption getAfterOption() {","lastModifiedDate":"2023-10-31"},{"lineNumber":183,"author":{"gitId":"yongjiema"},"content":"        return afterOption;","lastModifiedDate":"2023-10-31"},{"lineNumber":184,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":185,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":186,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":187,"author":{"gitId":"yongjiema"},"content":"     * Sets the task after option for this task.","lastModifiedDate":"2023-10-31"},{"lineNumber":188,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":189,"author":{"gitId":"yongjiema"},"content":"     * @param afterOption The task after option to be set, specifying when this task should be scheduled in relation","lastModifiedDate":"2023-10-31"},{"lineNumber":190,"author":{"gitId":"yongjiema"},"content":"     *                    to another task or a specific time.","lastModifiedDate":"2023-10-31"},{"lineNumber":191,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":192,"author":{"gitId":"yongjiema"},"content":"    public void setAfterOption(TaskAfterOption afterOption) {","lastModifiedDate":"2023-10-31"},{"lineNumber":193,"author":{"gitId":"yongjiema"},"content":"        this.afterOption \u003d afterOption;","lastModifiedDate":"2023-10-31"},{"lineNumber":194,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":195,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":196,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":197,"author":{"gitId":"yongjiema"},"content":"     * Gets an icon representing the completion status of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":198,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":199,"author":{"gitId":"yongjiema"},"content":"     * @return \"X\" if the task is completed; a space (\" \") if the task is not completed.","lastModifiedDate":"2023-10-23"},{"lineNumber":200,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":201,"author":{"gitId":"yongjiema"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-10-23"},{"lineNumber":202,"author":{"gitId":"yongjiema"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2023-10-23"},{"lineNumber":203,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":204,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":205,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":206,"author":{"gitId":"yongjiema"},"content":"     * Retrieves a string representation of the task after option, if available.","lastModifiedDate":"2023-10-31"},{"lineNumber":207,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":208,"author":{"gitId":"yongjiema"},"content":"     * @return An optional string representing the task after option.","lastModifiedDate":"2023-10-31"},{"lineNumber":209,"author":{"gitId":"yongjiema"},"content":"     * @throws IllegalStateException if the task after option is invalid or unsupported.","lastModifiedDate":"2023-10-31"},{"lineNumber":210,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":211,"author":{"gitId":"yongjiema"},"content":"    public Optional\u003cString\u003e getAfterOptionString() {","lastModifiedDate":"2023-10-31"},{"lineNumber":212,"author":{"gitId":"yongjiema"},"content":"        if (afterOption \u003d\u003d null) {","lastModifiedDate":"2023-10-31"},{"lineNumber":213,"author":{"gitId":"yongjiema"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-31"},{"lineNumber":214,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":215,"author":{"gitId":"yongjiema"},"content":"        if (afterOption.isAfterTask()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":216,"author":{"gitId":"yongjiema"},"content":"            return Optional.of(String.valueOf(afterOption.getTaskNumber()));","lastModifiedDate":"2023-10-31"},{"lineNumber":217,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":218,"author":{"gitId":"yongjiema"},"content":"        if (afterOption.isAfterTime()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":219,"author":{"gitId":"yongjiema"},"content":"            return Optional.of(formatLocalDateTime(afterOption.getDateTime()));","lastModifiedDate":"2023-10-31"},{"lineNumber":220,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":221,"author":{"gitId":"yongjiema"},"content":"        throw new IllegalStateException(\"Invalid task after option.\");","lastModifiedDate":"2023-10-31"},{"lineNumber":222,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":223,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":224,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":225,"author":{"gitId":"yongjiema"},"content":"     * Adds a new attribute to the task, represented as a key-value pair, to provide additional information or metadata.","lastModifiedDate":"2023-10-31"},{"lineNumber":226,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":227,"author":{"gitId":"yongjiema"},"content":"     * @param attributeKey         The key for the attribute.","lastModifiedDate":"2023-10-31"},{"lineNumber":228,"author":{"gitId":"yongjiema"},"content":"     * @param attributeValueGetter The function to get the attribute value.","lastModifiedDate":"2023-10-31"},{"lineNumber":229,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":230,"author":{"gitId":"yongjiema"},"content":"    protected void addAttribute(TaskOptionKey attributeKey, AttributeValueGetter attributeValueGetter) {","lastModifiedDate":"2023-10-31"},{"lineNumber":231,"author":{"gitId":"yongjiema"},"content":"        assert attributeValueGetter !\u003d null;","lastModifiedDate":"2023-11-05"},{"lineNumber":232,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":233,"author":{"gitId":"yongjiema"},"content":"        this.attributes.add(new AbstractMap.SimpleEntry\u003c\u003e(attributeKey, attributeValueGetter));","lastModifiedDate":"2023-10-31"},{"lineNumber":234,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":235,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":236,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":237,"author":{"gitId":"yongjiema"},"content":"     * Adds a new attribute to the task at a specified index, represented as a key-value pair, to provide additional","lastModifiedDate":"2023-10-31"},{"lineNumber":238,"author":{"gitId":"yongjiema"},"content":"     * information or metadata.","lastModifiedDate":"2023-10-31"},{"lineNumber":239,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":240,"author":{"gitId":"yongjiema"},"content":"     * @param index                The index at which to add the attribute.","lastModifiedDate":"2023-10-31"},{"lineNumber":241,"author":{"gitId":"yongjiema"},"content":"     * @param attributeKey         The key for the attribute.","lastModifiedDate":"2023-10-31"},{"lineNumber":242,"author":{"gitId":"yongjiema"},"content":"     * @param attributeValueGetter The function to get the attribute value.","lastModifiedDate":"2023-10-31"},{"lineNumber":243,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":244,"author":{"gitId":"yongjiema"},"content":"    protected void addAttribute(int index, TaskOptionKey attributeKey, AttributeValueGetter attributeValueGetter) {","lastModifiedDate":"2023-10-31"},{"lineNumber":245,"author":{"gitId":"yongjiema"},"content":"        assert attributeValueGetter !\u003d null;","lastModifiedDate":"2023-11-05"},{"lineNumber":246,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":247,"author":{"gitId":"yongjiema"},"content":"        this.attributes.add(index, new AbstractMap.SimpleEntry\u003c\u003e(attributeKey, attributeValueGetter));","lastModifiedDate":"2023-10-31"},{"lineNumber":248,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":249,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":250,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":251,"author":{"gitId":"yongjiema"},"content":"     * Encodes the task as a string for storage.","lastModifiedDate":"2023-10-23"},{"lineNumber":252,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":253,"author":{"gitId":"yongjiema"},"content":"     * @return The encoded representation of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":254,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":255,"author":{"gitId":"yongjiema"},"content":"    public String encode() {","lastModifiedDate":"2023-10-31"},{"lineNumber":256,"author":{"gitId":"yongjiema"},"content":"        String encodedAfter \u003d encodeAfterOption();","lastModifiedDate":"2023-10-31"},{"lineNumber":257,"author":{"gitId":"yongjiema"},"content":"        return String.format(\"%s | %s | %s | %s\", getType(), encodeIsDone(), description, encodedAfter);","lastModifiedDate":"2023-10-31"},{"lineNumber":258,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":259,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":260,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-23"},{"lineNumber":261,"author":{"gitId":"yongjiema"},"content":"    public String toString() {","lastModifiedDate":"2023-10-23"},{"lineNumber":262,"author":{"gitId":"yongjiema"},"content":"        StringBuilder attributesBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-10-31"},{"lineNumber":263,"author":{"gitId":"yongjiema"},"content":"        if (!attributes.isEmpty()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":264,"author":{"gitId":"yongjiema"},"content":"            attributes.forEach(entry -\u003e {","lastModifiedDate":"2023-10-31"},{"lineNumber":265,"author":{"gitId":"yongjiema"},"content":"                TaskOptionKey attributeKey \u003d entry.getKey();","lastModifiedDate":"2023-10-31"},{"lineNumber":266,"author":{"gitId":"yongjiema"},"content":"                AttributeValueGetter attributeValueGetter \u003d entry.getValue();","lastModifiedDate":"2023-10-31"},{"lineNumber":267,"author":{"gitId":"yongjiema"},"content":"                Optional\u003cString\u003e optionalAttributeValue \u003d attributeValueGetter.get();","lastModifiedDate":"2023-10-31"},{"lineNumber":268,"author":{"gitId":"yongjiema"},"content":"                if (optionalAttributeValue.isEmpty()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":269,"author":{"gitId":"yongjiema"},"content":"                    return;","lastModifiedDate":"2023-10-31"},{"lineNumber":270,"author":{"gitId":"yongjiema"},"content":"                }","lastModifiedDate":"2023-10-31"},{"lineNumber":271,"author":{"gitId":"yongjiema"},"content":"                if (attributesBuilder.length() !\u003d 0) {","lastModifiedDate":"2023-10-31"},{"lineNumber":272,"author":{"gitId":"yongjiema"},"content":"                    attributesBuilder.append(\" \");","lastModifiedDate":"2023-10-31"},{"lineNumber":273,"author":{"gitId":"yongjiema"},"content":"                }","lastModifiedDate":"2023-10-31"},{"lineNumber":274,"author":{"gitId":"yongjiema"},"content":"                attributesBuilder.append(String.format(\"%s: %s\", attributeKey, optionalAttributeValue.get()));","lastModifiedDate":"2023-10-31"},{"lineNumber":275,"author":{"gitId":"yongjiema"},"content":"            });","lastModifiedDate":"2023-10-31"},{"lineNumber":276,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":277,"author":{"gitId":"yongjiema"},"content":"        String base \u003d String.format(\"[%s][%s] %s\", getType(), getStatusIcon(), getDescription());","lastModifiedDate":"2023-10-31"},{"lineNumber":278,"author":{"gitId":"yongjiema"},"content":"        return attributesBuilder.length() \u003e 0 ? String.format(\"%s (%s)\", base, attributesBuilder) : base;","lastModifiedDate":"2023-10-31"},{"lineNumber":279,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":280,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":281,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":282,"author":{"gitId":"yongjiema"},"content":"     * Encodes the completion status as a string for storage.","lastModifiedDate":"2023-10-23"},{"lineNumber":283,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":284,"author":{"gitId":"yongjiema"},"content":"     * @return \"1\" if the task is completed; \"0\" if the task is not completed.","lastModifiedDate":"2023-10-23"},{"lineNumber":285,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":286,"author":{"gitId":"yongjiema"},"content":"    protected String encodeIsDone() {","lastModifiedDate":"2023-10-23"},{"lineNumber":287,"author":{"gitId":"yongjiema"},"content":"        return isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-10-23"},{"lineNumber":288,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-23"},{"lineNumber":289,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":290,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":291,"author":{"gitId":"yongjiema"},"content":"     * Encodes the task after option as a string for storage.","lastModifiedDate":"2023-10-31"},{"lineNumber":292,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":293,"author":{"gitId":"yongjiema"},"content":"     * @return A string representation of the task after option.","lastModifiedDate":"2023-10-31"},{"lineNumber":294,"author":{"gitId":"yongjiema"},"content":"     * @throws RuntimeException if the task after option is invalid or unsupported.","lastModifiedDate":"2023-10-31"},{"lineNumber":295,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":296,"author":{"gitId":"yongjiema"},"content":"    protected String encodeAfterOption() {","lastModifiedDate":"2023-10-31"},{"lineNumber":297,"author":{"gitId":"yongjiema"},"content":"        if (afterOption \u003d\u003d null) {","lastModifiedDate":"2023-10-31"},{"lineNumber":298,"author":{"gitId":"yongjiema"},"content":"            return \"\";","lastModifiedDate":"2023-10-31"},{"lineNumber":299,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":300,"author":{"gitId":"yongjiema"},"content":"        if (afterOption.isAfterTask()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":301,"author":{"gitId":"yongjiema"},"content":"            return String.valueOf(afterOption.getTaskNumber());","lastModifiedDate":"2023-10-31"},{"lineNumber":302,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":303,"author":{"gitId":"yongjiema"},"content":"        if (afterOption.isAfterTime()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":304,"author":{"gitId":"yongjiema"},"content":"            return afterOption.getDateTime().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);","lastModifiedDate":"2023-10-31"},{"lineNumber":305,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":306,"author":{"gitId":"yongjiema"},"content":"        throw new RuntimeException(\"Invalid task after option.\");","lastModifiedDate":"2023-10-31"},{"lineNumber":307,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":308,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":309,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-11-10"},{"lineNumber":310,"author":{"gitId":"yongjiema"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-11-10"},{"lineNumber":311,"author":{"gitId":"yongjiema"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2023-11-10"},{"lineNumber":312,"author":{"gitId":"yongjiema"},"content":"            return true;","lastModifiedDate":"2023-11-10"},{"lineNumber":313,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-10"},{"lineNumber":314,"author":{"gitId":"yongjiema"},"content":"        if (!(o instanceof AbstractTask)) {","lastModifiedDate":"2023-11-10"},{"lineNumber":315,"author":{"gitId":"yongjiema"},"content":"            return false;","lastModifiedDate":"2023-11-10"},{"lineNumber":316,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-10"},{"lineNumber":317,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":318,"author":{"gitId":"yongjiema"},"content":"        AbstractTask task \u003d (AbstractTask) o;","lastModifiedDate":"2023-11-10"},{"lineNumber":319,"author":{"gitId":"yongjiema"},"content":"        return description.equals(task.getDescription())","lastModifiedDate":"2023-11-10"},{"lineNumber":320,"author":{"gitId":"yongjiema"},"content":"            \u0026\u0026 isDone \u003d\u003d task.getDone()","lastModifiedDate":"2023-11-10"},{"lineNumber":321,"author":{"gitId":"yongjiema"},"content":"            \u0026\u0026 (afterOption !\u003d null ? afterOption.equals(task.getAfterOption()) : task.getAfterOption() \u003d\u003d null);","lastModifiedDate":"2023-11-10"},{"lineNumber":322,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":323,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":324,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-11-10"},{"lineNumber":325,"author":{"gitId":"yongjiema"},"content":"    public int hashCode() {","lastModifiedDate":"2023-11-10"},{"lineNumber":326,"author":{"gitId":"yongjiema"},"content":"        return Arrays.hashCode(new Object[] {description, isDone, afterOption});","lastModifiedDate":"2023-11-10"},{"lineNumber":327,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":328,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":329,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":330,"author":{"gitId":"yongjiema"},"content":"     * A functional interface to get an attribute\u0027s value as an optional string.","lastModifiedDate":"2023-10-31"},{"lineNumber":331,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":332,"author":{"gitId":"yongjiema"},"content":"    @FunctionalInterface","lastModifiedDate":"2023-10-31"},{"lineNumber":333,"author":{"gitId":"yongjiema"},"content":"    protected interface AttributeValueGetter {","lastModifiedDate":"2023-10-31"},{"lineNumber":334,"author":{"gitId":"yongjiema"},"content":"        /**","lastModifiedDate":"2023-10-31"},{"lineNumber":335,"author":{"gitId":"yongjiema"},"content":"         * Gets the attribute value as an optional string.","lastModifiedDate":"2023-11-10"},{"lineNumber":336,"author":{"gitId":"yongjiema"},"content":"         *","lastModifiedDate":"2023-10-31"},{"lineNumber":337,"author":{"gitId":"yongjiema"},"content":"         * @return An optional string representing the attribute value.","lastModifiedDate":"2023-10-31"},{"lineNumber":338,"author":{"gitId":"yongjiema"},"content":"         */","lastModifiedDate":"2023-10-31"},{"lineNumber":339,"author":{"gitId":"yongjiema"},"content":"        Optional\u003cString\u003e get();","lastModifiedDate":"2023-10-31"},{"lineNumber":340,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":341,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-23"}],"authorContributionMap":{"yongjiema":341}},{"path":"src/main/java/nus/duke/data/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.data.tasks;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-22"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-22"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-10"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskAfterOption;","lastModifiedDate":"2023-11-10"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskOptionKey;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":" * The `Deadline` class represents a task with a deadline in Duke.","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":" * It extends the `AbstractTask` class and includes a deadline date and time.","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"public class Deadline extends AbstractTask {","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"     * The deadline date and time.","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"    protected final LocalDateTime by;","lastModifiedDate":"2023-10-22"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `Deadline` task with the provided description and deadline date and time.","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"     * @param by          The deadline date and time.","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-10-22"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"        this(description, by, false);","lastModifiedDate":"2023-10-15"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `Deadline` task with the provided description, deadline date and time, and completion status.","lastModifiedDate":"2023-10-23"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"     * @param by          The deadline date and time.","lastModifiedDate":"2023-10-23"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"     * @param isDone      The completion status of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"    public Deadline(String description, LocalDateTime by, boolean isDone) {","lastModifiedDate":"2023-10-22"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"        this(description, by, isDone, null);","lastModifiedDate":"2023-11-10"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-11-10"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `Deadline` task with the provided description, deadline date and time,","lastModifiedDate":"2023-11-10"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"     * completion status, and an optional afterOption.","lastModifiedDate":"2023-11-10"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-11-10"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-11-10"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"     * @param by          The deadline date and time. Must not be null.","lastModifiedDate":"2023-11-10"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"     * @param isDone      The completion status of the task.","lastModifiedDate":"2023-11-10"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"     * @param afterOption An optional afterOption associated with the task.","lastModifiedDate":"2023-11-10"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"     *                    It represents additional data relevant to the task execution.","lastModifiedDate":"2023-11-10"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"     *                    Use null if no afterOption is provided.","lastModifiedDate":"2023-11-10"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-11-10"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"    public Deadline(String description, LocalDateTime by, boolean isDone, TaskAfterOption afterOption) {","lastModifiedDate":"2023-11-10"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"        super(description, isDone, afterOption);","lastModifiedDate":"2023-11-10"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"        assert by !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-09-18"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"        addAttribute(0, TaskOptionKey.BY, () -\u003e Optional.of(formatLocalDateTime(by)));","lastModifiedDate":"2023-10-31"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"    public String getType() {","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"        return \"D\";","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"     * Gets the deadline date and time.","lastModifiedDate":"2023-10-23"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"     * @return The deadline date and time.","lastModifiedDate":"2023-10-23"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2023-10-22"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"        return by;","lastModifiedDate":"2023-10-22"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-11-10"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-11-10"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2023-11-10"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"            return true;","lastModifiedDate":"2023-11-10"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-10"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"        if (!(o instanceof Deadline)) {","lastModifiedDate":"2023-11-10"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"            return false;","lastModifiedDate":"2023-11-10"},{"lineNumber":82,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-10"},{"lineNumber":83,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":84,"author":{"gitId":"yongjiema"},"content":"        Deadline deadline \u003d (Deadline) o;","lastModifiedDate":"2023-11-10"},{"lineNumber":85,"author":{"gitId":"yongjiema"},"content":"        return super.equals(o) \u0026\u0026 by.equals(deadline.getBy());","lastModifiedDate":"2023-11-10"},{"lineNumber":86,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":87,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":88,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-11-10"},{"lineNumber":89,"author":{"gitId":"yongjiema"},"content":"    public int hashCode() {","lastModifiedDate":"2023-11-10"},{"lineNumber":90,"author":{"gitId":"yongjiema"},"content":"        return Arrays.hashCode(new Object[] {super.hashCode(), by});","lastModifiedDate":"2023-11-10"},{"lineNumber":91,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":92,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":93,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-15"},{"lineNumber":94,"author":{"gitId":"yongjiema"},"content":"    public String encode() {","lastModifiedDate":"2023-10-15"},{"lineNumber":95,"author":{"gitId":"yongjiema"},"content":"        String encodedBy \u003d by.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);","lastModifiedDate":"2023-10-22"},{"lineNumber":96,"author":{"gitId":"yongjiema"},"content":"        String encodedAfter \u003d encodeAfterOption();","lastModifiedDate":"2023-10-31"},{"lineNumber":97,"author":{"gitId":"yongjiema"},"content":"        return String.format(\"%s | %s | %s | %s | %s\", getType(), encodeIsDone(), description, encodedBy, encodedAfter);","lastModifiedDate":"2023-10-31"},{"lineNumber":98,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":99,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"yongjiema":99}},{"path":"src/main/java/nus/duke/data/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.data.tasks;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-22"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-22"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-11-10"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskAfterOption;","lastModifiedDate":"2023-11-10"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskOptionKey;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":" * The `Event` class represents an event task with a specified start and end time in Duke.","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":" * It extends the `AbstractTask` class and includes both the event\u0027s start and end times.","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"public class Event extends AbstractTask {","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"     * The start time of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"    protected final LocalDateTime from;","lastModifiedDate":"2023-10-22"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     * The end time of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"    protected final LocalDateTime to;","lastModifiedDate":"2023-10-22"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `Event` task with the provided description, start time, and end time.","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"     * @param from        The start time of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"     * @param to          The end time of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-10-22"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"        this(description, from, to, false);","lastModifiedDate":"2023-10-15"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `Event` task with the provided description, start time, end time, and completion status.","lastModifiedDate":"2023-10-23"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"     * @param from        The start time of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"     * @param to          The end time of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"     * @param isDone      The completion status of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to, boolean isDone) {","lastModifiedDate":"2023-10-22"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"        super(description, isDone);","lastModifiedDate":"2023-10-15"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"        assert from !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"        assert to !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-09-18"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"        addAttribute(0, TaskOptionKey.FROM, () -\u003e Optional.of(formatLocalDateTime(from)));","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"        addAttribute(1, TaskOptionKey.TO, () -\u003e Optional.of(formatRelativeLocalDateTime(from, to)));","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-11-10"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `Event` task with the provided description, start time, end time,","lastModifiedDate":"2023-11-10"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"     * completion status, and an optional afterOption.","lastModifiedDate":"2023-11-10"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-11-10"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-11-10"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"     * @param from        The start time of the event. Must not be null.","lastModifiedDate":"2023-11-10"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"     * @param to          The end time of the event. Must not be null.","lastModifiedDate":"2023-11-10"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"     * @param isDone      The completion status of the event.","lastModifiedDate":"2023-11-10"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"     * @param afterOption An optional afterOption associated with the event.","lastModifiedDate":"2023-11-10"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"     *                    It represents additional data relevant to the event execution.","lastModifiedDate":"2023-11-10"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"     *                    Use null if no afterOption is provided.","lastModifiedDate":"2023-11-10"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-11-10"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to, boolean isDone,","lastModifiedDate":"2023-11-10"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"                 TaskAfterOption afterOption) {","lastModifiedDate":"2023-11-10"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"        super(description, isDone, afterOption);","lastModifiedDate":"2023-11-10"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"        assert from !\u003d null;","lastModifiedDate":"2023-11-10"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"        assert to !\u003d null;","lastModifiedDate":"2023-11-10"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-11-10"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-11-10"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"        addAttribute(0, TaskOptionKey.FROM, () -\u003e Optional.of(formatLocalDateTime(from)));","lastModifiedDate":"2023-11-10"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"        addAttribute(1, TaskOptionKey.TO, () -\u003e Optional.of(formatRelativeLocalDateTime(from, to)));","lastModifiedDate":"2023-11-10"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":82,"author":{"gitId":"yongjiema"},"content":"    public String getType() {","lastModifiedDate":"2023-10-31"},{"lineNumber":83,"author":{"gitId":"yongjiema"},"content":"        return \"E\";","lastModifiedDate":"2023-10-31"},{"lineNumber":84,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":85,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":86,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":87,"author":{"gitId":"yongjiema"},"content":"     * Gets the start time of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":88,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":89,"author":{"gitId":"yongjiema"},"content":"     * @return The start time of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":90,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":91,"author":{"gitId":"yongjiema"},"content":"    public LocalDateTime getFrom() {","lastModifiedDate":"2023-10-22"},{"lineNumber":92,"author":{"gitId":"yongjiema"},"content":"        return from;","lastModifiedDate":"2023-10-22"},{"lineNumber":93,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":94,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":95,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":96,"author":{"gitId":"yongjiema"},"content":"     * Gets the end time of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":97,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":98,"author":{"gitId":"yongjiema"},"content":"     * @return The end time of the event.","lastModifiedDate":"2023-10-23"},{"lineNumber":99,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":100,"author":{"gitId":"yongjiema"},"content":"    public LocalDateTime getTo() {","lastModifiedDate":"2023-10-22"},{"lineNumber":101,"author":{"gitId":"yongjiema"},"content":"        return to;","lastModifiedDate":"2023-10-22"},{"lineNumber":102,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":103,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":104,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-11-10"},{"lineNumber":105,"author":{"gitId":"yongjiema"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-11-10"},{"lineNumber":106,"author":{"gitId":"yongjiema"},"content":"        if (o \u003d\u003d this) {","lastModifiedDate":"2023-11-10"},{"lineNumber":107,"author":{"gitId":"yongjiema"},"content":"            return true;","lastModifiedDate":"2023-11-10"},{"lineNumber":108,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-10"},{"lineNumber":109,"author":{"gitId":"yongjiema"},"content":"        if (!(o instanceof Event)) {","lastModifiedDate":"2023-11-10"},{"lineNumber":110,"author":{"gitId":"yongjiema"},"content":"            return false;","lastModifiedDate":"2023-11-10"},{"lineNumber":111,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-10"},{"lineNumber":112,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":113,"author":{"gitId":"yongjiema"},"content":"        Event event \u003d (Event) o;","lastModifiedDate":"2023-11-10"},{"lineNumber":114,"author":{"gitId":"yongjiema"},"content":"        return super.equals(o) \u0026\u0026 from.equals(event.getFrom()) \u0026\u0026 to.equals(event.getTo());","lastModifiedDate":"2023-11-10"},{"lineNumber":115,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":116,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":117,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-11-10"},{"lineNumber":118,"author":{"gitId":"yongjiema"},"content":"    public int hashCode() {","lastModifiedDate":"2023-11-10"},{"lineNumber":119,"author":{"gitId":"yongjiema"},"content":"        return Arrays.hashCode(new Object[] {super.hashCode(), getFrom(), getTo()});","lastModifiedDate":"2023-11-10"},{"lineNumber":120,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":121,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":122,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-15"},{"lineNumber":123,"author":{"gitId":"yongjiema"},"content":"    public String encode() {","lastModifiedDate":"2023-10-15"},{"lineNumber":124,"author":{"gitId":"yongjiema"},"content":"        String encodedFrom \u003d from.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);","lastModifiedDate":"2023-10-22"},{"lineNumber":125,"author":{"gitId":"yongjiema"},"content":"        String encodedTo \u003d to.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);","lastModifiedDate":"2023-10-22"},{"lineNumber":126,"author":{"gitId":"yongjiema"},"content":"        String encodedAfter \u003d encodeAfterOption();","lastModifiedDate":"2023-10-31"},{"lineNumber":127,"author":{"gitId":"yongjiema"},"content":"        return String.format(","lastModifiedDate":"2023-10-31"},{"lineNumber":128,"author":{"gitId":"yongjiema"},"content":"            \"%s | %s | %s | %s -\u003e %s | %s\",","lastModifiedDate":"2023-10-31"},{"lineNumber":129,"author":{"gitId":"yongjiema"},"content":"            getType(),","lastModifiedDate":"2023-10-31"},{"lineNumber":130,"author":{"gitId":"yongjiema"},"content":"            encodeIsDone(),","lastModifiedDate":"2023-10-31"},{"lineNumber":131,"author":{"gitId":"yongjiema"},"content":"            description,","lastModifiedDate":"2023-10-31"},{"lineNumber":132,"author":{"gitId":"yongjiema"},"content":"            encodedFrom,","lastModifiedDate":"2023-10-31"},{"lineNumber":133,"author":{"gitId":"yongjiema"},"content":"            encodedTo,","lastModifiedDate":"2023-10-31"},{"lineNumber":134,"author":{"gitId":"yongjiema"},"content":"            encodedAfter);","lastModifiedDate":"2023-10-31"},{"lineNumber":135,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":136,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"yongjiema":136}},{"path":"src/main/java/nus/duke/data/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.data.tasks;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskAfterOption;","lastModifiedDate":"2023-11-10"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":" * The `Todo` class represents a simple to-do task in Duke.","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":" * It extends the `AbstractTask` class and includes a description of the task.","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"public class Todo extends AbstractTask {","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `Todo` task with the provided description.","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"        this(description, false);","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `Todo` task with the provided description and completion status.","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"     * @param isDone      The completion status of the to-do task.","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"        this(description, isDone, null);","lastModifiedDate":"2023-11-10"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-11-10"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `Todo` task with the provided description, completion status,","lastModifiedDate":"2023-11-10"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"     * and an optional afterOption.","lastModifiedDate":"2023-11-10"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-11-10"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2023-11-10"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"     * @param isDone      The completion status of the to-do task.","lastModifiedDate":"2023-11-10"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"     * @param afterOption An optional afterOption associated with the to-do task.","lastModifiedDate":"2023-11-10"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"     *                    It represents additional data relevant to the task execution.","lastModifiedDate":"2023-11-10"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"     *                    Use null if no afterOption is provided.","lastModifiedDate":"2023-11-10"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-11-10"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"    public Todo(String description, boolean isDone, TaskAfterOption afterOption) {","lastModifiedDate":"2023-11-10"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"        super(description, isDone, afterOption);","lastModifiedDate":"2023-11-10"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"    @Override","lastModifiedDate":"2023-10-15"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"    public String getType() {","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"        return \"T\";","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-09-18"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-09-18"}],"authorContributionMap":{"yongjiema":47}},{"path":"src/main/java/nus/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.exceptions;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":" * The `DukeException` class is the base class for exceptions specific to the Duke application.","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":" * It extends the standard Java `Exception` class and provides custom error handling for Duke.","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2023-09-26"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new Duke exception with the specified error message.","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"     * @param errorMessage The error message describing the exception.","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-09-26"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"        super(errorMessage);","lastModifiedDate":"2023-09-26"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-09-26"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new Duke exception with the specified error message and the underlying cause.","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     * @param errorMessage The error message describing the exception.","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     * @param cause        The cause of the exception, typically another exception that triggered this one.","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"    public DukeException(String errorMessage, Throwable cause) {","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"        super(errorMessage, cause);","lastModifiedDate":"2023-10-15"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-09-26"}],"authorContributionMap":{"yongjiema":26}},{"path":"src/main/java/nus/duke/exceptions/InvalidCommandArgsDukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.exceptions;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":" * The `InvalidCommandArgsDukeException` class represents an exception specific to Duke","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":" * that is thrown when an invalid or improperly formatted command argument is encountered.","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":" * It extends the `DukeException` class and is used for error handling related to command arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"public class InvalidCommandArgsDukeException extends DukeException {","lastModifiedDate":"2023-09-26"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `InvalidCommandArgsDukeException` with the specified error message.","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"     * @param errorMessage The error message describing the exception, typically indicating the issue with command","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"     *                     arguments.","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"    public InvalidCommandArgsDukeException(String errorMessage) {","lastModifiedDate":"2023-09-26"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"        super(errorMessage);","lastModifiedDate":"2023-09-26"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-09-26"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-09-26"}],"authorContributionMap":{"yongjiema":18}},{"path":"src/main/java/nus/duke/exceptions/UnknownCommandDukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.exceptions;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":" * The `UnknownCommandDukeException` class represents an exception specific to Duke","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":" * that is thrown when an unrecognized or unknown command is encountered.","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":" * It extends the `DukeException` class and is used for error handling when Duke receives an unknown command.","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"public class UnknownCommandDukeException extends DukeException {","lastModifiedDate":"2023-09-26"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `UnknownCommandDukeException` with the specified error message.","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"     * @param errorMessage The error message describing the exception, typically indicating the issue with an unknown","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"     *                     command.","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"    public UnknownCommandDukeException(String errorMessage) {","lastModifiedDate":"2023-09-26"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"        super(errorMessage);","lastModifiedDate":"2023-09-26"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-09-26"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-09-26"}],"authorContributionMap":{"yongjiema":18}},{"path":"src/main/java/nus/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.parser;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import java.util.Locale;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.AbstractCommand;","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.ByeCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.DateCommand;","lastModifiedDate":"2023-10-22"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.DeadlineCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.DeleteCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.EventCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.FindCommand;","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.ListCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.MarkCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.TodoCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"import nus.duke.commands.UnmarkCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskSource;","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.UnknownCommandDukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":" * The `Parser` class is responsible for parsing user input and converting it into executable commands.","lastModifiedDate":"2023-10-23"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":" * It includes methods for parsing various types of user input, such as commands and date/time information.","lastModifiedDate":"2023-10-23"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"public class Parser {","lastModifiedDate":"2023-10-17"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"    private static final String DATE_PATTERN_INPUT \u003d \"yyyy-M-d\";","lastModifiedDate":"2023-10-22"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"    private static final String TIME_PATTERN_INPUT \u003d \"HHmm\";","lastModifiedDate":"2023-10-22"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"    private static final String DATETIME_PATTERN_INPUT \u003d DATE_PATTERN_INPUT + \" \" + TIME_PATTERN_INPUT;","lastModifiedDate":"2023-10-22"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"     * Parses the provided full command and returns an appropriate `AbstractCommand` based on the command name.","lastModifiedDate":"2023-10-23"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"     * @param fullCommand The full command entered by the user.","lastModifiedDate":"2023-10-23"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"     * @return An `AbstractCommand` that represents the parsed command.","lastModifiedDate":"2023-10-23"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"     * @throws DukeException If the command is not recognized or cannot be parsed.","lastModifiedDate":"2023-10-23"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"    public static AbstractCommand parse(String fullCommand) throws DukeException {","lastModifiedDate":"2023-10-23"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"        assert fullCommand !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"        String trimmedFullCommand \u003d fullCommand.trim();","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"        String commandName \u003d trimmedFullCommand.split(\" \", -1)[0];","lastModifiedDate":"2023-10-17"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"        String commandArgs \u003d trimmedFullCommand.substring(commandName.length()).trim();","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"        switch (commandName) {","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"        case \"bye\":","lastModifiedDate":"2023-10-17"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"            return new ByeCommand(commandArgs);","lastModifiedDate":"2023-10-17"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"        case \"date\":","lastModifiedDate":"2023-10-22"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"            return new DateCommand(commandArgs);","lastModifiedDate":"2023-10-22"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"        case \"deadline\":","lastModifiedDate":"2023-10-17"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"        case \"d\":","lastModifiedDate":"2023-11-05"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"            return new DeadlineCommand(commandArgs);","lastModifiedDate":"2023-10-17"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"        case \"delete\":","lastModifiedDate":"2023-10-17"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"            return new DeleteCommand(commandArgs);","lastModifiedDate":"2023-10-17"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"        case \"event\":","lastModifiedDate":"2023-10-17"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"        case \"e\":","lastModifiedDate":"2023-11-05"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"            return new EventCommand(commandArgs);","lastModifiedDate":"2023-10-17"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"        case \"find\":","lastModifiedDate":"2023-10-31"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"            return new FindCommand(commandArgs);","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"        case \"list\":","lastModifiedDate":"2023-10-17"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"            return new ListCommand(commandArgs);","lastModifiedDate":"2023-10-17"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"        case \"mark\":","lastModifiedDate":"2023-10-17"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"            return new MarkCommand(commandArgs);","lastModifiedDate":"2023-10-17"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"        case \"todo\":","lastModifiedDate":"2023-10-17"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"        case \"t\":","lastModifiedDate":"2023-11-05"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"            return new TodoCommand(commandArgs);","lastModifiedDate":"2023-10-17"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"        case \"unmark\":","lastModifiedDate":"2023-10-17"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"            return new UnmarkCommand(commandArgs);","lastModifiedDate":"2023-10-17"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"        default:","lastModifiedDate":"2023-10-17"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"            throw new UnknownCommandDukeException(\"Input: \" + fullCommand);","lastModifiedDate":"2023-10-17"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"     * Parses a string containing task arguments into a TaskSource object.","lastModifiedDate":"2023-10-31"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"     * @param taskArgs The string containing task arguments to be parsed.","lastModifiedDate":"2023-10-31"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"     * @return A TaskSource object containing the parsed task description and options.","lastModifiedDate":"2023-10-31"},{"lineNumber":82,"author":{"gitId":"yongjiema"},"content":"     * @throws InvalidCommandArgsDukeException if the taskArgs string does not match the expected format or if","lastModifiedDate":"2023-10-31"},{"lineNumber":83,"author":{"gitId":"yongjiema"},"content":"     *                                         required option values are missing.","lastModifiedDate":"2023-10-31"},{"lineNumber":84,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":85,"author":{"gitId":"yongjiema"},"content":"    public static TaskSource parseTaskSource(String taskArgs) throws InvalidCommandArgsDukeException {","lastModifiedDate":"2023-10-31"},{"lineNumber":86,"author":{"gitId":"yongjiema"},"content":"        assert taskArgs !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":87,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":88,"author":{"gitId":"yongjiema"},"content":"        String regexOption \u003d \"(?\u003d/[a-zA-z0-9-]+ )|(?\u003c\u003d/[a-zA-z0-9-]+ )\";","lastModifiedDate":"2023-10-31"},{"lineNumber":89,"author":{"gitId":"yongjiema"},"content":"        String[] array \u003d taskArgs.split(regexOption, -1);","lastModifiedDate":"2023-10-31"},{"lineNumber":90,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":91,"author":{"gitId":"yongjiema"},"content":"        String taskDescription \u003d array[0].trim();","lastModifiedDate":"2023-10-31"},{"lineNumber":92,"author":{"gitId":"yongjiema"},"content":"        HashMap\u003cString, String\u003e taskOptions \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-10-31"},{"lineNumber":93,"author":{"gitId":"yongjiema"},"content":"        for (int i \u003d 1; i \u003c array.length; i \u003d i + 2) {","lastModifiedDate":"2023-10-31"},{"lineNumber":94,"author":{"gitId":"yongjiema"},"content":"            String optionKey \u003d array[i].substring(1).trim();","lastModifiedDate":"2023-10-31"},{"lineNumber":95,"author":{"gitId":"yongjiema"},"content":"            if (i + 1 \u003e\u003d array.length) {","lastModifiedDate":"2023-10-31"},{"lineNumber":96,"author":{"gitId":"yongjiema"},"content":"                throw new InvalidCommandArgsDukeException(","lastModifiedDate":"2023-10-31"},{"lineNumber":97,"author":{"gitId":"yongjiema"},"content":"                    String.format(\"The value for \\\"/%s\\\" is missing.\", optionKey));","lastModifiedDate":"2023-10-31"},{"lineNumber":98,"author":{"gitId":"yongjiema"},"content":"            }","lastModifiedDate":"2023-10-31"},{"lineNumber":99,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":100,"author":{"gitId":"yongjiema"},"content":"            String optionValue \u003d array[i + 1].trim();","lastModifiedDate":"2023-10-31"},{"lineNumber":101,"author":{"gitId":"yongjiema"},"content":"            taskOptions.put(optionKey, optionValue);","lastModifiedDate":"2023-10-31"},{"lineNumber":102,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":103,"author":{"gitId":"yongjiema"},"content":"        return new TaskSource(taskDescription, taskOptions);","lastModifiedDate":"2023-10-31"},{"lineNumber":104,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":105,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":106,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":107,"author":{"gitId":"yongjiema"},"content":"     * Parses a user-supplied date string and returns a `LocalDate` object.","lastModifiedDate":"2023-10-23"},{"lineNumber":108,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":109,"author":{"gitId":"yongjiema"},"content":"     * @param text The user-supplied date string.","lastModifiedDate":"2023-10-23"},{"lineNumber":110,"author":{"gitId":"yongjiema"},"content":"     * @return A `LocalDate` object representing the parsed date.","lastModifiedDate":"2023-10-23"},{"lineNumber":111,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":112,"author":{"gitId":"yongjiema"},"content":"    public static LocalDate parseUserDate(String text) {","lastModifiedDate":"2023-10-22"},{"lineNumber":113,"author":{"gitId":"yongjiema"},"content":"        assert text !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":114,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":115,"author":{"gitId":"yongjiema"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(DATE_PATTERN_INPUT, Locale.ROOT);","lastModifiedDate":"2023-10-22"},{"lineNumber":116,"author":{"gitId":"yongjiema"},"content":"        return LocalDate.parse(text, dateTimeFormatter);","lastModifiedDate":"2023-10-22"},{"lineNumber":117,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":118,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":119,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":120,"author":{"gitId":"yongjiema"},"content":"     * Parses a user-supplied date and time string and returns a `LocalDateTime` object.","lastModifiedDate":"2023-10-23"},{"lineNumber":121,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":122,"author":{"gitId":"yongjiema"},"content":"     * @param text The user-supplied date and time string.","lastModifiedDate":"2023-10-23"},{"lineNumber":123,"author":{"gitId":"yongjiema"},"content":"     * @return A `LocalDateTime` object representing the parsed date and time.","lastModifiedDate":"2023-10-23"},{"lineNumber":124,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":125,"author":{"gitId":"yongjiema"},"content":"    public static LocalDateTime parseUserDateTime(String text) {","lastModifiedDate":"2023-10-22"},{"lineNumber":126,"author":{"gitId":"yongjiema"},"content":"        assert text !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":127,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":128,"author":{"gitId":"yongjiema"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(DATETIME_PATTERN_INPUT, Locale.ROOT);","lastModifiedDate":"2023-10-22"},{"lineNumber":129,"author":{"gitId":"yongjiema"},"content":"        return LocalDateTime.parse(text, dateTimeFormatter);","lastModifiedDate":"2023-10-22"},{"lineNumber":130,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":131,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":132,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":133,"author":{"gitId":"yongjiema"},"content":"     * Parses a user-supplied relative date and time string and returns a `LocalDateTime` object.","lastModifiedDate":"2023-10-23"},{"lineNumber":134,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":135,"author":{"gitId":"yongjiema"},"content":"     * @param referenceTime The reference `LocalDateTime` for relative parsing.","lastModifiedDate":"2023-10-23"},{"lineNumber":136,"author":{"gitId":"yongjiema"},"content":"     * @param text          The user-supplied relative date and time string.","lastModifiedDate":"2023-10-23"},{"lineNumber":137,"author":{"gitId":"yongjiema"},"content":"     * @return A `LocalDateTime` object representing the parsed relative date and time.","lastModifiedDate":"2023-10-23"},{"lineNumber":138,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":139,"author":{"gitId":"yongjiema"},"content":"    public static LocalDateTime parseUserRelativeDateTime(LocalDateTime referenceTime, String text) {","lastModifiedDate":"2023-10-22"},{"lineNumber":140,"author":{"gitId":"yongjiema"},"content":"        assert referenceTime !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":141,"author":{"gitId":"yongjiema"},"content":"        assert text !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":142,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":143,"author":{"gitId":"yongjiema"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(DATETIME_PATTERN_INPUT, Locale.ROOT);","lastModifiedDate":"2023-10-22"},{"lineNumber":144,"author":{"gitId":"yongjiema"},"content":"        try {","lastModifiedDate":"2023-10-22"},{"lineNumber":145,"author":{"gitId":"yongjiema"},"content":"            return LocalDateTime.parse(text, dateTimeFormatter);","lastModifiedDate":"2023-10-22"},{"lineNumber":146,"author":{"gitId":"yongjiema"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-22"},{"lineNumber":147,"author":{"gitId":"yongjiema"},"content":"            dateTimeFormatter \u003d DateTimeFormatter.ofPattern(TIME_PATTERN_INPUT, Locale.ROOT);","lastModifiedDate":"2023-10-22"},{"lineNumber":148,"author":{"gitId":"yongjiema"},"content":"            LocalTime time \u003d LocalTime.parse(text, dateTimeFormatter);","lastModifiedDate":"2023-10-22"},{"lineNumber":149,"author":{"gitId":"yongjiema"},"content":"            return referenceTime.with(time);","lastModifiedDate":"2023-10-22"},{"lineNumber":150,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-22"},{"lineNumber":151,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":152,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"yongjiema":152}},{"path":"src/main/java/nus/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-15"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2023-10-15"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import java.nio.file.NoSuchFileException;","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"import java.util.List;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":" * The `Storage` class is responsible for loading and saving the task list to a file.","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":" * It provides methods to load and save task data from and to a specified file path.","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"public class Storage {","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"    private final Path path;","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `Storage` with the provided file path.","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"     * @param filePath The file path where the task list data is stored.","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"     * @throws IllegalArgumentException If the provided file path does not end with \u0027.txt\u0027.","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"        assert filePath !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"        if (!isValidPath(filePath)) {","lastModifiedDate":"2023-10-15"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"            throw new IllegalArgumentException(\"Storage file should end with \u0027.txt\u0027\");","lastModifiedDate":"2023-10-15"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"        this.path \u003d Paths.get(filePath);","lastModifiedDate":"2023-10-15"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"    private static boolean isValidPath(String filePath) {","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"        assert filePath !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"        return filePath.endsWith(\".txt\");","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"    private static void ensureParentPathExists(Path path) throws IOException {","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"        assert path !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"        Path parentPath \u003d path.getParent();","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"        if (parentPath !\u003d null) {","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"            Files.createDirectories(parentPath);","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"     * Gets the file path where the task list is stored.","lastModifiedDate":"2023-10-23"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"     * @return The `Path` object representing the file path.","lastModifiedDate":"2023-10-23"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"    public Path getPath() {","lastModifiedDate":"2023-10-15"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"        return this.path;","lastModifiedDate":"2023-10-15"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"     * Loads the task list data from the specified file.","lastModifiedDate":"2023-10-23"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"     * @return The loaded `TaskList` object.","lastModifiedDate":"2023-10-23"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"     * @throws StorageOperationException If an error occurs while reading from the file.","lastModifiedDate":"2023-10-23"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"    public TaskList load() throws StorageOperationException {","lastModifiedDate":"2023-10-15"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"        try {","lastModifiedDate":"2023-10-15"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"            List\u003cString\u003e encodedTaskList \u003d Files.readAllLines(path, StandardCharsets.UTF_8);","lastModifiedDate":"2023-10-15"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"            return TaskListDecoder.decodeTaskList(encodedTaskList);","lastModifiedDate":"2023-10-15"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"        } catch (NoSuchFileException e) {","lastModifiedDate":"2023-10-17"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"            return new TaskList();","lastModifiedDate":"2023-10-15"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-10-15"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"            throw new StorageOperationException(\"Error reading from file: \" + path, e);","lastModifiedDate":"2023-10-15"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"     * Saves the task list data to the specified file.","lastModifiedDate":"2023-10-23"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"     * @param taskList The `TaskList` object to be saved.","lastModifiedDate":"2023-10-23"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"     * @throws StorageOperationException If an error occurs while writing to the file.","lastModifiedDate":"2023-10-23"},{"lineNumber":82,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":83,"author":{"gitId":"yongjiema"},"content":"    public void save(TaskList taskList) throws StorageOperationException {","lastModifiedDate":"2023-10-15"},{"lineNumber":84,"author":{"gitId":"yongjiema"},"content":"        assert taskList !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":85,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":86,"author":{"gitId":"yongjiema"},"content":"        Collection\u003cString\u003e encodedTaskList \u003d TaskListEncoder.encodeTaskList(taskList);","lastModifiedDate":"2023-10-15"},{"lineNumber":87,"author":{"gitId":"yongjiema"},"content":"        try {","lastModifiedDate":"2023-10-15"},{"lineNumber":88,"author":{"gitId":"yongjiema"},"content":"            ensureParentPathExists(path);","lastModifiedDate":"2023-10-15"},{"lineNumber":89,"author":{"gitId":"yongjiema"},"content":"            Files.write(path, encodedTaskList, StandardCharsets.UTF_8);","lastModifiedDate":"2023-10-15"},{"lineNumber":90,"author":{"gitId":"yongjiema"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-10-15"},{"lineNumber":91,"author":{"gitId":"yongjiema"},"content":"            throw new StorageOperationException(\"Error writing to file: \" + path, e);","lastModifiedDate":"2023-10-15"},{"lineNumber":92,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":93,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":94,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"yongjiema":94}},{"path":"src/main/java/nus/duke/storage/StorageOperationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.DukeException;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":" * The `StorageOperationException` class is a custom exception specific to storage-related errors.","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":" * It is used to indicate issues that occur during storage operations, such as loading or saving data.","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"public class StorageOperationException extends DukeException {","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `StorageOperationException` with the specified error message.","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"     * @param errorMessage The error message describing the storage-related issue.","lastModifiedDate":"2023-10-23"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"    public StorageOperationException(String errorMessage) {","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"        super(errorMessage);","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"     * Instantiates a new `StorageOperationException` with the specified error message and a cause.","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     * @param errorMessage The error message describing the storage-related issue.","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"     * @param cause        The underlying cause of the exception.","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"    public StorageOperationException(String errorMessage, Throwable cause) {","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"        super(errorMessage, cause);","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"yongjiema":28}},{"path":"src/main/java/nus/duke/storage/TaskListDecoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskAfterOption;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.AbstractTask;","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.Deadline;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.Event;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.Todo;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"import nus.duke.util.IntegerUtils;","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":" * The `TaskListDecoder` class is responsible for decoding a collection of encoded task representations","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":" * into a `TaskList`. Each encoded task is a string that is parsed to reconstruct the corresponding task object.","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"public class TaskListDecoder {","lastModifiedDate":"2023-10-15"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"     * Decodes a collection of encoded task representations and constructs a `TaskList` from them.","lastModifiedDate":"2023-10-23"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"     * @param encodedTaskList The collection of encoded task representations.","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"     * @return A `TaskList` containing the decoded tasks.","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"     * @throws StorageOperationException If there\u0027s an issue with decoding or parsing the data.","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"    public static TaskList decodeTaskList(Collection\u003cString\u003e encodedTaskList) throws StorageOperationException {","lastModifiedDate":"2023-10-15"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        assert encodedTaskList !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"        ArrayList\u003cAbstractTask\u003e decodedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-23"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"        for (String encodedTask : encodedTaskList) {","lastModifiedDate":"2023-10-15"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"            decodedTasks.add(decodeTaskFromString(encodedTask));","lastModifiedDate":"2023-10-15"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        return new TaskList(decodedTasks);","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"    private static AbstractTask decodeTaskFromString(String encodedTask) throws StorageOperationException {","lastModifiedDate":"2023-10-23"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"        assert encodedTask !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"        String[] fields \u003d encodedTask.split(\"\\\\s*\\\\|\\\\s*\", -1);","lastModifiedDate":"2023-10-15"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"        String type \u003d fields[0];","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"        switch (type) {","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"        case \"D\":","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"            return decodeDeadline(fields);","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"        case \"E\":","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"            return decodeEvent(fields);","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"        case \"T\":","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"            return decodeTodo(fields);","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"        default:","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"            throw new StorageOperationException(\"Unknown task type.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"    private static Deadline decodeDeadline(String[] fields) throws StorageOperationException {","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"        assert fields !\u003d null;","lastModifiedDate":"2023-11-05"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"        if (fields.length !\u003d 5) {","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"            throw new StorageOperationException(\"The number of fields for deadline should be 5.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"        boolean isDone \u003d decodeIsDoneFromString(fields[1]);","lastModifiedDate":"2023-10-15"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"        String description \u003d fields[2];","lastModifiedDate":"2023-10-15"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"        TaskAfterOption afterOption \u003d decodeAfterOption(fields[fields.length - 1]);","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime deadlineBy \u003d decodeDateTime(fields[3]);","lastModifiedDate":"2023-10-22"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"        Deadline deadline \u003d new Deadline(description, deadlineBy, isDone);","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"        deadline.setAfterOption(afterOption);","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"        return deadline;","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"    private static Event decodeEvent(String[] fields) throws StorageOperationException {","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"        assert fields !\u003d null;","lastModifiedDate":"2023-11-05"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"        if (fields.length !\u003d 5) {","lastModifiedDate":"2023-10-31"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"            throw new StorageOperationException(\"The number of fields for an event should be 5.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"        boolean isDone \u003d decodeIsDoneFromString(fields[1]);","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"        String description \u003d fields[2];","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"        TaskAfterOption afterOption \u003d decodeAfterOption(fields[fields.length - 1]);","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"        String eventFromTo \u003d fields[3];","lastModifiedDate":"2023-10-15"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"        String[] fromToFields \u003d eventFromTo.split(\" -\u003e \", -1);","lastModifiedDate":"2023-10-22"},{"lineNumber":82,"author":{"gitId":"yongjiema"},"content":"        if (fromToFields.length !\u003d 2) {","lastModifiedDate":"2023-10-15"},{"lineNumber":83,"author":{"gitId":"yongjiema"},"content":"            throw new StorageOperationException(\"The from-to field is invalid.\");","lastModifiedDate":"2023-10-15"},{"lineNumber":84,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":85,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime eventFrom \u003d decodeDateTime(fromToFields[0]);","lastModifiedDate":"2023-10-22"},{"lineNumber":86,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime eventTo \u003d decodeDateTime(fromToFields[1]);","lastModifiedDate":"2023-10-22"},{"lineNumber":87,"author":{"gitId":"yongjiema"},"content":"        Event event \u003d new Event(description, eventFrom, eventTo, isDone);","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"yongjiema"},"content":"        event.setAfterOption(afterOption);","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"yongjiema"},"content":"        return event;","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":91,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":92,"author":{"gitId":"yongjiema"},"content":"    private static Todo decodeTodo(String[] fields) throws StorageOperationException {","lastModifiedDate":"2023-11-01"},{"lineNumber":93,"author":{"gitId":"yongjiema"},"content":"        assert fields !\u003d null;","lastModifiedDate":"2023-11-05"},{"lineNumber":94,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":95,"author":{"gitId":"yongjiema"},"content":"        if (fields.length !\u003d 4) {","lastModifiedDate":"2023-11-01"},{"lineNumber":96,"author":{"gitId":"yongjiema"},"content":"            throw new StorageOperationException(\"he number of fields for an event should be 4.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":98,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":99,"author":{"gitId":"yongjiema"},"content":"        boolean isDone \u003d decodeIsDoneFromString(fields[1]);","lastModifiedDate":"2023-11-01"},{"lineNumber":100,"author":{"gitId":"yongjiema"},"content":"        String description \u003d fields[2];","lastModifiedDate":"2023-11-01"},{"lineNumber":101,"author":{"gitId":"yongjiema"},"content":"        TaskAfterOption afterOption \u003d decodeAfterOption(fields[fields.length - 1]);","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"yongjiema"},"content":"        Todo todo \u003d new Todo(description, isDone);","lastModifiedDate":"2023-11-01"},{"lineNumber":103,"author":{"gitId":"yongjiema"},"content":"        todo.setAfterOption(afterOption);","lastModifiedDate":"2023-11-01"},{"lineNumber":104,"author":{"gitId":"yongjiema"},"content":"        return todo;","lastModifiedDate":"2023-11-01"},{"lineNumber":105,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":106,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":107,"author":{"gitId":"yongjiema"},"content":"    private static boolean decodeIsDoneFromString(String value) throws StorageOperationException {","lastModifiedDate":"2023-10-15"},{"lineNumber":108,"author":{"gitId":"yongjiema"},"content":"        assert value !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":109,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":110,"author":{"gitId":"yongjiema"},"content":"        switch (value) {","lastModifiedDate":"2023-10-15"},{"lineNumber":111,"author":{"gitId":"yongjiema"},"content":"        case \"1\":","lastModifiedDate":"2023-10-15"},{"lineNumber":112,"author":{"gitId":"yongjiema"},"content":"            return true;","lastModifiedDate":"2023-10-15"},{"lineNumber":113,"author":{"gitId":"yongjiema"},"content":"        case \"0\":","lastModifiedDate":"2023-10-15"},{"lineNumber":114,"author":{"gitId":"yongjiema"},"content":"            return false;","lastModifiedDate":"2023-10-15"},{"lineNumber":115,"author":{"gitId":"yongjiema"},"content":"        default:","lastModifiedDate":"2023-10-15"},{"lineNumber":116,"author":{"gitId":"yongjiema"},"content":"            throw new StorageOperationException(\"The isDone field should be 0 or 1.\");","lastModifiedDate":"2023-10-15"},{"lineNumber":117,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":118,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":119,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":120,"author":{"gitId":"yongjiema"},"content":"    private static LocalDateTime decodeDateTime(String text) throws StorageOperationException {","lastModifiedDate":"2023-10-22"},{"lineNumber":121,"author":{"gitId":"yongjiema"},"content":"        assert text !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":122,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":123,"author":{"gitId":"yongjiema"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ISO_LOCAL_DATE_TIME;","lastModifiedDate":"2023-10-22"},{"lineNumber":124,"author":{"gitId":"yongjiema"},"content":"        try {","lastModifiedDate":"2023-10-22"},{"lineNumber":125,"author":{"gitId":"yongjiema"},"content":"            return LocalDateTime.parse(text, dateTimeFormatter);","lastModifiedDate":"2023-10-22"},{"lineNumber":126,"author":{"gitId":"yongjiema"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-10-22"},{"lineNumber":127,"author":{"gitId":"yongjiema"},"content":"            throw new StorageOperationException(\"Invalid DateTime format.\");","lastModifiedDate":"2023-10-22"},{"lineNumber":128,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-22"},{"lineNumber":129,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":130,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":131,"author":{"gitId":"yongjiema"},"content":"    private static TaskAfterOption decodeAfterOption(String text) throws StorageOperationException {","lastModifiedDate":"2023-10-31"},{"lineNumber":132,"author":{"gitId":"yongjiema"},"content":"        assert text !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":133,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":134,"author":{"gitId":"yongjiema"},"content":"        if (text.isEmpty()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":135,"author":{"gitId":"yongjiema"},"content":"            return null;","lastModifiedDate":"2023-10-31"},{"lineNumber":136,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":137,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":138,"author":{"gitId":"yongjiema"},"content":"        Integer taskNumber \u003d IntegerUtils.tryParseInt(text);","lastModifiedDate":"2023-10-31"},{"lineNumber":139,"author":{"gitId":"yongjiema"},"content":"        if (taskNumber !\u003d null) {","lastModifiedDate":"2023-10-31"},{"lineNumber":140,"author":{"gitId":"yongjiema"},"content":"            return new TaskAfterOption(taskNumber);","lastModifiedDate":"2023-10-31"},{"lineNumber":141,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":142,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":143,"author":{"gitId":"yongjiema"},"content":"        try {","lastModifiedDate":"2023-10-31"},{"lineNumber":144,"author":{"gitId":"yongjiema"},"content":"            LocalDateTime dateTime \u003d decodeDateTime(text);","lastModifiedDate":"2023-10-31"},{"lineNumber":145,"author":{"gitId":"yongjiema"},"content":"            return new TaskAfterOption(dateTime);","lastModifiedDate":"2023-10-31"},{"lineNumber":146,"author":{"gitId":"yongjiema"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-10-31"},{"lineNumber":147,"author":{"gitId":"yongjiema"},"content":"            throw new StorageOperationException(\"Invalid after option format.\");","lastModifiedDate":"2023-10-31"},{"lineNumber":148,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":149,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":150,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"yongjiema":150}},{"path":"src/main/java/nus/duke/storage/TaskListEncoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-15"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-15"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import java.util.List;","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.AbstractTask;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":" * The `TaskListEncoder` class is responsible for encoding a `TaskList` into a collection of string representations","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":" * of tasks. Each task is converted to a string and added to the collection for storage.","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"public class TaskListEncoder {","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"     * Encodes a `TaskList` into a collection of string representations of tasks.","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"     * @param taskList The `TaskList` to be encoded.","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     * @return A collection of encoded task representations as strings.","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"    public static Collection\u003cString\u003e encodeTaskList(TaskList taskList) {","lastModifiedDate":"2023-10-15"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"        assert taskList !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"        ArrayList\u003cString\u003e encodedTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"        List\u003cAbstractTask\u003e tasks \u003d taskList.getAllTasks();","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"        for (AbstractTask task : tasks) {","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"            encodedTaskList.add(encodeTaskToString(task));","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-15"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        return encodedTaskList;","lastModifiedDate":"2023-10-15"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"    private static String encodeTaskToString(AbstractTask task) {","lastModifiedDate":"2023-10-23"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"        assert task !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        return task.encode();","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-15"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"yongjiema":36}},{"path":"src/main/java/nus/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.ui;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-10-17"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":" * The `Ui` class handles user interface interactions, including reading user commands and displaying messages.","lastModifiedDate":"2023-10-23"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"public class Ui {","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"    private static final String LINE_PREFIX \u003d \" \";","lastModifiedDate":"2023-10-17"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"    private static final String LS \u003d System.lineSeparator();","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"    private final Scanner stdinScanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-10-17"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"     * Reads a command entered by the user.","lastModifiedDate":"2023-10-23"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"     * @return The user\u0027s input command as a string.","lastModifiedDate":"2023-10-23"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"    public String readCommand() {","lastModifiedDate":"2023-10-17"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"        return stdinScanner.nextLine();","lastModifiedDate":"2023-10-17"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"     * Displays a welcome message when DukeBot is launched.","lastModifiedDate":"2023-10-23"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"        showLine();","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        showWithPrefix(new String[] {","lastModifiedDate":"2023-10-17"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"            \"Hello! I\u0027m\",","lastModifiedDate":"2023-11-10"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"            \" ______   __   __  ___   _  _______  _______  _______  _______ \",","lastModifiedDate":"2023-11-10"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"            \"|      | |  | |  ||   | | ||       ||  _    ||       ||       |\",","lastModifiedDate":"2023-11-10"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"            \"|  _    ||  | |  ||   |_| ||    ___|| |_|   ||   _   ||_     _|\",","lastModifiedDate":"2023-11-10"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"            \"| | |   ||  |_|  ||      _||   |___ |       ||  | |  |  |   |  \",","lastModifiedDate":"2023-11-10"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"            \"| |_|   ||       ||     |_ |    ___||  _   | |  |_|  |  |   |  \",","lastModifiedDate":"2023-11-10"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"            \"|       ||       ||    _  ||   |___ | |_|   ||       |  |   |  \",","lastModifiedDate":"2023-11-10"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"            \"|______| |_______||___| |_||_______||_______||_______|  |___|  \",","lastModifiedDate":"2023-11-10"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"            \"What can I do for you?\"","lastModifiedDate":"2023-10-17"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"        });","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"        showLine();","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"     * Displays an error message if there was a problem loading tasks from storage.","lastModifiedDate":"2023-10-23"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"        showLine();","lastModifiedDate":"2023-10-17"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"        showWithPrefix(\"Failed to load tasks from the storage file. An empty task list will be used instead.\");","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"        showLine();","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"     * Displays one or more messages to the user.","lastModifiedDate":"2023-10-23"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"     * @param messages The messages to be displayed.","lastModifiedDate":"2023-10-23"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"    public void showMessages(String... messages) {","lastModifiedDate":"2023-10-17"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"        assert messages !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"        showWithPrefix(messages);","lastModifiedDate":"2023-10-17"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2023-10-23"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"     * @param error The error message to be displayed.","lastModifiedDate":"2023-10-23"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"    public void showError(String error) {","lastModifiedDate":"2023-10-17"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"        assert error !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"        showWithPrefix(error);","lastModifiedDate":"2023-10-17"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"     * Displays a horizontal line as a visual separator.","lastModifiedDate":"2023-10-23"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"    public void showLine() {","lastModifiedDate":"2023-10-17"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-10-17"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"    private void showWithPrefix(String... messages) {","lastModifiedDate":"2023-10-17"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"        assert messages !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":82,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":83,"author":{"gitId":"yongjiema"},"content":"        for (String message : messages) {","lastModifiedDate":"2023-10-17"},{"lineNumber":84,"author":{"gitId":"yongjiema"},"content":"            System.out.println(LINE_PREFIX + message.replaceAll(\"\\\\R\", LS + LINE_PREFIX));","lastModifiedDate":"2023-10-17"},{"lineNumber":85,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":86,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":87,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"yongjiema":87}},{"path":"src/main/java/nus/duke/util/IntegerUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.util;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"/**","lastModifiedDate":"2023-10-23"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":" * The `Utils` class provides utility methods for common operations.","lastModifiedDate":"2023-10-23"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":" */","lastModifiedDate":"2023-10-23"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"public class IntegerUtils {","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"    /**","lastModifiedDate":"2023-10-23"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"     * Attempts to parse an integer from a given string.","lastModifiedDate":"2023-10-23"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"     *","lastModifiedDate":"2023-10-23"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"     * @param s The string to parse as an integer.","lastModifiedDate":"2023-10-23"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"     * @return An `Integer` object representing the parsed integer, or `null` if parsing fails.","lastModifiedDate":"2023-10-23"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"     */","lastModifiedDate":"2023-10-23"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"    public static Integer tryParseInt(String s) {","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"        assert s !\u003d null;","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"        try {","lastModifiedDate":"2023-10-17"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"            return Integer.parseInt(s);","lastModifiedDate":"2023-10-17"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-10-17"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"            // Parsing failed; return null","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"            return null;","lastModifiedDate":"2023-10-17"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"yongjiema":23}},{"path":"src/test/java/nus/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.parser;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskSource;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import nus.duke.exceptions.InvalidCommandArgsDukeException;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"class ParserTest {","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"    void parseTaskSource_withoutOptions() throws InvalidCommandArgsDukeException {","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"        TaskSource taskSource \u003d Parser.parseTaskSource(\"event project meeting\");","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"        assertEquals(\"event project meeting\", taskSource.getDescription());","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"        assertEquals(0, taskSource.getOptions().size());","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"    void parseTaskSource_withOptions() throws InvalidCommandArgsDukeException {","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"        TaskSource taskSource \u003d Parser.parseTaskSource(","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"            \"event project meeting /from 2019-9-1 1430 /to 1630 /after 1 /key value\");","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"        assertEquals(\"event project meeting\", taskSource.getDescription());","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"        assertEquals(4, taskSource.getOptions().size());","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"        assertEquals(Optional.of(\"2019-9-1 1430\"), taskSource.getOptionValue(\"from\"));","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"        assertEquals(Optional.of(\"1630\"), taskSource.getOptionValue(\"to\"));","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"        assertEquals(Optional.of(\"1\"), taskSource.getOptionValue(\"after\"));","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"        assertEquals(Optional.of(\"value\"), taskSource.getOptionValue(\"key\"));","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"yongjiema":31}},{"path":"src/test/java/nus/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"package nus.duke.storage;","lastModifiedDate":"2023-10-22"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2023-11-10"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"import static org.junit.jupiter.api.Assertions.assertIterableEquals;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"import java.io.File;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"import java.util.List;","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-11-10"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskAfterOption;","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.TaskList;","lastModifiedDate":"2023-10-22"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.AbstractTask;","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.Deadline;","lastModifiedDate":"2023-10-22"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.Event;","lastModifiedDate":"2023-10-22"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"import nus.duke.data.tasks.Todo;","lastModifiedDate":"2023-10-22"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2023-10-22"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-10-22"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-22"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"import org.junit.jupiter.params.ParameterizedTest;","lastModifiedDate":"2023-11-10"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"import org.junit.jupiter.params.provider.Arguments;","lastModifiedDate":"2023-11-10"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"import org.junit.jupiter.params.provider.MethodSource;","lastModifiedDate":"2023-11-10"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"import org.junit.jupiter.params.provider.ValueSource;","lastModifiedDate":"2023-11-10"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"class StorageTest {","lastModifiedDate":"2023-10-22"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"    private File tempFile;","lastModifiedDate":"2023-10-22"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"    private static Stream\u003cArguments\u003e getTasksAndContent() {","lastModifiedDate":"2023-11-10"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"        Stream\u003cArguments\u003e args \u003d getTasksAndContentOfDeadline();","lastModifiedDate":"2023-11-10"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"        args \u003d Stream.concat(args, getTasksAndContentOfEvent());","lastModifiedDate":"2023-11-10"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"        args \u003d Stream.concat(args, getTasksAndContentOfTodo());","lastModifiedDate":"2023-11-10"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"        return args;","lastModifiedDate":"2023-11-10"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"    private static Stream\u003cArguments\u003e getTasksAndContentOfDeadline() {","lastModifiedDate":"2023-11-10"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime t1909011830 \u003d LocalDateTime.of(2019, 9, 1, 18, 30);","lastModifiedDate":"2023-11-10"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime t1909010930 \u003d LocalDateTime.of(2019, 9, 1, 9, 30);","lastModifiedDate":"2023-11-10"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"        return Stream.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"            Arguments.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"                List.of(\"D | 0 | return book | 2019-09-01T18:30:00 | \"),","lastModifiedDate":"2023-11-10"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"                List.of(new Deadline(\"return book\", t1909011830))","lastModifiedDate":"2023-11-10"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"            ),","lastModifiedDate":"2023-11-10"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"            Arguments.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"                List.of(\"D | 0 | return book | 2019-09-01T18:30:00 | 1\"),","lastModifiedDate":"2023-11-10"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"                List.of(new Deadline(\"return book\", t1909011830, false, new TaskAfterOption(1)))","lastModifiedDate":"2023-11-10"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"            ),","lastModifiedDate":"2023-11-10"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"            Arguments.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"                List.of(\"D | 0 | return book | 2019-09-01T18:30:00 | 2019-09-01T09:30:00\"),","lastModifiedDate":"2023-11-10"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"                List.of(new Deadline(\"return book\", t1909011830, false, new TaskAfterOption(t1909010930)))","lastModifiedDate":"2023-11-10"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"            )","lastModifiedDate":"2023-11-10"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"        );","lastModifiedDate":"2023-11-10"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"    private static Stream\u003cArguments\u003e getTasksAndContentOfEvent() {","lastModifiedDate":"2023-11-10"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime t1909011430 \u003d LocalDateTime.of(2019, 9, 1, 14, 30);","lastModifiedDate":"2023-11-10"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime t1909011630 \u003d LocalDateTime.of(2019, 9, 1, 16, 30);","lastModifiedDate":"2023-11-10"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime t1910151630 \u003d LocalDateTime.of(2019, 10, 15, 16, 30);","lastModifiedDate":"2023-11-10"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime t1909011530 \u003d LocalDateTime.of(2019, 9, 1, 15, 30);","lastModifiedDate":"2023-11-10"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"        return Stream.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"            Arguments.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"                List.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"                    \"E | 0 | project meeting | 2019-09-01T14:30:00 -\u003e 2019-09-01T16:30:00 | \",","lastModifiedDate":"2023-11-10"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"                    \"E | 0 | project meeting | 2019-09-01T14:30:00 -\u003e 2019-10-15T16:30:00 | \"","lastModifiedDate":"2023-11-10"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"                ),","lastModifiedDate":"2023-11-10"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"                List.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"                    new Event(\"project meeting\", t1909011430, t1909011630),","lastModifiedDate":"2023-11-10"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"                    new Event(\"project meeting\", t1909011430, t1910151630)","lastModifiedDate":"2023-11-10"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"                )","lastModifiedDate":"2023-11-10"},{"lineNumber":76,"author":{"gitId":"yongjiema"},"content":"            ),","lastModifiedDate":"2023-11-10"},{"lineNumber":77,"author":{"gitId":"yongjiema"},"content":"            Arguments.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":78,"author":{"gitId":"yongjiema"},"content":"                List.of(\"E | 0 | project meeting | 2019-09-01T14:30:00 -\u003e 2019-10-15T16:30:00 | 5\"),","lastModifiedDate":"2023-11-10"},{"lineNumber":79,"author":{"gitId":"yongjiema"},"content":"                List.of(new Event(\"project meeting\", t1909011430, t1910151630, false, new TaskAfterOption(5)))","lastModifiedDate":"2023-11-10"},{"lineNumber":80,"author":{"gitId":"yongjiema"},"content":"            ),","lastModifiedDate":"2023-11-10"},{"lineNumber":81,"author":{"gitId":"yongjiema"},"content":"            Arguments.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":82,"author":{"gitId":"yongjiema"},"content":"                List.of(\"E | 0 | project meeting | 2019-09-01T14:30:00 -\u003e 2019-10-15T16:30:00 | 2019-09-01T15:30:00\"),","lastModifiedDate":"2023-11-10"},{"lineNumber":83,"author":{"gitId":"yongjiema"},"content":"                List.of(new Event(\"project meeting\", t1909011430, t1910151630, false, new TaskAfterOption(t1909011530)))","lastModifiedDate":"2023-11-10"},{"lineNumber":84,"author":{"gitId":"yongjiema"},"content":"            )","lastModifiedDate":"2023-11-10"},{"lineNumber":85,"author":{"gitId":"yongjiema"},"content":"        );","lastModifiedDate":"2023-11-10"},{"lineNumber":86,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":87,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":88,"author":{"gitId":"yongjiema"},"content":"    private static Stream\u003cArguments\u003e getTasksAndContentOfTodo() {","lastModifiedDate":"2023-11-10"},{"lineNumber":89,"author":{"gitId":"yongjiema"},"content":"        LocalDateTime t1909010930 \u003d LocalDateTime.of(2019, 9, 1, 9, 30);","lastModifiedDate":"2023-11-10"},{"lineNumber":90,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":91,"author":{"gitId":"yongjiema"},"content":"        return Stream.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":92,"author":{"gitId":"yongjiema"},"content":"            Arguments.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":93,"author":{"gitId":"yongjiema"},"content":"                List.of(\"T | 1 | join sports club | \"),","lastModifiedDate":"2023-11-10"},{"lineNumber":94,"author":{"gitId":"yongjiema"},"content":"                List.of(new Todo(\"join sports club\", true))","lastModifiedDate":"2023-11-10"},{"lineNumber":95,"author":{"gitId":"yongjiema"},"content":"            ),","lastModifiedDate":"2023-11-10"},{"lineNumber":96,"author":{"gitId":"yongjiema"},"content":"            Arguments.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":97,"author":{"gitId":"yongjiema"},"content":"                List.of(\"T | 1 | join sports club | 8\"),","lastModifiedDate":"2023-11-10"},{"lineNumber":98,"author":{"gitId":"yongjiema"},"content":"                List.of(new Todo(\"join sports club\", true, new TaskAfterOption(8)))","lastModifiedDate":"2023-11-10"},{"lineNumber":99,"author":{"gitId":"yongjiema"},"content":"            ),","lastModifiedDate":"2023-11-10"},{"lineNumber":100,"author":{"gitId":"yongjiema"},"content":"            Arguments.of(","lastModifiedDate":"2023-11-10"},{"lineNumber":101,"author":{"gitId":"yongjiema"},"content":"                List.of(\"T | 1 | join sports club | 2019-09-01T09:30:00\"),","lastModifiedDate":"2023-11-10"},{"lineNumber":102,"author":{"gitId":"yongjiema"},"content":"                List.of(new Todo(\"join sports club\", true, new TaskAfterOption(t1909010930)))","lastModifiedDate":"2023-11-10"},{"lineNumber":103,"author":{"gitId":"yongjiema"},"content":"            )","lastModifiedDate":"2023-11-10"},{"lineNumber":104,"author":{"gitId":"yongjiema"},"content":"        );","lastModifiedDate":"2023-11-10"},{"lineNumber":105,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-10"},{"lineNumber":106,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":107,"author":{"gitId":"yongjiema"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-22"},{"lineNumber":108,"author":{"gitId":"yongjiema"},"content":"    void setUp() throws IOException {","lastModifiedDate":"2023-10-22"},{"lineNumber":109,"author":{"gitId":"yongjiema"},"content":"        tempFile \u003d File.createTempFile(\"storage\", \".txt\");","lastModifiedDate":"2023-10-22"},{"lineNumber":110,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":111,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":112,"author":{"gitId":"yongjiema"},"content":"    @AfterEach","lastModifiedDate":"2023-10-22"},{"lineNumber":113,"author":{"gitId":"yongjiema"},"content":"    void tearDown() {","lastModifiedDate":"2023-10-22"},{"lineNumber":114,"author":{"gitId":"yongjiema"},"content":"        if (tempFile !\u003d null \u0026\u0026 tempFile.exists()) {","lastModifiedDate":"2023-10-22"},{"lineNumber":115,"author":{"gitId":"yongjiema"},"content":"            tempFile.delete();","lastModifiedDate":"2023-10-22"},{"lineNumber":116,"author":{"gitId":"yongjiema"},"content":"            tempFile \u003d null;","lastModifiedDate":"2023-10-22"},{"lineNumber":117,"author":{"gitId":"yongjiema"},"content":"        }","lastModifiedDate":"2023-10-22"},{"lineNumber":118,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":119,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":120,"author":{"gitId":"yongjiema"},"content":"    @Test","lastModifiedDate":"2023-10-22"},{"lineNumber":121,"author":{"gitId":"yongjiema"},"content":"    void load_fileNotExists() throws StorageOperationException {","lastModifiedDate":"2023-10-22"},{"lineNumber":122,"author":{"gitId":"yongjiema"},"content":"        String absolutePath \u003d tempFile.getAbsolutePath();","lastModifiedDate":"2023-10-22"},{"lineNumber":123,"author":{"gitId":"yongjiema"},"content":"        assertTrue(tempFile.delete());","lastModifiedDate":"2023-10-22"},{"lineNumber":124,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":125,"author":{"gitId":"yongjiema"},"content":"        assertEquals(0, new Storage(absolutePath).load().size());","lastModifiedDate":"2023-10-22"},{"lineNumber":126,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":127,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":128,"author":{"gitId":"yongjiema"},"content":"    @ParameterizedTest","lastModifiedDate":"2023-11-10"},{"lineNumber":129,"author":{"gitId":"yongjiema"},"content":"    @ValueSource(strings \u003d {","lastModifiedDate":"2023-11-10"},{"lineNumber":130,"author":{"gitId":"yongjiema"},"content":"        \"D | 0 | return book |\",","lastModifiedDate":"2023-11-10"},{"lineNumber":131,"author":{"gitId":"yongjiema"},"content":"        \"D | 0 | return book | 2019-19-01T18:30:00 |\",","lastModifiedDate":"2023-11-10"},{"lineNumber":132,"author":{"gitId":"yongjiema"},"content":"        \"D | 0 | return book | 2019-09-01T18:30:00 | abc\",","lastModifiedDate":"2023-11-10"},{"lineNumber":133,"author":{"gitId":"yongjiema"},"content":"        \"D | 0 | return book | 2019-09-01T18:30:00 | 2019-19-01T18:30:00\",","lastModifiedDate":"2023-11-10"},{"lineNumber":134,"author":{"gitId":"yongjiema"},"content":"        \"E | 0 | project meeting |\",","lastModifiedDate":"2023-11-10"},{"lineNumber":135,"author":{"gitId":"yongjiema"},"content":"        \"E | 0 | project meeting | 2019-19-01T14:30:00 -\u003e 2019-09-01T16:30:00 |\",","lastModifiedDate":"2023-11-10"},{"lineNumber":136,"author":{"gitId":"yongjiema"},"content":"        \"E | 0 | project meeting | 2019-09-01T14:30:00 -\u003e 2019-19-01T16:30:00 |\",","lastModifiedDate":"2023-11-10"},{"lineNumber":137,"author":{"gitId":"yongjiema"},"content":"        \"E | 0 | project meeting | 2019-09-01T14:30:00 -\u003e 2019-09-01T16:30:00 | abc\",","lastModifiedDate":"2023-11-10"},{"lineNumber":138,"author":{"gitId":"yongjiema"},"content":"        \"E | 0 | project meeting | 2019-09-01T14:30:00 -\u003e 2019-09-01T16:30:00 | 2019-19-01T18:30:00\",","lastModifiedDate":"2023-11-10"},{"lineNumber":139,"author":{"gitId":"yongjiema"},"content":"        \"T | read book |\",","lastModifiedDate":"2023-11-10"},{"lineNumber":140,"author":{"gitId":"yongjiema"},"content":"        \"T | read book | abc\",","lastModifiedDate":"2023-11-10"},{"lineNumber":141,"author":{"gitId":"yongjiema"},"content":"        \"T | read book | 2019-19-01T18:30:00\"","lastModifiedDate":"2023-11-10"},{"lineNumber":142,"author":{"gitId":"yongjiema"},"content":"    })","lastModifiedDate":"2023-11-10"},{"lineNumber":143,"author":{"gitId":"yongjiema"},"content":"    void load_invalidContent(String content) throws IOException {","lastModifiedDate":"2023-11-10"},{"lineNumber":144,"author":{"gitId":"yongjiema"},"content":"        Files.write(tempFile.toPath(), content.getBytes(StandardCharsets.UTF_8));","lastModifiedDate":"2023-10-22"},{"lineNumber":145,"author":{"gitId":"yongjiema"},"content":"        assertThrows(StorageOperationException.class, () -\u003e new Storage(tempFile.getAbsolutePath()).load());","lastModifiedDate":"2023-10-22"},{"lineNumber":146,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":147,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":148,"author":{"gitId":"yongjiema"},"content":"    @ParameterizedTest","lastModifiedDate":"2023-11-10"},{"lineNumber":149,"author":{"gitId":"yongjiema"},"content":"    @MethodSource(\"getTasksAndContent\")","lastModifiedDate":"2023-11-10"},{"lineNumber":150,"author":{"gitId":"yongjiema"},"content":"    void load_validContent(List\u003cString\u003e lines, List\u003cAbstractTask\u003e tasks)","lastModifiedDate":"2023-11-10"},{"lineNumber":151,"author":{"gitId":"yongjiema"},"content":"        throws IOException, StorageOperationException {","lastModifiedDate":"2023-11-10"},{"lineNumber":152,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":153,"author":{"gitId":"yongjiema"},"content":"        Files.write(tempFile.toPath(), lines, StandardCharsets.UTF_8);","lastModifiedDate":"2023-11-01"},{"lineNumber":154,"author":{"gitId":"yongjiema"},"content":"        Storage storage \u003d new Storage(tempFile.getAbsolutePath());","lastModifiedDate":"2023-11-01"},{"lineNumber":155,"author":{"gitId":"yongjiema"},"content":"        TaskList taskList \u003d storage.load();","lastModifiedDate":"2023-11-01"},{"lineNumber":156,"author":{"gitId":"yongjiema"},"content":"        assertArrayEquals(tasks.toArray(), taskList.getAllTasks().toArray());","lastModifiedDate":"2023-11-10"},{"lineNumber":157,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":158,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":159,"author":{"gitId":"yongjiema"},"content":"    @ParameterizedTest","lastModifiedDate":"2023-11-10"},{"lineNumber":160,"author":{"gitId":"yongjiema"},"content":"    @MethodSource(\"getTasksAndContent\")","lastModifiedDate":"2023-11-10"},{"lineNumber":161,"author":{"gitId":"yongjiema"},"content":"    void save_tasks(List\u003cString\u003e expectedLines, List\u003cAbstractTask\u003e tasks)","lastModifiedDate":"2023-11-10"},{"lineNumber":162,"author":{"gitId":"yongjiema"},"content":"        throws StorageOperationException, IOException {","lastModifiedDate":"2023-11-10"},{"lineNumber":163,"author":{"gitId":"yongjiema"},"content":"        Storage storage \u003d new Storage(tempFile.getAbsolutePath());","lastModifiedDate":"2023-10-22"},{"lineNumber":164,"author":{"gitId":"yongjiema"},"content":"        storage.save(new TaskList(tasks));","lastModifiedDate":"2023-11-10"},{"lineNumber":165,"author":{"gitId":"yongjiema"},"content":"","lastModifiedDate":"2023-10-22"},{"lineNumber":166,"author":{"gitId":"yongjiema"},"content":"        List\u003cString\u003e lines \u003d Files.readAllLines(tempFile.toPath(), StandardCharsets.UTF_8);","lastModifiedDate":"2023-10-22"},{"lineNumber":167,"author":{"gitId":"yongjiema"},"content":"        assertIterableEquals(expectedLines, lines);","lastModifiedDate":"2023-10-22"},{"lineNumber":168,"author":{"gitId":"yongjiema"},"content":"    }","lastModifiedDate":"2023-10-22"},{"lineNumber":169,"author":{"gitId":"yongjiema"},"content":"}","lastModifiedDate":"2023-10-22"}],"authorContributionMap":{"yongjiema":169}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yongjiema"},"content":"blah","lastModifiedDate":"2023-09-26"},{"lineNumber":2,"author":{"gitId":"yongjiema"},"content":"list 1","lastModifiedDate":"2023-09-26"},{"lineNumber":3,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-09-11"},{"lineNumber":4,"author":{"gitId":"yongjiema"},"content":"todo","lastModifiedDate":"2023-09-26"},{"lineNumber":5,"author":{"gitId":"yongjiema"},"content":"todo borrow book","lastModifiedDate":"2023-09-18"},{"lineNumber":6,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-09-11"},{"lineNumber":7,"author":{"gitId":"yongjiema"},"content":"todo read book /after 2","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"todo read book /after 1","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"yongjiema"},"content":"todo review book /after 2019-9-1 0930","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"yongjiema"},"content":"deadline","lastModifiedDate":"2023-09-26"},{"lineNumber":13,"author":{"gitId":"yongjiema"},"content":"deadline return book","lastModifiedDate":"2023-09-26"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"deadline return book /by","lastModifiedDate":"2023-09-26"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"deadline return book /by 2019-9-1 1830","lastModifiedDate":"2023-10-22"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-09-18"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"deadline return book /by 2019-9-1 1830 /after 5","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"yongjiema"},"content":"deadline save notes /by 2019-9-1 1830 /after 4","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"deadline call library /by 2019-9-1 1830 /after 2019-9-1 0930","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"yongjiema"},"content":"event","lastModifiedDate":"2023-09-26"},{"lineNumber":23,"author":{"gitId":"yongjiema"},"content":"event project meeting /from","lastModifiedDate":"2023-09-26"},{"lineNumber":24,"author":{"gitId":"yongjiema"},"content":"event project meeting /from 2019-9-1 1430","lastModifiedDate":"2023-10-22"},{"lineNumber":25,"author":{"gitId":"yongjiema"},"content":"event project meeting /to","lastModifiedDate":"2023-09-26"},{"lineNumber":26,"author":{"gitId":"yongjiema"},"content":"event project meeting /to 1600","lastModifiedDate":"2023-10-22"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"event project meeting /from 2019-9-1 1430 /to 1630","lastModifiedDate":"2023-10-22"},{"lineNumber":28,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-10-22"},{"lineNumber":29,"author":{"gitId":"yongjiema"},"content":"event project meeting /from 2019-9-1 1430 /to 2019-10-15 1630","lastModifiedDate":"2023-10-22"},{"lineNumber":30,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-09-11"},{"lineNumber":31,"author":{"gitId":"yongjiema"},"content":"event project meeting /from 2019-9-1 1430 /to 1630 /after 9","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"yongjiema"},"content":"event project meeting /from 2019-9-1 1430 /to 1630 /after 8","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"yongjiema"},"content":"event project meeting /from 2019-9-1 1430 /to 1630 /after 2019-9-1 0930","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"yongjiema"},"content":"event project meeting /from 2019-9-1 1430 /to 1630 /after 2019-9-1 1530","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"yongjiema"},"content":"event project meeting /from 2019-9-1 1430 /to 2019-10-15 1630 /after 11","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"yongjiema"},"content":"event project meeting /from 2019-9-1 1430 /to 2019-10-15 1630 /after 10","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"yongjiema"},"content":"event project meeting /from 2019-9-1 1430 /to 1630 /after 2019-9-1 0930","lastModifiedDate":"2023-10-31"},{"lineNumber":41,"author":{"gitId":"yongjiema"},"content":"event project meeting /from 2019-9-1 1430 /to 1630 /after 2019-9-1 1530","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"yongjiema"},"content":"mark","lastModifiedDate":"2023-09-11"},{"lineNumber":44,"author":{"gitId":"yongjiema"},"content":"mark 0","lastModifiedDate":"2023-09-11"},{"lineNumber":45,"author":{"gitId":"yongjiema"},"content":"mark 99","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"yongjiema"},"content":"mark 1","lastModifiedDate":"2023-09-11"},{"lineNumber":47,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-09-11"},{"lineNumber":48,"author":{"gitId":"yongjiema"},"content":"mark 4","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-09-11"},{"lineNumber":50,"author":{"gitId":"yongjiema"},"content":"mark 7","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-09-18"},{"lineNumber":52,"author":{"gitId":"yongjiema"},"content":"date 2019-9-1","lastModifiedDate":"2023-10-22"},{"lineNumber":53,"author":{"gitId":"yongjiema"},"content":"date 2019-9-2","lastModifiedDate":"2023-10-22"},{"lineNumber":54,"author":{"gitId":"yongjiema"},"content":"date 2019-10-15","lastModifiedDate":"2023-10-22"},{"lineNumber":55,"author":{"gitId":"yongjiema"},"content":"unmark","lastModifiedDate":"2023-09-26"},{"lineNumber":56,"author":{"gitId":"yongjiema"},"content":"unmark 0","lastModifiedDate":"2023-09-26"},{"lineNumber":57,"author":{"gitId":"yongjiema"},"content":"unmark 99","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"yongjiema"},"content":"unmark 2","lastModifiedDate":"2023-09-18"},{"lineNumber":59,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-09-18"},{"lineNumber":60,"author":{"gitId":"yongjiema"},"content":"unmark 4","lastModifiedDate":"2023-10-22"},{"lineNumber":61,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-10-22"},{"lineNumber":62,"author":{"gitId":"yongjiema"},"content":"unmark 6","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"yongjiema"},"content":"delete","lastModifiedDate":"2023-09-26"},{"lineNumber":65,"author":{"gitId":"yongjiema"},"content":"delete 0","lastModifiedDate":"2023-09-26"},{"lineNumber":66,"author":{"gitId":"yongjiema"},"content":"delete 99","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"yongjiema"},"content":"delete 12","lastModifiedDate":"2023-10-31"},{"lineNumber":68,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-09-26"},{"lineNumber":69,"author":{"gitId":"yongjiema"},"content":"delete 5","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-09-26"},{"lineNumber":71,"author":{"gitId":"yongjiema"},"content":"delete 3","lastModifiedDate":"2023-10-31"},{"lineNumber":72,"author":{"gitId":"yongjiema"},"content":"list","lastModifiedDate":"2023-09-26"},{"lineNumber":73,"author":{"gitId":"yongjiema"},"content":"find Meeting","lastModifiedDate":"2023-10-31"},{"lineNumber":74,"author":{"gitId":"yongjiema"},"content":"bye 1","lastModifiedDate":"2023-09-26"},{"lineNumber":75,"author":{"gitId":"yongjiema"},"content":"bye","lastModifiedDate":"2023-09-11"}],"authorContributionMap":{"yongjiema":75}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"yongjiema"},"content":"if exist .\\data rd /s /q .\\data","lastModifiedDate":"2023-10-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"yongjiema"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\nus\\duke\\*.java","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"yongjiema"},"content":"java -classpath ..\\bin nus.duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yongjiema":3,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"yongjiema"},"content":"if [ -e \"./data\" ]","lastModifiedDate":"2023-10-22"},{"lineNumber":15,"author":{"gitId":"yongjiema"},"content":"then","lastModifiedDate":"2023-10-22"},{"lineNumber":16,"author":{"gitId":"yongjiema"},"content":"    rm -rf \"./data\"","lastModifiedDate":"2023-10-22"},{"lineNumber":17,"author":{"gitId":"yongjiema"},"content":"fi","lastModifiedDate":"2023-10-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"yongjiema"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/nus/duke/*.java","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"yongjiema"},"content":"java -classpath ../bin nus.duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yongjiema":6,"-":36}}]
