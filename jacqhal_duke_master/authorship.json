[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"    mainClass.set(\"joshua.Joshua\")","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jacqhal":1,"-":41}},{"path":"data/joshua.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"T | 0 | write report","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"D | 1 | return book | 1 Dec 2023, 6:00 pm","lastModifiedDate":"2023-11-18"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"E | 0 | annual bake sale | 15 Nov 2023, 9:00 am | 17 Nov 2023, 8:00 pm","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"T | 1 | finalise report","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"D | 0 | submit report | 19 Nov 2023, 11:59 pm","lastModifiedDate":"2023-11-18"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"E | 0 | nus orientation | 27 Jul 2023, 9:00 am | 2 Aug 2023, 8:00 pm","lastModifiedDate":"2023-11-18"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"E | 0 | early christmas party | 18 Nov 2023, 6:00 pm | 20 Nov 2023, 6:00 pm","lastModifiedDate":"2023-11-19"}],"authorContributionMap":{"jacqhal":7}},{"path":"src/main/java/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"import java.io.IOException;","lastModifiedDate":"2023-11-08"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":" * Represents a bye command.","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"public class ByeCommand extends Command{","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Saves tasks from latest session in storage and prints exit message.","lastModifiedDate":"2023-11-18"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"        try {","lastModifiedDate":"2023-11-08"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"            storage.save(taskList);","lastModifiedDate":"2023-11-08"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"            ui.printSaveMessage();","lastModifiedDate":"2023-11-08"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-11-08"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"            ui.joshuaSays(e.getMessage());","lastModifiedDate":"2023-11-08"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"        super.isExit \u003d true;","lastModifiedDate":"2023-11-18"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"        ui.printExitMessage();;","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"jacqhal":27}},{"path":"src/main/java/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":" * Represents a command to be executed by the Joshua chatbot.","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":" * Other command classes should extend this class and implement the execute method.","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"public class Command {","lastModifiedDate":"2023-11-08"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"    protected boolean isExit \u003d false;","lastModifiedDate":"2023-11-18"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"    protected Command() {","lastModifiedDate":"2023-11-08"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"     * Performs the operations of the command.","lastModifiedDate":"2023-11-18"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"     * @param taskList The TaskList containing the tasks.","lastModifiedDate":"2023-11-18"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"     * @param ui The user interface to interact with the user.","lastModifiedDate":"2023-11-18"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"     * @param storage The storage object for handling task storage.","lastModifiedDate":"2023-11-18"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"     * @throws Exception Any exception that might occur during command execution.","lastModifiedDate":"2023-11-18"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) throws Exception {","lastModifiedDate":"2023-11-18"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"        return;","lastModifiedDate":"2023-11-18"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-18"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"     * @return isExit boolean value.","lastModifiedDate":"2023-11-18"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-11-18"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"        return isExit;","lastModifiedDate":"2023-11-18"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"jacqhal":35}},{"path":"src/main/java/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import task.Deadline;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import task.Task;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":" * Represents a deadline command.","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    private final Task deadlineToAdd;","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"    public DeadlineCommand(String desc, String by) {","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"        this.deadlineToAdd \u003d new Deadline(desc, by);","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"    public Task getDeadlineToAdd() {","lastModifiedDate":"2023-11-19"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"        return deadlineToAdd;","lastModifiedDate":"2023-11-19"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Adds a new Deadline task to the TaskList.","lastModifiedDate":"2023-11-18"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-08"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"        taskList.addToTaskList(deadlineToAdd);","lastModifiedDate":"2023-11-08"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"        ui.joshuaSays(\"ADDED TASK: \" + deadlineToAdd);","lastModifiedDate":"2023-11-08"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"jacqhal":31}},{"path":"src/main/java/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import task.Task;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-13"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":" * Represents a delete command.","lastModifiedDate":"2023-11-18"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"    private final int[] taskNums;","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"    public DeleteCommand(int[] taskNums) { this.taskNums \u003d taskNums; }","lastModifiedDate":"2023-11-13"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Deletes tasks based on the task numbers input by the user (stored in taskNums).","lastModifiedDate":"2023-11-18"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"     * @throws IndexOutOfBoundsException If a task number is not within the valid range.","lastModifiedDate":"2023-11-18"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-08"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"        ArrayList\u003cTask\u003e tasksToDelete \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-13"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"        for (int taskNum : taskNums) {","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"            try {","lastModifiedDate":"2023-11-08"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"                Task task \u003d taskList.getTask(taskNum);","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"                tasksToDelete.add(task);","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"                ui.joshuaSays(taskNum + \" is not a valid task number. Enter a number from the task list.\");","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"                return;","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"        ui.joshuaSays(\"The following task(s) will be deleted:\");","lastModifiedDate":"2023-11-13"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"        for (Task task : tasksToDelete) {","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"            ui.joshuaSays(\"\\t\" + task);","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"            taskList.deleteFromTaskList(task);","lastModifiedDate":"2023-11-13"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"        ui.joshuaSays(\"You now have \" + taskList.listSize() + \" item(s) in your list.\");","lastModifiedDate":"2023-11-13"},{"lineNumber":42,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"jacqhal":43}},{"path":"src/main/java/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import task.Event;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import task.Task;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":" * Represents an event command.","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    private final Task eventToAdd;","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"    public EventCommand(String desc, String from, String to) {","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"        this.eventToAdd \u003d new Event(desc, from, to);","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"    public Task getEventToAdd() {","lastModifiedDate":"2023-11-19"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"        return eventToAdd;","lastModifiedDate":"2023-11-19"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Adds a new Event task to the TaskList.","lastModifiedDate":"2023-11-18"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-08"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"        taskList.addToTaskList(eventToAdd);","lastModifiedDate":"2023-11-08"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"        ui.joshuaSays(\"ADDED TASK: \" + eventToAdd);","lastModifiedDate":"2023-11-08"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"jacqhal":31}},{"path":"src/main/java/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-13"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-13"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-13"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-13"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"import task.Task;","lastModifiedDate":"2023-11-13"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":" * Represents a find command.","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"    private final String findStr;","lastModifiedDate":"2023-11-13"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"    public FindCommand(String findStr) {","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"        this.findStr \u003d findStr.toLowerCase();","lastModifiedDate":"2023-11-13"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Prints all tasks containing the findStr in its task description by iterating","lastModifiedDate":"2023-11-18"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"     * through each task in the task list.","lastModifiedDate":"2023-11-18"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-13"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-13"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"        if (findStr.isEmpty()) {","lastModifiedDate":"2023-11-13"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"            ui.joshuaSays(\"Please enter a word for me to find.\");","lastModifiedDate":"2023-11-13"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"            return;","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"        StringBuilder tasksStr \u003d new StringBuilder();","lastModifiedDate":"2023-11-13"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"        for (int taskNum \u003d 1; taskNum \u003c\u003d taskList.listSize(); taskNum++) {","lastModifiedDate":"2023-11-13"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"            Task task \u003d taskList.getTask(taskNum);","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"            String desc \u003d task.getDesc().toLowerCase();","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"            if (desc.contains(findStr)) {","lastModifiedDate":"2023-11-13"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"                count++;","lastModifiedDate":"2023-11-13"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"                tasksStr.append(taskNum).append(\". \").append(task).append(\"\\n\");","lastModifiedDate":"2023-11-18"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2023-11-13"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"            ui.joshuaSays(\"No matching tasks found.\");","lastModifiedDate":"2023-11-13"},{"lineNumber":42,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":43,"author":{"gitId":"jacqhal"},"content":"        else {","lastModifiedDate":"2023-11-13"},{"lineNumber":44,"author":{"gitId":"jacqhal"},"content":"            ui.joshuaSays(\"Found \" + count + \" task(s) matching \\\"\" + findStr + \"\\\":\");","lastModifiedDate":"2023-11-13"},{"lineNumber":45,"author":{"gitId":"jacqhal"},"content":"            ui.joshuaSays(tasksStr.toString());","lastModifiedDate":"2023-11-13"},{"lineNumber":46,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":47,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":48,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-13"}],"authorContributionMap":{"jacqhal":48}},{"path":"src/main/java/commands/GTWCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-18"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-18"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":" * Represents a \"global thermonuclear war\" command.","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"public class GTWCommand extends Command {","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Prints a short response from Joshua in homage to the 1983 movie, WarGames.","lastModifiedDate":"2023-11-18"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-18"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-18"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"        ui.joshuaSays(\"A strange game.\" +","lastModifiedDate":"2023-11-18"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"                \"\\nThe only winning move is\" +","lastModifiedDate":"2023-11-18"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"                \"\\nnot to play.\" +","lastModifiedDate":"2023-11-18"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"                \"\\n\\nHow about a nice game of chess?\");","lastModifiedDate":"2023-11-18"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-18"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-18"}],"authorContributionMap":{"jacqhal":21}},{"path":"src/main/java/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":" * Represents a help command.","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"    public HelpCommand() {}","lastModifiedDate":"2023-11-08"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Prints a list of available commands the user can input.","lastModifiedDate":"2023-11-18"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"        ui.joshuaSays(","lastModifiedDate":"2023-11-08"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"                \"List of available commands:\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"                + \"\\tLIST\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"                + \"\\tMARK #\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"                + \"\\tUNMARK #\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"                + \"\\tTODO\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"                + \"\\tDEADLINE /BY\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"                + \"\\tEVENT /FROM /TO\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"                + \"\\tFIND\\n\"","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"                + \"\\tSCHEDULE\\n\"","lastModifiedDate":"2023-11-19"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"                + \"\\tDELETE #\\n\"","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"                + \"\\tHELP\\n\"","lastModifiedDate":"2023-11-18"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"                + \"\\tBYE\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"                + \"\\tGLOBAL THERMONUCLEAR WAR\");","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"jacqhal":33}},{"path":"src/main/java/commands/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-08"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":" * Represents an invalid command.","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-08"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"    public static final String INVALID_COMMAND_MESSAGE \u003d \"Please be more articulate, Professor Falken.\\n\" +","lastModifiedDate":"2023-11-08"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"            \"Enter \\\"help\\\" to see the list of available commands.\";","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    public final String errorMessage;","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"    public InvalidCommand(String errorMessage) {","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Prints an error message for the user.","lastModifiedDate":"2023-11-18"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"        ui.joshuaSays(errorMessage);","lastModifiedDate":"2023-11-08"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"jacqhal":26}},{"path":"src/main/java/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":" * Represents a list command.","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"    public ListCommand() {}","lastModifiedDate":"2023-11-08"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Prints the TaskList.","lastModifiedDate":"2023-11-18"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"        ui.joshuaSays(\"Your list has \" + taskList.listSize() + \" item(s):\");","lastModifiedDate":"2023-11-08"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"        ui.joshuaSays(taskList.toString());","lastModifiedDate":"2023-11-08"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"jacqhal":21}},{"path":"src/main/java/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":" * Represents a mark command.","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"    private final int[] taskNums;","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    public MarkCommand(int[] taskNums) {","lastModifiedDate":"2023-11-13"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"        this.taskNums \u003d taskNums;","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Marks tasks as done based on the task numbers input by the user (stored in taskNums).","lastModifiedDate":"2023-11-18"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"     * @throws IndexOutOfBoundsException If a task number is not within the valid range.","lastModifiedDate":"2023-11-18"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"        for (int taskNum : taskNums) {","lastModifiedDate":"2023-11-13"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"            try {","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"                taskList.markTaskAsDone(taskNum);","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"                ui.joshuaSays(\"Marked task: \" + taskList.getTask(taskNum));","lastModifiedDate":"2023-11-13"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-11-08"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"                ui.joshuaSays(taskNum + \" is not a valid task number. Enter a number from the task list.\");","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"jacqhal":33}},{"path":"src/main/java/commands/ScheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-19"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-19"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-19"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-19"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"import task.Deadline;","lastModifiedDate":"2023-11-19"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"import task.Event;","lastModifiedDate":"2023-11-19"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"import task.Task;","lastModifiedDate":"2023-11-19"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-11-19"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-11-19"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-19"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":" * Represents a schedule command.","lastModifiedDate":"2023-11-19"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-19"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"public class ScheduleCommand extends Command {","lastModifiedDate":"2023-11-19"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"    private final String dateStr;","lastModifiedDate":"2023-11-19"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"    private final LocalDate targetDate;","lastModifiedDate":"2023-11-19"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"    public ScheduleCommand(String dateTimeStr) {","lastModifiedDate":"2023-11-19"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"        int dateIdx \u003d 0;","lastModifiedDate":"2023-11-19"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"        dateStr \u003d dateTimeStr.split(\",\")[dateIdx];","lastModifiedDate":"2023-11-19"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, h:mm a\");","lastModifiedDate":"2023-11-19"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"        this.targetDate \u003d LocalDate.parse(dateTimeStr, formatter);","lastModifiedDate":"2023-11-19"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Prints all deadlines and events that fall on the input date.","lastModifiedDate":"2023-11-19"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-19"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-19"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-11-19"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"        StringBuilder tasksStr \u003d new StringBuilder();","lastModifiedDate":"2023-11-19"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"        for (int taskNum \u003d 1; taskNum \u003c\u003d taskList.listSize(); taskNum++) {","lastModifiedDate":"2023-11-19"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"            Task task \u003d taskList.getTask(taskNum);","lastModifiedDate":"2023-11-19"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"            if (task instanceof Deadline) {","lastModifiedDate":"2023-11-19"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"                if (((Deadline) task).isDateInRange(targetDate)) {","lastModifiedDate":"2023-11-19"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"                    count++;","lastModifiedDate":"2023-11-19"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"                    tasksStr.append(\"\\t\").append(taskNum).append(\". \").append(task).append(\"\\n\");","lastModifiedDate":"2023-11-19"},{"lineNumber":42,"author":{"gitId":"jacqhal"},"content":"                }","lastModifiedDate":"2023-11-19"},{"lineNumber":43,"author":{"gitId":"jacqhal"},"content":"            }","lastModifiedDate":"2023-11-19"},{"lineNumber":44,"author":{"gitId":"jacqhal"},"content":"            else if (task instanceof Event) {","lastModifiedDate":"2023-11-19"},{"lineNumber":45,"author":{"gitId":"jacqhal"},"content":"                if (((Event) task).isDateInRange(targetDate)) {","lastModifiedDate":"2023-11-19"},{"lineNumber":46,"author":{"gitId":"jacqhal"},"content":"                    count++;","lastModifiedDate":"2023-11-19"},{"lineNumber":47,"author":{"gitId":"jacqhal"},"content":"                    tasksStr.append(\"\\t\").append(taskNum).append(\". \").append(task).append(\"\\n\");","lastModifiedDate":"2023-11-19"},{"lineNumber":48,"author":{"gitId":"jacqhal"},"content":"                }","lastModifiedDate":"2023-11-19"},{"lineNumber":49,"author":{"gitId":"jacqhal"},"content":"            }","lastModifiedDate":"2023-11-19"},{"lineNumber":50,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-19"},{"lineNumber":51,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":52,"author":{"gitId":"jacqhal"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2023-11-19"},{"lineNumber":53,"author":{"gitId":"jacqhal"},"content":"            ui.joshuaSays(\"No tasks in the schedule for \" + dateStr + \".\");","lastModifiedDate":"2023-11-19"},{"lineNumber":54,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-19"},{"lineNumber":55,"author":{"gitId":"jacqhal"},"content":"        else {","lastModifiedDate":"2023-11-19"},{"lineNumber":56,"author":{"gitId":"jacqhal"},"content":"            ui.joshuaSays(\"Found \" + count + \" task(s) in the schedule for \" + dateStr + \":\");","lastModifiedDate":"2023-11-19"},{"lineNumber":57,"author":{"gitId":"jacqhal"},"content":"            ui.joshuaSays(tasksStr.toString());","lastModifiedDate":"2023-11-19"},{"lineNumber":58,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-19"},{"lineNumber":59,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":60,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-19"}],"authorContributionMap":{"jacqhal":60}},{"path":"src/main/java/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import task.Task;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import task.ToDo;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":" * Represents a todo command.","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    private final Task todoToAdd;","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"    public TodoCommand(String desc) {","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"        this.todoToAdd \u003d new ToDo(desc);","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"    public Task getTodoToAdd() {","lastModifiedDate":"2023-11-19"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"        return todoToAdd;","lastModifiedDate":"2023-11-19"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Adds a new ToDo task to the TaskList.","lastModifiedDate":"2023-11-18"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-08"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"        taskList.addToTaskList(todoToAdd);","lastModifiedDate":"2023-11-08"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"        ui.joshuaSays(\"ADDED TASK: \" + todoToAdd);","lastModifiedDate":"2023-11-08"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"jacqhal":31}},{"path":"src/main/java/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package commands;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import joshua.JoshuaUi;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":" * Represents an ummark command.","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"    private final int[] taskNums;","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    public UnmarkCommand(int[] taskNums) {","lastModifiedDate":"2023-11-13"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"        this.taskNums \u003d taskNums;","lastModifiedDate":"2023-11-13"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"     * {@inheritDoc} Unmarks tasks based on the task numbers input by the user (stored in taskNums).","lastModifiedDate":"2023-11-18"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"     * @throws IndexOutOfBoundsException If a task number is not within the valid range.","lastModifiedDate":"2023-11-18"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"    public void execute(TaskList taskList, JoshuaUi ui, Storage storage) {","lastModifiedDate":"2023-11-08"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"        for (int taskNum : taskNums) {","lastModifiedDate":"2023-11-13"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"            try {","lastModifiedDate":"2023-11-08"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"                taskList.markTaskAsNotDone(taskNum);","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"                ui.joshuaSays(\"Unmarked task: \" + taskList.getTask(taskNum));","lastModifiedDate":"2023-11-13"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-11-08"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"                ui.joshuaSays(taskNum + \" is not a valid task number. Enter a number from the task list.\");","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"jacqhal":32}},{"path":"src/main/java/exceptions/IllegalStorageFormat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package exceptions;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":" * Thrown when an error is found in the formatting of stored tasks.","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"public class IllegalStorageFormat extends Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"    public IllegalStorageFormat() {","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"        super(\"The text in joshua.txt was not formatted correctly.\");","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"    public IllegalStorageFormat(String message) {","lastModifiedDate":"2023-11-18"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"        super(message);","lastModifiedDate":"2023-11-18"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-18"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"jacqhal":15}},{"path":"src/main/java/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package exceptions;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":" * Thrown when an error is found in the formatting of a given command.","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"public class InvalidCommandException extends Exception{","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"        super(\"This command is invalid.\");","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"    public InvalidCommandException(String message) {","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"        super(message);","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"jacqhal":15}},{"path":"src/main/java/joshua/Joshua.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package joshua;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"import commands.Command;","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import exceptions.IllegalStorageFormat;","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import storage.Storage;","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":" * \u003ch1\u003eJoshua Chatbot\u003c/h1\u003e","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":" * The Joshua Chatbot was created in likeness to the AI computer system in the 1983 movie, WarGames.","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":" * The AI in the movie was named Joshua after the late son of Professor Stephen Falken, the scientist who created it.","lastModifiedDate":"2023-11-18"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":" * Unlike the movie, this program will simply help you keep track of your task list, so you don\u0027t","lastModifiedDate":"2023-11-18"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":" * have to worry about starting World War III :)","lastModifiedDate":"2023-11-18"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-11-18"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":" * With the Joshua Chatbot, you can store todos, deadlines and events in a convenient task list.","lastModifiedDate":"2023-11-18"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":" *","lastModifiedDate":"2023-11-18"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":" * @author Jacqueleen Heo","lastModifiedDate":"2023-11-18"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":" * @version 1.0","lastModifiedDate":"2023-11-18"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":" * @since 2023-11-19","lastModifiedDate":"2023-11-18"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"public class Joshua {","lastModifiedDate":"2023-11-08"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"    private Storage storage;","lastModifiedDate":"2023-11-08"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"    private JoshuaUi ui;","lastModifiedDate":"2023-11-08"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"    private JoshuaParser parser;","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"    private boolean isExit \u003d false;","lastModifiedDate":"2023-11-18"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"     * Initializes the Joshua chatbot by setting up the user interface, parser, storage,","lastModifiedDate":"2023-11-18"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"     * and loading the task list from the storage if available.","lastModifiedDate":"2023-11-18"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"     * If loading fails, a new TaskList is created.","lastModifiedDate":"2023-11-18"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"     * @see JoshuaUi","lastModifiedDate":"2023-11-18"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"     * @see JoshuaParser","lastModifiedDate":"2023-11-18"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"     * @see Storage","lastModifiedDate":"2023-11-18"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"     * @see TaskList","lastModifiedDate":"2023-11-18"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"     * @see Storage#load()","lastModifiedDate":"2023-11-18"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"     * @see JoshuaUi#printSuccessfulLoad()","lastModifiedDate":"2023-11-18"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"     * @see JoshuaUi#printLoadingError()","lastModifiedDate":"2023-11-18"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"    public Joshua(String filepath) {","lastModifiedDate":"2023-11-18"},{"lineNumber":42,"author":{"gitId":"jacqhal"},"content":"        ui \u003d new JoshuaUi();","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"jacqhal"},"content":"        parser \u003d new JoshuaParser();","lastModifiedDate":"2023-11-08"},{"lineNumber":44,"author":{"gitId":"jacqhal"},"content":"        storage \u003d new Storage(filepath);","lastModifiedDate":"2023-11-18"},{"lineNumber":45,"author":{"gitId":"jacqhal"},"content":"        try {","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"jacqhal"},"content":"            taskList \u003d storage.load();","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"jacqhal"},"content":"            ui.printSuccessfulLoad();","lastModifiedDate":"2023-11-08"},{"lineNumber":48,"author":{"gitId":"jacqhal"},"content":"            ui.printGreetings();","lastModifiedDate":"2023-11-18"},{"lineNumber":49,"author":{"gitId":"jacqhal"},"content":"        } catch (IllegalStorageFormat e) {","lastModifiedDate":"2023-11-18"},{"lineNumber":50,"author":{"gitId":"jacqhal"},"content":"            ui.joshuaSays(e.getMessage());","lastModifiedDate":"2023-11-18"},{"lineNumber":51,"author":{"gitId":"jacqhal"},"content":"            ui.printLoadingError();","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"jacqhal"},"content":"            isExit \u003d true;","lastModifiedDate":"2023-11-18"},{"lineNumber":53,"author":{"gitId":"jacqhal"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-11-18"},{"lineNumber":54,"author":{"gitId":"jacqhal"},"content":"            ui.printFileNotFoundError();","lastModifiedDate":"2023-11-18"},{"lineNumber":55,"author":{"gitId":"jacqhal"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"jacqhal"},"content":"            ui.printGreetings();","lastModifiedDate":"2023-11-19"},{"lineNumber":57,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":59,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":61,"author":{"gitId":"jacqhal"},"content":"     * Runs the Joshua chatbot, which is a loop of taking in commands from the user","lastModifiedDate":"2023-11-18"},{"lineNumber":62,"author":{"gitId":"jacqhal"},"content":"     * and executing the commands until the \"bye\" command is given.","lastModifiedDate":"2023-11-18"},{"lineNumber":63,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":64,"author":{"gitId":"jacqhal"},"content":"    public void run() {","lastModifiedDate":"2023-11-08"},{"lineNumber":65,"author":{"gitId":"jacqhal"},"content":"        while(!isExit) {","lastModifiedDate":"2023-11-18"},{"lineNumber":66,"author":{"gitId":"jacqhal"},"content":"            try {","lastModifiedDate":"2023-11-18"},{"lineNumber":67,"author":{"gitId":"jacqhal"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-11-08"},{"lineNumber":68,"author":{"gitId":"jacqhal"},"content":"                Command c \u003d parser.parse(fullCommand);","lastModifiedDate":"2023-11-18"},{"lineNumber":69,"author":{"gitId":"jacqhal"},"content":"                c.execute(taskList, ui, storage);","lastModifiedDate":"2023-11-08"},{"lineNumber":70,"author":{"gitId":"jacqhal"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-11-18"},{"lineNumber":71,"author":{"gitId":"jacqhal"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-11-18"},{"lineNumber":72,"author":{"gitId":"jacqhal"},"content":"                ui.joshuaSays(e.getMessage());","lastModifiedDate":"2023-11-18"},{"lineNumber":73,"author":{"gitId":"jacqhal"},"content":"            }","lastModifiedDate":"2023-11-18"},{"lineNumber":74,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-18"},{"lineNumber":75,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":78,"author":{"gitId":"jacqhal"},"content":"     * Runs the Joshua chatbot program.","lastModifiedDate":"2023-11-18"},{"lineNumber":79,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":80,"author":{"gitId":"jacqhal"},"content":"     * @param args Arguments for the main method (not in use).","lastModifiedDate":"2023-11-18"},{"lineNumber":81,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":82,"author":{"gitId":"jacqhal"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-11-08"},{"lineNumber":83,"author":{"gitId":"jacqhal"},"content":"        new Joshua(\"./data/joshua.txt\").run();","lastModifiedDate":"2023-11-18"},{"lineNumber":84,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"jacqhal":84,"-":1}},{"path":"src/main/java/joshua/JoshuaParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package joshua;","lastModifiedDate":"2023-11-08"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import commands.Command;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import commands.MarkCommand;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import commands.UnmarkCommand;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"import commands.DeleteCommand;","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"import commands.ListCommand;","lastModifiedDate":"2023-11-08"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"import commands.TodoCommand;","lastModifiedDate":"2023-11-08"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"import commands.DeadlineCommand;","lastModifiedDate":"2023-11-08"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"import commands.EventCommand;","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"import commands.FindCommand;","lastModifiedDate":"2023-11-13"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"import commands.ScheduleCommand;","lastModifiedDate":"2023-11-19"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"import commands.ByeCommand;","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"import commands.HelpCommand;","lastModifiedDate":"2023-11-08"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"import commands.InvalidCommand;","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"import commands.GTWCommand;","lastModifiedDate":"2023-11-18"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2023-11-13"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-11-13"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-11-13"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-11-13"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-11-08"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":" * Parses the commands input by the user into a format understood by the program.","lastModifiedDate":"2023-11-18"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-08"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"public class JoshuaParser {","lastModifiedDate":"2023-11-18"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2023-11-08"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"    public static final Pattern DEADLINE_ARGUMENT_FORMAT \u003d Pattern.compile(\"(?\u003cdesc\u003e.*)/by(?\u003cby\u003e.*)\");","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"    public static final Pattern EVENT_ARGUMENT_FORMAT \u003d Pattern.compile(\"(?\u003cdesc\u003e.*)/from(?\u003cfrom\u003e.*)/to(?\u003cto\u003e.*)\");","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"    public static final Pattern DATETIME_REGEX_PATTERN \u003d Pattern.compile(\"(\\\\d{1,2}\\\\/\\\\d{1,2}\\\\/\\\\d{4}) (\\\\d{4})\");","lastModifiedDate":"2023-11-19"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"    private final String PARSED_DATETIME_STRING \u003d \"d/M/yyyy HHmm\";","lastModifiedDate":"2023-11-19"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"    private final DateTimeFormatter PARSED_DATETIME_FORMATTER \u003d DateTimeFormatter.ofPattern(PARSED_DATETIME_STRING);","lastModifiedDate":"2023-11-19"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"    private final DateTimeFormatter FORMATTED_DATETIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, h:mm a\");","lastModifiedDate":"2023-11-19"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"    public JoshuaParser() {","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":42,"author":{"gitId":"jacqhal"},"content":"     * Returns a Command object based on the command input by the user.","lastModifiedDate":"2023-11-18"},{"lineNumber":43,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":44,"author":{"gitId":"jacqhal"},"content":"     * @param userInput The command input by the user.","lastModifiedDate":"2023-11-18"},{"lineNumber":45,"author":{"gitId":"jacqhal"},"content":"     * @return Command object with respect to userInput.","lastModifiedDate":"2023-11-18"},{"lineNumber":46,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":47,"author":{"gitId":"jacqhal"},"content":"    public Command parse(String userInput) {","lastModifiedDate":"2023-11-08"},{"lineNumber":48,"author":{"gitId":"jacqhal"},"content":"        assert userInput.equals(userInput.toLowerCase()) : \"User input should be in lower case: \" + userInput;","lastModifiedDate":"2023-11-18"},{"lineNumber":49,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":50,"author":{"gitId":"jacqhal"},"content":"        // parse() method adapted from","lastModifiedDate":"2023-11-18"},{"lineNumber":51,"author":{"gitId":"jacqhal"},"content":"        // https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/parser/Parser.java#L56","lastModifiedDate":"2023-11-18"},{"lineNumber":52,"author":{"gitId":"jacqhal"},"content":"        Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"jacqhal"},"content":"        if(userInput.equals(\"global thermonuclear war\")) {","lastModifiedDate":"2023-11-18"},{"lineNumber":54,"author":{"gitId":"jacqhal"},"content":"            return new GTWCommand();","lastModifiedDate":"2023-11-18"},{"lineNumber":55,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-18"},{"lineNumber":56,"author":{"gitId":"jacqhal"},"content":"        else if(!matcher.matches()) {","lastModifiedDate":"2023-11-18"},{"lineNumber":57,"author":{"gitId":"jacqhal"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-11-08"},{"lineNumber":58,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"jacqhal"},"content":"        String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2023-11-08"},{"lineNumber":61,"author":{"gitId":"jacqhal"},"content":"        String args \u003d matcher.group(\"arguments\").trim();","lastModifiedDate":"2023-11-13"},{"lineNumber":62,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"jacqhal"},"content":"        switch(commandWord) {","lastModifiedDate":"2023-11-08"},{"lineNumber":64,"author":{"gitId":"jacqhal"},"content":"        case \"mark\":","lastModifiedDate":"2023-11-18"},{"lineNumber":65,"author":{"gitId":"jacqhal"},"content":"            // Fallthrough","lastModifiedDate":"2023-11-13"},{"lineNumber":66,"author":{"gitId":"jacqhal"},"content":"        case \"unmark\":","lastModifiedDate":"2023-11-18"},{"lineNumber":67,"author":{"gitId":"jacqhal"},"content":"            // Fallthrough","lastModifiedDate":"2023-11-13"},{"lineNumber":68,"author":{"gitId":"jacqhal"},"content":"        case \"delete\":","lastModifiedDate":"2023-11-18"},{"lineNumber":69,"author":{"gitId":"jacqhal"},"content":"            return prepareTaskOperationCommand(commandWord, args);","lastModifiedDate":"2023-11-13"},{"lineNumber":70,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"jacqhal"},"content":"        case \"list\":","lastModifiedDate":"2023-11-18"},{"lineNumber":72,"author":{"gitId":"jacqhal"},"content":"            return new ListCommand();","lastModifiedDate":"2023-11-08"},{"lineNumber":73,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":74,"author":{"gitId":"jacqhal"},"content":"        case \"todo\":","lastModifiedDate":"2023-11-18"},{"lineNumber":75,"author":{"gitId":"jacqhal"},"content":"            return prepareTodo(args);","lastModifiedDate":"2023-11-13"},{"lineNumber":76,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"jacqhal"},"content":"        case \"deadline\":","lastModifiedDate":"2023-11-18"},{"lineNumber":78,"author":{"gitId":"jacqhal"},"content":"            return prepareDeadline(args);","lastModifiedDate":"2023-11-13"},{"lineNumber":79,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":80,"author":{"gitId":"jacqhal"},"content":"        case \"event\":","lastModifiedDate":"2023-11-18"},{"lineNumber":81,"author":{"gitId":"jacqhal"},"content":"            return prepareEvent(args);","lastModifiedDate":"2023-11-13"},{"lineNumber":82,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"jacqhal"},"content":"        case \"find\":","lastModifiedDate":"2023-11-18"},{"lineNumber":84,"author":{"gitId":"jacqhal"},"content":"            return new FindCommand(args);","lastModifiedDate":"2023-11-13"},{"lineNumber":85,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":86,"author":{"gitId":"jacqhal"},"content":"        case \"schedule\":","lastModifiedDate":"2023-11-19"},{"lineNumber":87,"author":{"gitId":"jacqhal"},"content":"            return prepareSchedule(args);","lastModifiedDate":"2023-11-19"},{"lineNumber":88,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":89,"author":{"gitId":"jacqhal"},"content":"        case \"bye\":","lastModifiedDate":"2023-11-18"},{"lineNumber":90,"author":{"gitId":"jacqhal"},"content":"            return new ByeCommand();","lastModifiedDate":"2023-11-08"},{"lineNumber":91,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":92,"author":{"gitId":"jacqhal"},"content":"        case \"help\":","lastModifiedDate":"2023-11-18"},{"lineNumber":93,"author":{"gitId":"jacqhal"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-11-08"},{"lineNumber":94,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":95,"author":{"gitId":"jacqhal"},"content":"        default:","lastModifiedDate":"2023-11-08"},{"lineNumber":96,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(InvalidCommand.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-11-08"},{"lineNumber":97,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":100,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":101,"author":{"gitId":"jacqhal"},"content":"     *  Returns a Command object of a task operation (ie mark, unmark, delete)","lastModifiedDate":"2023-11-18"},{"lineNumber":102,"author":{"gitId":"jacqhal"},"content":"     *  which is instantiated with the task numbers given in commandArgs","lastModifiedDate":"2023-11-18"},{"lineNumber":103,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-13"},{"lineNumber":104,"author":{"gitId":"jacqhal"},"content":"     * @param commandWord The command input by the user.","lastModifiedDate":"2023-11-18"},{"lineNumber":105,"author":{"gitId":"jacqhal"},"content":"     * @param commandArgs The arguments of the command.","lastModifiedDate":"2023-11-18"},{"lineNumber":106,"author":{"gitId":"jacqhal"},"content":"     * @return A Command object.","lastModifiedDate":"2023-11-18"},{"lineNumber":107,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":108,"author":{"gitId":"jacqhal"},"content":"    private Command prepareTaskOperationCommand(String commandWord, String commandArgs) {","lastModifiedDate":"2023-11-13"},{"lineNumber":109,"author":{"gitId":"jacqhal"},"content":"        int[] taskNums;","lastModifiedDate":"2023-11-13"},{"lineNumber":110,"author":{"gitId":"jacqhal"},"content":"        try {","lastModifiedDate":"2023-11-13"},{"lineNumber":111,"author":{"gitId":"jacqhal"},"content":"            taskNums \u003d parseTaskNumbers(commandArgs);","lastModifiedDate":"2023-11-13"},{"lineNumber":112,"author":{"gitId":"jacqhal"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":113,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(e.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":114,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":115,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":116,"author":{"gitId":"jacqhal"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-11-13"},{"lineNumber":117,"author":{"gitId":"jacqhal"},"content":"        case \"mark\":","lastModifiedDate":"2023-11-18"},{"lineNumber":118,"author":{"gitId":"jacqhal"},"content":"            return new MarkCommand(taskNums);","lastModifiedDate":"2023-11-13"},{"lineNumber":119,"author":{"gitId":"jacqhal"},"content":"        case \"unmark\":","lastModifiedDate":"2023-11-18"},{"lineNumber":120,"author":{"gitId":"jacqhal"},"content":"            return new UnmarkCommand(taskNums);","lastModifiedDate":"2023-11-13"},{"lineNumber":121,"author":{"gitId":"jacqhal"},"content":"        case \"delete\":","lastModifiedDate":"2023-11-18"},{"lineNumber":122,"author":{"gitId":"jacqhal"},"content":"            return new DeleteCommand(taskNums);","lastModifiedDate":"2023-11-13"},{"lineNumber":123,"author":{"gitId":"jacqhal"},"content":"        default:","lastModifiedDate":"2023-11-13"},{"lineNumber":124,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(InvalidCommand.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-11-13"},{"lineNumber":125,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":126,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-13"},{"lineNumber":127,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":128,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":129,"author":{"gitId":"jacqhal"},"content":"     * Returns an integer array of the task numbers to be operated on.","lastModifiedDate":"2023-11-18"},{"lineNumber":130,"author":{"gitId":"jacqhal"},"content":"     * The method takes in a string and splits it by the commas into a String array.","lastModifiedDate":"2023-11-18"},{"lineNumber":131,"author":{"gitId":"jacqhal"},"content":"     * Each String in the array is parsed into an integer and added to an integer array.","lastModifiedDate":"2023-11-18"},{"lineNumber":132,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":133,"author":{"gitId":"jacqhal"},"content":"     * @param commandArgs The arguments of the command.","lastModifiedDate":"2023-11-18"},{"lineNumber":134,"author":{"gitId":"jacqhal"},"content":"     * @return An integer array.","lastModifiedDate":"2023-11-18"},{"lineNumber":135,"author":{"gitId":"jacqhal"},"content":"     * @throws InvalidCommandException If the string cannot be parsed into an integer.","lastModifiedDate":"2023-11-18"},{"lineNumber":136,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":137,"author":{"gitId":"jacqhal"},"content":"    private int[] parseTaskNumbers(String commandArgs) throws InvalidCommandException {","lastModifiedDate":"2023-11-13"},{"lineNumber":138,"author":{"gitId":"jacqhal"},"content":"        String[] taskNumsStrArray \u003d commandArgs.split(\",\");","lastModifiedDate":"2023-11-13"},{"lineNumber":139,"author":{"gitId":"jacqhal"},"content":"        int[] taskNums \u003d new int[taskNumsStrArray.length];","lastModifiedDate":"2023-11-13"},{"lineNumber":140,"author":{"gitId":"jacqhal"},"content":"        try {","lastModifiedDate":"2023-11-08"},{"lineNumber":141,"author":{"gitId":"jacqhal"},"content":"            for (int i \u003d 0; i \u003c taskNumsStrArray.length; i++) {","lastModifiedDate":"2023-11-13"},{"lineNumber":142,"author":{"gitId":"jacqhal"},"content":"                taskNums[i] \u003d Integer.parseInt(taskNumsStrArray[i].trim());","lastModifiedDate":"2023-11-13"},{"lineNumber":143,"author":{"gitId":"jacqhal"},"content":"            }","lastModifiedDate":"2023-11-13"},{"lineNumber":144,"author":{"gitId":"jacqhal"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":145,"author":{"gitId":"jacqhal"},"content":"            throw new InvalidCommandException(\"Please enter an integer number.\");","lastModifiedDate":"2023-11-13"},{"lineNumber":146,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":147,"author":{"gitId":"jacqhal"},"content":"        return taskNums;","lastModifiedDate":"2023-11-13"},{"lineNumber":148,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":149,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":150,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":151,"author":{"gitId":"jacqhal"},"content":"     * Returns a TodoCommand object, instantiating it with the task description","lastModifiedDate":"2023-11-18"},{"lineNumber":152,"author":{"gitId":"jacqhal"},"content":"     * as parsed from the commandArgs input by the user.","lastModifiedDate":"2023-11-18"},{"lineNumber":153,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":154,"author":{"gitId":"jacqhal"},"content":"     * @param commandArgs The arguments of the command.","lastModifiedDate":"2023-11-18"},{"lineNumber":155,"author":{"gitId":"jacqhal"},"content":"     * @return A TodoCommand or InvalidCommand object.","lastModifiedDate":"2023-11-18"},{"lineNumber":156,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":157,"author":{"gitId":"jacqhal"},"content":"    private Command prepareTodo(String commandArgs) {","lastModifiedDate":"2023-11-13"},{"lineNumber":158,"author":{"gitId":"jacqhal"},"content":"        String desc \u003d commandArgs.trim();","lastModifiedDate":"2023-11-08"},{"lineNumber":159,"author":{"gitId":"jacqhal"},"content":"        if (desc.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":160,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(\"Enter a description for your todo.\");","lastModifiedDate":"2023-11-08"},{"lineNumber":161,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":162,"author":{"gitId":"jacqhal"},"content":"        return new TodoCommand(desc);","lastModifiedDate":"2023-11-08"},{"lineNumber":163,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":164,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":165,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":166,"author":{"gitId":"jacqhal"},"content":"     * Returns a DeadlineCommand object, instantiating it with the task description and \"by\" date","lastModifiedDate":"2023-11-18"},{"lineNumber":167,"author":{"gitId":"jacqhal"},"content":"     * as parsed from the commandArgs input by the user.","lastModifiedDate":"2023-11-18"},{"lineNumber":168,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":169,"author":{"gitId":"jacqhal"},"content":"     * @param commandArgs The arguments of the command.","lastModifiedDate":"2023-11-18"},{"lineNumber":170,"author":{"gitId":"jacqhal"},"content":"     * @return A DeadlineCommand or InvalidCommand object.","lastModifiedDate":"2023-11-18"},{"lineNumber":171,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":172,"author":{"gitId":"jacqhal"},"content":"    private Command prepareDeadline(String commandArgs) {","lastModifiedDate":"2023-11-13"},{"lineNumber":173,"author":{"gitId":"jacqhal"},"content":"        assert commandArgs.equals(commandArgs.trim()) : \"String was not trimmed as expected: \" + commandArgs;","lastModifiedDate":"2023-11-18"},{"lineNumber":174,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":175,"author":{"gitId":"jacqhal"},"content":"        Matcher matcher \u003d DEADLINE_ARGUMENT_FORMAT.matcher(commandArgs);","lastModifiedDate":"2023-11-18"},{"lineNumber":176,"author":{"gitId":"jacqhal"},"content":"        if(!matcher.matches()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":177,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(\"Please follow this command format for \\\"deadline\\\":\\n\" +","lastModifiedDate":"2023-11-08"},{"lineNumber":178,"author":{"gitId":"jacqhal"},"content":"                    \"deadline \u003cdescription\u003e /by \u003cdate\u003e\");","lastModifiedDate":"2023-11-08"},{"lineNumber":179,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":180,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":181,"author":{"gitId":"jacqhal"},"content":"        String desc \u003d matcher.group(\"desc\").trim();","lastModifiedDate":"2023-11-08"},{"lineNumber":182,"author":{"gitId":"jacqhal"},"content":"        String by \u003d matcher.group(\"by\").trim();","lastModifiedDate":"2023-11-08"},{"lineNumber":183,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":184,"author":{"gitId":"jacqhal"},"content":"        if (desc.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":185,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(\"Enter a description for your deadline.\");","lastModifiedDate":"2023-11-08"},{"lineNumber":186,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":187,"author":{"gitId":"jacqhal"},"content":"        if (by.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":188,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(\"Enter the /by parameter for your deadline.\");","lastModifiedDate":"2023-11-08"},{"lineNumber":189,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":190,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":191,"author":{"gitId":"jacqhal"},"content":"        try {","lastModifiedDate":"2023-11-13"},{"lineNumber":192,"author":{"gitId":"jacqhal"},"content":"            by \u003d parseDateTime(by);","lastModifiedDate":"2023-11-13"},{"lineNumber":193,"author":{"gitId":"jacqhal"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":194,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(e.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":195,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":196,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":197,"author":{"gitId":"jacqhal"},"content":"        return new DeadlineCommand(desc, by);","lastModifiedDate":"2023-11-08"},{"lineNumber":198,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":199,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":200,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":201,"author":{"gitId":"jacqhal"},"content":"     * Returns an EventCommand object, instantiating it with the task description, \"from\" date and \"to\" date","lastModifiedDate":"2023-11-18"},{"lineNumber":202,"author":{"gitId":"jacqhal"},"content":"     * as parsed from the commandArgs input by the user.","lastModifiedDate":"2023-11-18"},{"lineNumber":203,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":204,"author":{"gitId":"jacqhal"},"content":"     * @param commandArgs The arguments of the command.","lastModifiedDate":"2023-11-18"},{"lineNumber":205,"author":{"gitId":"jacqhal"},"content":"     * @return An EventCommand or InvalidCommand object.","lastModifiedDate":"2023-11-18"},{"lineNumber":206,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":207,"author":{"gitId":"jacqhal"},"content":"    private Command prepareEvent(String commandArgs) {","lastModifiedDate":"2023-11-13"},{"lineNumber":208,"author":{"gitId":"jacqhal"},"content":"        assert commandArgs.equals(commandArgs.trim()) : \"String was not trimmed as expected: \" + commandArgs;","lastModifiedDate":"2023-11-18"},{"lineNumber":209,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":210,"author":{"gitId":"jacqhal"},"content":"        Matcher matcher \u003d EVENT_ARGUMENT_FORMAT.matcher(commandArgs);","lastModifiedDate":"2023-11-18"},{"lineNumber":211,"author":{"gitId":"jacqhal"},"content":"        if(!matcher.matches()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":212,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(\"Please follow this command format for \\\"event\\\":\\n\" +","lastModifiedDate":"2023-11-08"},{"lineNumber":213,"author":{"gitId":"jacqhal"},"content":"                    \"event \u003cdescription\u003e /from \u003cdate\u003e /to \u003cdate\u003e\");","lastModifiedDate":"2023-11-08"},{"lineNumber":214,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":215,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":216,"author":{"gitId":"jacqhal"},"content":"        String desc \u003d matcher.group(\"desc\").trim();","lastModifiedDate":"2023-11-08"},{"lineNumber":217,"author":{"gitId":"jacqhal"},"content":"        String from \u003d matcher.group(\"from\").trim();","lastModifiedDate":"2023-11-08"},{"lineNumber":218,"author":{"gitId":"jacqhal"},"content":"        String to \u003d matcher.group(\"to\").trim();","lastModifiedDate":"2023-11-08"},{"lineNumber":219,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":220,"author":{"gitId":"jacqhal"},"content":"        if (desc.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":221,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(\"Enter a description for your event.\");","lastModifiedDate":"2023-11-08"},{"lineNumber":222,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":223,"author":{"gitId":"jacqhal"},"content":"        if (from.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":224,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(\"Enter the /from parameter for your event.\");","lastModifiedDate":"2023-11-08"},{"lineNumber":225,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":226,"author":{"gitId":"jacqhal"},"content":"        if (to.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":227,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(\"Enter the /to parameter for your event.\");","lastModifiedDate":"2023-11-08"},{"lineNumber":228,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":229,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":230,"author":{"gitId":"jacqhal"},"content":"        try {","lastModifiedDate":"2023-11-13"},{"lineNumber":231,"author":{"gitId":"jacqhal"},"content":"            from \u003d parseDateTime(from);","lastModifiedDate":"2023-11-13"},{"lineNumber":232,"author":{"gitId":"jacqhal"},"content":"            to \u003d parseDateTime(to);","lastModifiedDate":"2023-11-13"},{"lineNumber":233,"author":{"gitId":"jacqhal"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-11-13"},{"lineNumber":234,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(e.getMessage());","lastModifiedDate":"2023-11-13"},{"lineNumber":235,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":236,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":237,"author":{"gitId":"jacqhal"},"content":"        return new EventCommand(desc, from ,to);","lastModifiedDate":"2023-11-08"},{"lineNumber":238,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":239,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":240,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-19"},{"lineNumber":241,"author":{"gitId":"jacqhal"},"content":"     * Returns a ScheduleCommand object, instantiating it with the date string","lastModifiedDate":"2023-11-19"},{"lineNumber":242,"author":{"gitId":"jacqhal"},"content":"     * as parsed from the commandArgs input by the user.","lastModifiedDate":"2023-11-19"},{"lineNumber":243,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-19"},{"lineNumber":244,"author":{"gitId":"jacqhal"},"content":"     * @param commandArgs The arguments of the command.","lastModifiedDate":"2023-11-19"},{"lineNumber":245,"author":{"gitId":"jacqhal"},"content":"     * @return A ScheduleCommand or InvalidCommand object.","lastModifiedDate":"2023-11-19"},{"lineNumber":246,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-19"},{"lineNumber":247,"author":{"gitId":"jacqhal"},"content":"    private Command prepareSchedule(String commandArgs) {","lastModifiedDate":"2023-11-19"},{"lineNumber":248,"author":{"gitId":"jacqhal"},"content":"        if (commandArgs.isEmpty()) {","lastModifiedDate":"2023-11-19"},{"lineNumber":249,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(\"Enter a date to view schedule.\");","lastModifiedDate":"2023-11-19"},{"lineNumber":250,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-19"},{"lineNumber":251,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":252,"author":{"gitId":"jacqhal"},"content":"        String targetDate;","lastModifiedDate":"2023-11-19"},{"lineNumber":253,"author":{"gitId":"jacqhal"},"content":"        try {","lastModifiedDate":"2023-11-19"},{"lineNumber":254,"author":{"gitId":"jacqhal"},"content":"            targetDate \u003d parseDateTime(commandArgs);","lastModifiedDate":"2023-11-19"},{"lineNumber":255,"author":{"gitId":"jacqhal"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-11-19"},{"lineNumber":256,"author":{"gitId":"jacqhal"},"content":"            return new InvalidCommand(e.getMessage());","lastModifiedDate":"2023-11-19"},{"lineNumber":257,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-19"},{"lineNumber":258,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":259,"author":{"gitId":"jacqhal"},"content":"        return new ScheduleCommand(targetDate);","lastModifiedDate":"2023-11-19"},{"lineNumber":260,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":261,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":262,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-13"},{"lineNumber":263,"author":{"gitId":"jacqhal"},"content":"     * Returns a string of the parsed date. It will check if dateStr is in the accepted date format (d/M/yyyy HHmm)","lastModifiedDate":"2023-11-18"},{"lineNumber":264,"author":{"gitId":"jacqhal"},"content":"     * then parse it into a LocalDateTime object before finally formatting it as a string.","lastModifiedDate":"2023-11-18"},{"lineNumber":265,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-13"},{"lineNumber":266,"author":{"gitId":"jacqhal"},"content":"     * @param dateStr The date entered by the user","lastModifiedDate":"2023-11-13"},{"lineNumber":267,"author":{"gitId":"jacqhal"},"content":"     * @return Date and time in the format: dd MMM yyyy, hh:mm a","lastModifiedDate":"2023-11-13"},{"lineNumber":268,"author":{"gitId":"jacqhal"},"content":"     * @throws InvalidCommandException If user entered date does not follow the specified format","lastModifiedDate":"2023-11-13"},{"lineNumber":269,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-13"},{"lineNumber":270,"author":{"gitId":"jacqhal"},"content":"    public String parseDateTime(String dateStr) throws InvalidCommandException {","lastModifiedDate":"2023-11-18"},{"lineNumber":271,"author":{"gitId":"jacqhal"},"content":"        Matcher dateTimeMatcher \u003d DATETIME_REGEX_PATTERN.matcher(dateStr);","lastModifiedDate":"2023-11-19"},{"lineNumber":272,"author":{"gitId":"jacqhal"},"content":"        if(!dateTimeMatcher.matches()) {","lastModifiedDate":"2023-11-19"},{"lineNumber":273,"author":{"gitId":"jacqhal"},"content":"            throw new InvalidCommandException(\"Please follow this format for entering a date:\\n\" + PARSED_DATETIME_STRING);","lastModifiedDate":"2023-11-19"},{"lineNumber":274,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-13"},{"lineNumber":275,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-13"},{"lineNumber":276,"author":{"gitId":"jacqhal"},"content":"        String formattedDateTime;","lastModifiedDate":"2023-11-18"},{"lineNumber":277,"author":{"gitId":"jacqhal"},"content":"        try {","lastModifiedDate":"2023-11-18"},{"lineNumber":278,"author":{"gitId":"jacqhal"},"content":"            LocalDateTime parsedDateTime \u003d LocalDateTime.parse(dateStr, PARSED_DATETIME_FORMATTER);","lastModifiedDate":"2023-11-19"},{"lineNumber":279,"author":{"gitId":"jacqhal"},"content":"            formattedDateTime \u003d parsedDateTime.format(FORMATTED_DATETIME_FORMATTER);","lastModifiedDate":"2023-11-19"},{"lineNumber":280,"author":{"gitId":"jacqhal"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2023-11-18"},{"lineNumber":281,"author":{"gitId":"jacqhal"},"content":"            throw new InvalidCommandException(\"Entered date is invalid. Please check your input.\");","lastModifiedDate":"2023-11-18"},{"lineNumber":282,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-18"},{"lineNumber":283,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":284,"author":{"gitId":"jacqhal"},"content":"        return formattedDateTime;","lastModifiedDate":"2023-11-13"},{"lineNumber":285,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":286,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"jacqhal":286}},{"path":"src/main/java/joshua/JoshuaUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"// JoshuaUi.java handles chatbot-related logic","lastModifiedDate":"2023-10-21"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"package joshua;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":" * Provides user interface methods for the chatbot.","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"public class JoshuaUi {","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"    private final Scanner scanner;","lastModifiedDate":"2023-11-08"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"    public JoshuaUi() {","lastModifiedDate":"2023-10-21"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"    public void joshuaSays(String str) {","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"        str \u003d str.toUpperCase();","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"        System.out.println(str + \"\\n\");","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"    public void printGreetings() {","lastModifiedDate":"2023-11-08"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"        joshuaSays(\"GREETINGS PROFESSOR FALKEN.\\n\\n\"","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"                     + \"SHALL WE PLAY A GAME?\\n\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tLIST\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tMARK #\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tUNMARK #\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tTODO\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tDEADLINE /BY\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tEVENT /FROM /TO\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tFIND\\n\"","lastModifiedDate":"2023-11-13"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tSCHEDULE #\\n\"","lastModifiedDate":"2023-11-19"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tDELETE #\\n\"","lastModifiedDate":"2023-11-13"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tHELP #\\n\"","lastModifiedDate":"2023-11-18"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tBYE\\n\"","lastModifiedDate":"2023-11-08"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"                     + \"\\tGLOBAL THERMONUCLEAR WAR\");","lastModifiedDate":"2023-11-08"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"    public void printSuccessfulLoad() {","lastModifiedDate":"2023-11-08"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"        joshuaSays(\"YOUR TASK LIST HAS BEEN LOADED FROM AN EXISTING FILE\\n___\");","lastModifiedDate":"2023-11-18"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":42,"author":{"gitId":"jacqhal"},"content":"    public void printExitMessage() {","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"jacqhal"},"content":"        joshuaSays(\"GOODBYE.\");","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"jacqhal"},"content":"    public void printSaveMessage() {","lastModifiedDate":"2023-11-08"},{"lineNumber":47,"author":{"gitId":"jacqhal"},"content":"        joshuaSays(\"SAVING TASK LIST IN ./DATA/JOSHUA.TXT...\");","lastModifiedDate":"2023-11-19"},{"lineNumber":48,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"jacqhal"},"content":"    public void printLoadingError() {","lastModifiedDate":"2023-11-08"},{"lineNumber":51,"author":{"gitId":"jacqhal"},"content":"        joshuaSays(\"UNABLE TO LOAD TASK LIST FROM STORAGE.\");","lastModifiedDate":"2023-11-18"},{"lineNumber":52,"author":{"gitId":"jacqhal"},"content":"        joshuaSays(\"PLEASE CHECK JOSHUA.TXT AND ENSURE THAT THE FORMATTING IS CORRECT.\\n___\");","lastModifiedDate":"2023-11-19"},{"lineNumber":53,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-18"},{"lineNumber":54,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-18"},{"lineNumber":55,"author":{"gitId":"jacqhal"},"content":"    public void printFileNotFoundError() {","lastModifiedDate":"2023-11-18"},{"lineNumber":56,"author":{"gitId":"jacqhal"},"content":"        joshuaSays(\"COULD NOT FIND AN EXISTING TASK LIST IN STORAGE.\");","lastModifiedDate":"2023-11-19"},{"lineNumber":57,"author":{"gitId":"jacqhal"},"content":"        joshuaSays(\"I HAVE CREATED AN EMPTY TASK LIST FOR YOU INSTEAD, PROFESSOR FALKEN.\\n___\");","lastModifiedDate":"2023-11-19"},{"lineNumber":58,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"jacqhal"},"content":"    public String readCommand() {","lastModifiedDate":"2023-11-08"},{"lineNumber":61,"author":{"gitId":"jacqhal"},"content":"        System.out.print(\"\u003e\u003e \");","lastModifiedDate":"2023-11-08"},{"lineNumber":62,"author":{"gitId":"jacqhal"},"content":"        String input \u003d scanner.nextLine();","lastModifiedDate":"2023-11-08"},{"lineNumber":63,"author":{"gitId":"jacqhal"},"content":"        input \u003d input.toLowerCase();","lastModifiedDate":"2023-11-08"},{"lineNumber":64,"author":{"gitId":"jacqhal"},"content":"        return input;","lastModifiedDate":"2023-11-08"},{"lineNumber":65,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":66,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":67,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"jacqhal":67}},{"path":"src/main/java/joshua/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"// MyList.java manages the list of tasks","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"package joshua;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import task.Task;","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":" * Stores tasks created by the user and allows operations on tasks.","lastModifiedDate":"2023-11-18"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"public class TaskList {","lastModifiedDate":"2023-10-18"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"    private ArrayList\u003cTask\u003e tasklist \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"    public TaskList(){","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"    public Task getTask(int taskNum) {","lastModifiedDate":"2023-11-13"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"        int taskIdx \u003d taskNum - 1;","lastModifiedDate":"2023-11-13"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"        return tasklist.get(taskIdx);","lastModifiedDate":"2023-11-13"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    public int listSize() {","lastModifiedDate":"2023-10-18"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"        return tasklist.size();","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"    public void markTaskAsDone(int taskNum) {","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"        Task task \u003d getTask(taskNum);","lastModifiedDate":"2023-11-13"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"        task.setDone(true);","lastModifiedDate":"2023-11-19"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"    public void markTaskAsNotDone(int taskNum) {","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"        Task task \u003d getTask(taskNum);","lastModifiedDate":"2023-11-13"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"        task.setDone(false);","lastModifiedDate":"2023-11-19"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"    public void addToTaskList(Task task) {","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"        tasklist.add(task);","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"    public void deleteFromTaskList(Task task) {","lastModifiedDate":"2023-10-18"},{"lineNumber":42,"author":{"gitId":"jacqhal"},"content":"        tasklist.remove(task);","lastModifiedDate":"2023-10-18"},{"lineNumber":43,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":46,"author":{"gitId":"jacqhal"},"content":"     * Returns a string representation of the TaskList.","lastModifiedDate":"2023-11-18"},{"lineNumber":47,"author":{"gitId":"jacqhal"},"content":"     * Task numbers are indicated for each task and each task is on its own line.","lastModifiedDate":"2023-11-18"},{"lineNumber":48,"author":{"gitId":"jacqhal"},"content":"     * Example:","lastModifiedDate":"2023-11-18"},{"lineNumber":49,"author":{"gitId":"jacqhal"},"content":"     * 1. [T] [ ] read book","lastModifiedDate":"2023-11-18"},{"lineNumber":50,"author":{"gitId":"jacqhal"},"content":"     * 2. [D] [ ] return book (1 Dec 2023, 6:00 pm)","lastModifiedDate":"2023-11-18"},{"lineNumber":51,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":52,"author":{"gitId":"jacqhal"},"content":"     * @return A formatted list of the tasks in the TaskList.","lastModifiedDate":"2023-11-18"},{"lineNumber":53,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":54,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"jacqhal"},"content":"    public String toString() {","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"jacqhal"},"content":"        StringBuilder str \u003d new StringBuilder();","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"jacqhal"},"content":"        for (int i \u003d 0; i \u003c tasklist.size(); i++) {","lastModifiedDate":"2023-10-08"},{"lineNumber":58,"author":{"gitId":"jacqhal"},"content":"            int count \u003d i + 1;","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"jacqhal"},"content":"            str.append(count).append(\". \").append(tasklist.get(i)).append(\"\\n\");","lastModifiedDate":"2023-10-08"},{"lineNumber":60,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"jacqhal"},"content":"        return str.toString();","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"jacqhal":63}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package storage;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import task.Task;","lastModifiedDate":"2023-11-08"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import task.ToDo;","lastModifiedDate":"2023-11-08"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import task.Deadline;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"import task.Event;","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"import joshua.TaskList;","lastModifiedDate":"2023-11-08"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"import exceptions.IllegalStorageFormat;","lastModifiedDate":"2023-10-29"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"import java.io.File;","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-10-29"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-11-19"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-11-19"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":" * Saves and loads tasks for the existing task list.","lastModifiedDate":"2023-11-18"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"public class Storage {","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"    public static final Pattern BASIC_STORED_TASK_PATTERN \u003d Pattern.compile(\"(?\u003ctaskType\u003e[^|]) \\\\| (?\u003cisDone\u003e[^|]) \\\\| (?\u003cargs\u003e.*)\");","lastModifiedDate":"2023-11-08"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"    public static final Pattern STORED_DEADLINE_ARGS_PATTERN \u003d Pattern.compile(\"(?\u003cdesc\u003e[^|]*) \\\\| (?\u003cby\u003e[^|]*)\");","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"    public static final Pattern STORED_EVENT_ARGS_PATTERN \u003d Pattern.compile(\"(?\u003cdesc\u003e[^|]*) \\\\| (?\u003cfrom\u003e[^|]*) \\\\| (?\u003cto\u003e[^|]*)\");","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"    private final String filepath;","lastModifiedDate":"2023-11-18"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2023-11-18"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"        this.filepath \u003d filepath;","lastModifiedDate":"2023-11-18"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-08"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"     * Writes the task list from the latest session into joshua.txt","lastModifiedDate":"2023-11-08"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-08"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"     * @param taskList The task list from the latest session of running the Joshua program.","lastModifiedDate":"2023-11-18"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"     * @throws IOException If error occurs when writing lines to stored file.","lastModifiedDate":"2023-11-18"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-08"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"    public void save(TaskList taskList) throws IOException {","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"        Files.createDirectories(Paths.get(\"./data\"));","lastModifiedDate":"2023-11-19"},{"lineNumber":42,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":43,"author":{"gitId":"jacqhal"},"content":"        FileWriter fw \u003d new FileWriter(filepath);","lastModifiedDate":"2023-11-18"},{"lineNumber":44,"author":{"gitId":"jacqhal"},"content":"        for (int i \u003d 0; i \u003c taskList.listSize(); i++) {","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"jacqhal"},"content":"            int taskNum \u003d i + 1;","lastModifiedDate":"2023-11-13"},{"lineNumber":46,"author":{"gitId":"jacqhal"},"content":"            Task task \u003d taskList.getTask(taskNum);","lastModifiedDate":"2023-11-13"},{"lineNumber":47,"author":{"gitId":"jacqhal"},"content":"            fw.write(task.toStorageString() + \"\\n\");","lastModifiedDate":"2023-11-08"},{"lineNumber":48,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":49,"author":{"gitId":"jacqhal"},"content":"        fw.close();","lastModifiedDate":"2023-11-08"},{"lineNumber":50,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":51,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"jacqhal"},"content":"     * Reads the stored task list in joshua.txt and returns it as a TaskList object","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"jacqhal"},"content":"     * @return TaskList object with all the stored Tasks loaded.","lastModifiedDate":"2023-11-18"},{"lineNumber":56,"author":{"gitId":"jacqhal"},"content":"     * @throws FileNotFoundException If the storage file is not found.","lastModifiedDate":"2023-11-18"},{"lineNumber":57,"author":{"gitId":"jacqhal"},"content":"     * @throws IllegalStorageFormat If the storage file has an illegal format.","lastModifiedDate":"2023-11-18"},{"lineNumber":58,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"jacqhal"},"content":"    public TaskList load() throws FileNotFoundException, IllegalStorageFormat {","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"jacqhal"},"content":"        File file \u003d new File(filepath);","lastModifiedDate":"2023-11-18"},{"lineNumber":61,"author":{"gitId":"jacqhal"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"jacqhal"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"jacqhal"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"jacqhal"},"content":"            Task task \u003d parseTaskFromStorage(scanner.nextLine());","lastModifiedDate":"2023-11-08"},{"lineNumber":66,"author":{"gitId":"jacqhal"},"content":"            tasklist.addToTaskList(task);","lastModifiedDate":"2023-10-29"},{"lineNumber":67,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"jacqhal"},"content":"        scanner.close();","lastModifiedDate":"2023-11-13"},{"lineNumber":70,"author":{"gitId":"jacqhal"},"content":"        return tasklist;","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"jacqhal"},"content":"     * Reads a line from the text file, determines the type of Task, and returns that Task (ToDo, Deadline or Event)","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"jacqhal"},"content":"     * Eg: E | 0 | project meeting | Aug 6th 2pm | Aug 6th 4pm","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"jacqhal"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-11-18"},{"lineNumber":77,"author":{"gitId":"jacqhal"},"content":"     * The method checks if the line matches the basic stored task pattern (ie: taskType | isDone | args)","lastModifiedDate":"2023-11-18"},{"lineNumber":78,"author":{"gitId":"jacqhal"},"content":"     * and passes the args to their respective constructor or \"prepare\" methods to create their Task objects.","lastModifiedDate":"2023-11-18"},{"lineNumber":79,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-10-29"},{"lineNumber":80,"author":{"gitId":"jacqhal"},"content":"     * @param txtLine A line from stored file joshua.txt.","lastModifiedDate":"2023-11-18"},{"lineNumber":81,"author":{"gitId":"jacqhal"},"content":"     * @return A new task object of the specified type (Todo, Deadline, or Event).","lastModifiedDate":"2023-11-18"},{"lineNumber":82,"author":{"gitId":"jacqhal"},"content":"     * @throws IllegalStorageFormat If an unsupported task type is provided.","lastModifiedDate":"2023-11-18"},{"lineNumber":83,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":84,"author":{"gitId":"jacqhal"},"content":"    private Task parseTaskFromStorage(String txtLine) throws IllegalStorageFormat {","lastModifiedDate":"2023-11-08"},{"lineNumber":85,"author":{"gitId":"jacqhal"},"content":"        Matcher matcher \u003d BASIC_STORED_TASK_PATTERN.matcher(txtLine);","lastModifiedDate":"2023-11-08"},{"lineNumber":86,"author":{"gitId":"jacqhal"},"content":"        if(!matcher.matches()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":87,"author":{"gitId":"jacqhal"},"content":"            throw new IllegalStorageFormat(\"This line in joshua.txt does not meet the required format: \" + txtLine);","lastModifiedDate":"2023-11-08"},{"lineNumber":88,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":89,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":90,"author":{"gitId":"jacqhal"},"content":"        String taskType \u003d matcher.group(\"taskType\");","lastModifiedDate":"2023-11-08"},{"lineNumber":91,"author":{"gitId":"jacqhal"},"content":"        boolean isDone \u003d matcher.group(\"isDone\").equals(\"1\");","lastModifiedDate":"2023-11-08"},{"lineNumber":92,"author":{"gitId":"jacqhal"},"content":"        String args \u003d matcher.group(\"args\");","lastModifiedDate":"2023-11-08"},{"lineNumber":93,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":94,"author":{"gitId":"jacqhal"},"content":"        switch (taskType) {","lastModifiedDate":"2023-10-29"},{"lineNumber":95,"author":{"gitId":"jacqhal"},"content":"        case \"T\":","lastModifiedDate":"2023-10-29"},{"lineNumber":96,"author":{"gitId":"jacqhal"},"content":"            return new ToDo(args, isDone);","lastModifiedDate":"2023-11-08"},{"lineNumber":97,"author":{"gitId":"jacqhal"},"content":"        case \"D\":","lastModifiedDate":"2023-10-29"},{"lineNumber":98,"author":{"gitId":"jacqhal"},"content":"            return prepareDeadline(isDone, args);","lastModifiedDate":"2023-11-08"},{"lineNumber":99,"author":{"gitId":"jacqhal"},"content":"        case \"E\":","lastModifiedDate":"2023-10-29"},{"lineNumber":100,"author":{"gitId":"jacqhal"},"content":"            return prepareEvent(isDone, args);","lastModifiedDate":"2023-11-08"},{"lineNumber":101,"author":{"gitId":"jacqhal"},"content":"        default:","lastModifiedDate":"2023-10-29"},{"lineNumber":102,"author":{"gitId":"jacqhal"},"content":"            throw new IllegalStorageFormat(\"Could not detect task type.\");","lastModifiedDate":"2023-10-29"},{"lineNumber":103,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":104,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":105,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":106,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":107,"author":{"gitId":"jacqhal"},"content":"     * Returns a Deadline object instantiated with the task description, \"isDone\" status and","lastModifiedDate":"2023-11-18"},{"lineNumber":108,"author":{"gitId":"jacqhal"},"content":"     * \"by\" date as parsed from the storedArgs.","lastModifiedDate":"2023-11-18"},{"lineNumber":109,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":110,"author":{"gitId":"jacqhal"},"content":"     * @param isDone The task has been marked done.","lastModifiedDate":"2023-11-18"},{"lineNumber":111,"author":{"gitId":"jacqhal"},"content":"     * @param storedArgs The arguments from a line in storage.","lastModifiedDate":"2023-11-18"},{"lineNumber":112,"author":{"gitId":"jacqhal"},"content":"     * @return A Deadline object.","lastModifiedDate":"2023-11-18"},{"lineNumber":113,"author":{"gitId":"jacqhal"},"content":"     * @throws IllegalStorageFormat If the stored string is of illegal format.","lastModifiedDate":"2023-11-18"},{"lineNumber":114,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":115,"author":{"gitId":"jacqhal"},"content":"    private Task prepareDeadline(boolean isDone, String storedArgs) throws IllegalStorageFormat {","lastModifiedDate":"2023-11-08"},{"lineNumber":116,"author":{"gitId":"jacqhal"},"content":"        Matcher matcher \u003d STORED_DEADLINE_ARGS_PATTERN.matcher(storedArgs);","lastModifiedDate":"2023-11-08"},{"lineNumber":117,"author":{"gitId":"jacqhal"},"content":"        if(!matcher.matches()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":118,"author":{"gitId":"jacqhal"},"content":"            throw new IllegalStorageFormat(\"Invalid arguments for deadline: \" + storedArgs);","lastModifiedDate":"2023-11-08"},{"lineNumber":119,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":120,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":121,"author":{"gitId":"jacqhal"},"content":"        String desc \u003d matcher.group(\"desc\").trim();","lastModifiedDate":"2023-11-08"},{"lineNumber":122,"author":{"gitId":"jacqhal"},"content":"        String by \u003d matcher.group(\"by\").trim();","lastModifiedDate":"2023-11-08"},{"lineNumber":123,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":124,"author":{"gitId":"jacqhal"},"content":"        if (desc.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":125,"author":{"gitId":"jacqhal"},"content":"            throw new IllegalStorageFormat(\"The stored description for this deadline is empty: \" + storedArgs);","lastModifiedDate":"2023-11-18"},{"lineNumber":126,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":127,"author":{"gitId":"jacqhal"},"content":"        if (by.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":128,"author":{"gitId":"jacqhal"},"content":"            throw new IllegalStorageFormat(\"The stored \\\"by\\\" date for this deadline is empty: \" + storedArgs);","lastModifiedDate":"2023-11-18"},{"lineNumber":129,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-08"},{"lineNumber":130,"author":{"gitId":"jacqhal"},"content":"        return new Deadline(desc, isDone, by);","lastModifiedDate":"2023-11-08"},{"lineNumber":131,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":132,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":133,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":134,"author":{"gitId":"jacqhal"},"content":"     * Returns an Event object instantiated with the task description, \"isDone\" status,","lastModifiedDate":"2023-11-18"},{"lineNumber":135,"author":{"gitId":"jacqhal"},"content":"     * \"from\" date and \"to\" date as parsed from the storedArgs.","lastModifiedDate":"2023-11-18"},{"lineNumber":136,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":137,"author":{"gitId":"jacqhal"},"content":"     * @param isDone The task has been marked done.","lastModifiedDate":"2023-11-18"},{"lineNumber":138,"author":{"gitId":"jacqhal"},"content":"     * @param storedArgs The arguments from a line in storage.","lastModifiedDate":"2023-11-18"},{"lineNumber":139,"author":{"gitId":"jacqhal"},"content":"     * @return An Event object.","lastModifiedDate":"2023-11-18"},{"lineNumber":140,"author":{"gitId":"jacqhal"},"content":"     * @throws IllegalStorageFormat If the stored string is of illegal format.","lastModifiedDate":"2023-11-18"},{"lineNumber":141,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":142,"author":{"gitId":"jacqhal"},"content":"    private Task prepareEvent(boolean isDone, String storedArgs) throws IllegalStorageFormat {","lastModifiedDate":"2023-11-08"},{"lineNumber":143,"author":{"gitId":"jacqhal"},"content":"        Matcher matcher \u003d STORED_EVENT_ARGS_PATTERN.matcher(storedArgs);","lastModifiedDate":"2023-11-08"},{"lineNumber":144,"author":{"gitId":"jacqhal"},"content":"        if(!matcher.matches()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":145,"author":{"gitId":"jacqhal"},"content":"            throw new IllegalStorageFormat(\"Invalid arguments for event: \" + storedArgs);","lastModifiedDate":"2023-11-08"},{"lineNumber":146,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":147,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":148,"author":{"gitId":"jacqhal"},"content":"        String desc \u003d matcher.group(\"desc\").trim();","lastModifiedDate":"2023-11-08"},{"lineNumber":149,"author":{"gitId":"jacqhal"},"content":"        String from \u003d matcher.group(\"from\").trim();","lastModifiedDate":"2023-11-08"},{"lineNumber":150,"author":{"gitId":"jacqhal"},"content":"        String to \u003d matcher.group(\"to\").trim();","lastModifiedDate":"2023-11-08"},{"lineNumber":151,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":152,"author":{"gitId":"jacqhal"},"content":"        if (desc.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":153,"author":{"gitId":"jacqhal"},"content":"            throw new IllegalStorageFormat(\"The stored description for this event is empty: \" + storedArgs);","lastModifiedDate":"2023-11-18"},{"lineNumber":154,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":155,"author":{"gitId":"jacqhal"},"content":"        if (from.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":156,"author":{"gitId":"jacqhal"},"content":"            throw new IllegalStorageFormat(\"The stored \\\"from\\\" date for this event is empty: \" + storedArgs);","lastModifiedDate":"2023-11-18"},{"lineNumber":157,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":158,"author":{"gitId":"jacqhal"},"content":"        if (to.isEmpty()) {","lastModifiedDate":"2023-11-08"},{"lineNumber":159,"author":{"gitId":"jacqhal"},"content":"            throw new IllegalStorageFormat(\"The stored \\\"to\\\" date for this event is empty: \" + storedArgs);","lastModifiedDate":"2023-11-18"},{"lineNumber":160,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":161,"author":{"gitId":"jacqhal"},"content":"        return new Event(desc, isDone, from, to);","lastModifiedDate":"2023-11-08"},{"lineNumber":162,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":163,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"jacqhal":163}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package task;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-11-19"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-11-19"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":" * Represents a deadline task.","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"    private final String by;","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"    public Deadline(String desc, String by) {","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"        super(desc);","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    public Deadline(String desc, boolean isDone, String by) {","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"        super(desc, isDone);","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"    public String getBy() {","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"        return by;","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"    public boolean isDateInRange(LocalDate targetDate) {","lastModifiedDate":"2023-11-19"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, h:mm a\");","lastModifiedDate":"2023-11-19"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"        LocalDate byLdt \u003d LocalDate.parse(by, formatter);","lastModifiedDate":"2023-11-19"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"        return !targetDate.isBefore(byLdt) \u0026\u0026 !targetDate.isAfter(byLdt);","lastModifiedDate":"2023-11-19"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-11-08"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"        return \"D | \" + super.toStorageString() + \" | \" + by;","lastModifiedDate":"2023-11-08"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"    public String toString() {","lastModifiedDate":"2023-10-08"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"        return \"[D] \" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-10-08"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"jacqhal":41}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package task;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-11-19"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-11-19"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":" * Represents an event task.","lastModifiedDate":"2023-11-18"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"public class Event extends Task {","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"    private final String from;","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"    private final String to;","lastModifiedDate":"2023-11-08"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    public Event(String desc, String from, String to) {","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"        super(desc);","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"    public Event(String desc, boolean isDone, String from, String to) {","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"        super(desc, isDone);","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"    public String getFrom() {","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"        return from;","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"    public String getTo() {","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"        return to;","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"    public boolean isDateInRange(LocalDate targetDate) {","lastModifiedDate":"2023-11-19"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, h:mm a\");","lastModifiedDate":"2023-11-19"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"        LocalDate fromDateObj \u003d LocalDate.parse(from, formatter);","lastModifiedDate":"2023-11-19"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"        LocalDate toDateObj \u003d LocalDate.parse(to, formatter);","lastModifiedDate":"2023-11-19"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"        return !targetDate.isBefore(fromDateObj) \u0026\u0026 !targetDate.isAfter(toDateObj);","lastModifiedDate":"2023-11-19"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-11-08"},{"lineNumber":42,"author":{"gitId":"jacqhal"},"content":"        return \"E | \" + super.toStorageString() + \" | \" + from + \" | \" + to;","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":44,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":45,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":46,"author":{"gitId":"jacqhal"},"content":"    public String toString() {","lastModifiedDate":"2023-10-08"},{"lineNumber":47,"author":{"gitId":"jacqhal"},"content":"        return \"[E] \" + super.toString() + \" (from: \" + from + \", to: \" + to + \")\";","lastModifiedDate":"2023-10-08"},{"lineNumber":48,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":49,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"jacqhal":49}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package task;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":" * Represents a task.","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"public class Task {","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"    private String desc;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"    private boolean isDone;","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"    public Task(String desc){","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"    public Task(String desc, boolean isDone){","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"    public String getDesc() {","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"        return desc;","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"    public void setDesc(String desc) {","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"    public boolean getDone(){","lastModifiedDate":"2023-11-19"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"        return isDone;","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"    public void setDone(boolean isDone){","lastModifiedDate":"2023-11-19"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-11-08"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"        String doneMarker \u003d this.getDone() ? \"1\" : \"0\";","lastModifiedDate":"2023-11-19"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"        return doneMarker + \" | \" + desc;","lastModifiedDate":"2023-11-08"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"    /**","lastModifiedDate":"2023-11-18"},{"lineNumber":42,"author":{"gitId":"jacqhal"},"content":"     * Returns a string representation of the task in the format:","lastModifiedDate":"2023-11-18"},{"lineNumber":43,"author":{"gitId":"jacqhal"},"content":"     * \"[X] description\" if the task is marked as done,","lastModifiedDate":"2023-11-18"},{"lineNumber":44,"author":{"gitId":"jacqhal"},"content":"     * or \"[ ] description\" if the task is not done.","lastModifiedDate":"2023-11-18"},{"lineNumber":45,"author":{"gitId":"jacqhal"},"content":"     *","lastModifiedDate":"2023-11-18"},{"lineNumber":46,"author":{"gitId":"jacqhal"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2023-11-18"},{"lineNumber":47,"author":{"gitId":"jacqhal"},"content":"     */","lastModifiedDate":"2023-11-18"},{"lineNumber":48,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"jacqhal"},"content":"    public String toString() {","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"jacqhal"},"content":"        String doneMarker \u003d this.getDone() ? \"X\" : \" \";","lastModifiedDate":"2023-11-19"},{"lineNumber":51,"author":{"gitId":"jacqhal"},"content":"        return \"[\" + doneMarker + \"] \" + desc;","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":54,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-19"},{"lineNumber":55,"author":{"gitId":"jacqhal"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-11-19"},{"lineNumber":56,"author":{"gitId":"jacqhal"},"content":"        return obj.toString().equals(this.toString());","lastModifiedDate":"2023-11-19"},{"lineNumber":57,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":58,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"jacqhal":58}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package task;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"/**","lastModifiedDate":"2023-11-18"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":" * Represents a todo task.","lastModifiedDate":"2023-11-18"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":" */","lastModifiedDate":"2023-11-18"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"    public ToDo(String desc) {","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"        super(desc);","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"    public ToDo(String desc, boolean isDone) {","lastModifiedDate":"2023-10-29"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"        super(desc, isDone);","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"    public String toStorageString() {","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"        return \"T | \" + super.toStorageString();","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"    @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"    public String toString() {","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"        return \"[T] \" + super.toString();","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"jacqhal":24}},{"path":"src/test/java/joshua/JoshuaParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package joshua;","lastModifiedDate":"2023-11-19"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import commands.Command;","lastModifiedDate":"2023-11-19"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"import commands.DeadlineCommand;","lastModifiedDate":"2023-11-19"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import commands.EventCommand;","lastModifiedDate":"2023-11-19"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"import commands.TodoCommand;","lastModifiedDate":"2023-11-19"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2023-11-19"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-19"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-11-19"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"public class JoshuaParserTest {","lastModifiedDate":"2023-11-19"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    @Test","lastModifiedDate":"2023-11-19"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"    public void test_parseTodoCommand() {","lastModifiedDate":"2023-11-19"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"        JoshuaParser parser \u003d new JoshuaParser();","lastModifiedDate":"2023-11-19"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"        String desc \u003d \"read book\";","lastModifiedDate":"2023-11-19"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"        TodoCommand expected \u003d new TodoCommand(desc);","lastModifiedDate":"2023-11-19"},{"lineNumber":18,"author":{"gitId":"jacqhal"},"content":"        TodoCommand actual \u003d (TodoCommand) parser.parse(\"todo read book\");","lastModifiedDate":"2023-11-19"},{"lineNumber":19,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":20,"author":{"gitId":"jacqhal"},"content":"        assertEquals(expected.getTodoToAdd().toString(), actual.getTodoToAdd().toString());","lastModifiedDate":"2023-11-19"},{"lineNumber":21,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":22,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":23,"author":{"gitId":"jacqhal"},"content":"    @Test","lastModifiedDate":"2023-11-19"},{"lineNumber":24,"author":{"gitId":"jacqhal"},"content":"    public void test_parseDeadlineCommand() {","lastModifiedDate":"2023-11-19"},{"lineNumber":25,"author":{"gitId":"jacqhal"},"content":"        JoshuaParser parser \u003d new JoshuaParser();","lastModifiedDate":"2023-11-19"},{"lineNumber":26,"author":{"gitId":"jacqhal"},"content":"        String desc \u003d \"return book\";","lastModifiedDate":"2023-11-19"},{"lineNumber":27,"author":{"gitId":"jacqhal"},"content":"        DeadlineCommand expected \u003d new DeadlineCommand(desc, \"9 Sep 2023, 9:45 am\");","lastModifiedDate":"2023-11-19"},{"lineNumber":28,"author":{"gitId":"jacqhal"},"content":"        DeadlineCommand actual \u003d (DeadlineCommand) parser.parse(\"deadline return book /by 9/9/2023 0945\");","lastModifiedDate":"2023-11-19"},{"lineNumber":29,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":30,"author":{"gitId":"jacqhal"},"content":"        assertEquals(expected.getDeadlineToAdd().toString(), actual.getDeadlineToAdd().toString());","lastModifiedDate":"2023-11-19"},{"lineNumber":31,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":32,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":33,"author":{"gitId":"jacqhal"},"content":"    @Test","lastModifiedDate":"2023-11-19"},{"lineNumber":34,"author":{"gitId":"jacqhal"},"content":"    public void test_parseEventCommand() {","lastModifiedDate":"2023-11-19"},{"lineNumber":35,"author":{"gitId":"jacqhal"},"content":"        JoshuaParser parser \u003d new JoshuaParser();","lastModifiedDate":"2023-11-19"},{"lineNumber":36,"author":{"gitId":"jacqhal"},"content":"        EventCommand expected \u003d new EventCommand(\"annual bake sale\", \"9 Sep 2023, 9:45 am\", \"11 Sep 2023, 7:00 pm\");","lastModifiedDate":"2023-11-19"},{"lineNumber":37,"author":{"gitId":"jacqhal"},"content":"        EventCommand actual \u003d (EventCommand) parser.parse(\"event annual bake sale /from 9/9/2023 0945 /to 11/9/2023 1900\");","lastModifiedDate":"2023-11-19"},{"lineNumber":38,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":39,"author":{"gitId":"jacqhal"},"content":"        assertEquals(expected.getEventToAdd().toString(), actual.getEventToAdd().toString());","lastModifiedDate":"2023-11-19"},{"lineNumber":40,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":41,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":42,"author":{"gitId":"jacqhal"},"content":"    @Test","lastModifiedDate":"2023-11-19"},{"lineNumber":43,"author":{"gitId":"jacqhal"},"content":"    public void test_parseDateTime() {","lastModifiedDate":"2023-11-19"},{"lineNumber":44,"author":{"gitId":"jacqhal"},"content":"        JoshuaParser parser \u003d new JoshuaParser();","lastModifiedDate":"2023-11-19"},{"lineNumber":45,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":46,"author":{"gitId":"jacqhal"},"content":"        try {","lastModifiedDate":"2023-11-19"},{"lineNumber":47,"author":{"gitId":"jacqhal"},"content":"            assertEquals(\"9 Sep 2023, 09:45 am\", parser.parseDateTime(\"9/9/2023 0945\"));","lastModifiedDate":"2023-11-19"},{"lineNumber":48,"author":{"gitId":"jacqhal"},"content":"            assertEquals(\"9 Sep 2023, 09:45 am\", parser.parseDateTime(\"09/09/2023 0945\"));","lastModifiedDate":"2023-11-19"},{"lineNumber":49,"author":{"gitId":"jacqhal"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-11-19"},{"lineNumber":50,"author":{"gitId":"jacqhal"},"content":"            return;","lastModifiedDate":"2023-11-19"},{"lineNumber":51,"author":{"gitId":"jacqhal"},"content":"        }","lastModifiedDate":"2023-11-19"},{"lineNumber":52,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":53,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":54,"author":{"gitId":"jacqhal"},"content":"    @Test","lastModifiedDate":"2023-11-19"},{"lineNumber":55,"author":{"gitId":"jacqhal"},"content":"    public void test_parseDateTime_invalidCommandException() {","lastModifiedDate":"2023-11-19"},{"lineNumber":56,"author":{"gitId":"jacqhal"},"content":"        JoshuaParser parser \u003d new JoshuaParser();","lastModifiedDate":"2023-11-19"},{"lineNumber":57,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":58,"author":{"gitId":"jacqhal"},"content":"        // Invalid date format","lastModifiedDate":"2023-11-19"},{"lineNumber":59,"author":{"gitId":"jacqhal"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e parser.parseDateTime(\"9/239/2023 0945\"));","lastModifiedDate":"2023-11-19"},{"lineNumber":60,"author":{"gitId":"jacqhal"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e parser.parseDateTime(\"32/9/2023 1800\"));","lastModifiedDate":"2023-11-19"},{"lineNumber":61,"author":{"gitId":"jacqhal"},"content":"        // Invalid time format","lastModifiedDate":"2023-11-19"},{"lineNumber":62,"author":{"gitId":"jacqhal"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e parser.parseDateTime(\"9/9/2023 2930\"));","lastModifiedDate":"2023-11-19"},{"lineNumber":63,"author":{"gitId":"jacqhal"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e parser.parseDateTime(\"09/09/2023 945\"));","lastModifiedDate":"2023-11-19"},{"lineNumber":64,"author":{"gitId":"jacqhal"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e parser.parseDateTime(\"09/09/2023 9:45\"));","lastModifiedDate":"2023-11-19"},{"lineNumber":65,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":66,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-19"}],"authorContributionMap":{"jacqhal":66}},{"path":"src/test/java/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"package task;","lastModifiedDate":"2023-11-19"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-19"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-19"},{"lineNumber":6,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":7,"author":{"gitId":"jacqhal"},"content":"public class ToDoTest {","lastModifiedDate":"2023-11-19"},{"lineNumber":8,"author":{"gitId":"jacqhal"},"content":"    @Test","lastModifiedDate":"2023-11-19"},{"lineNumber":9,"author":{"gitId":"jacqhal"},"content":"    public void test_todo_toString(){","lastModifiedDate":"2023-11-19"},{"lineNumber":10,"author":{"gitId":"jacqhal"},"content":"        assertEquals(\"[T] [ ] read book\", new ToDo(\"read book\").toString());","lastModifiedDate":"2023-11-19"},{"lineNumber":11,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":12,"author":{"gitId":"jacqhal"},"content":"","lastModifiedDate":"2023-11-19"},{"lineNumber":13,"author":{"gitId":"jacqhal"},"content":"    @Test","lastModifiedDate":"2023-11-19"},{"lineNumber":14,"author":{"gitId":"jacqhal"},"content":"    public void test_todo_toStorageString(){","lastModifiedDate":"2023-11-19"},{"lineNumber":15,"author":{"gitId":"jacqhal"},"content":"        assertEquals(\"T | 0 | read book\", new ToDo(\"read book\").toStorageString());","lastModifiedDate":"2023-11-19"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"    }","lastModifiedDate":"2023-11-19"},{"lineNumber":17,"author":{"gitId":"jacqhal"},"content":"}","lastModifiedDate":"2023-11-19"}],"authorContributionMap":{"jacqhal":17}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jacqhal"},"content":"event hi","lastModifiedDate":"2023-10-18"},{"lineNumber":2,"author":{"gitId":"jacqhal"},"content":"event /from me /to you","lastModifiedDate":"2023-10-18"},{"lineNumber":3,"author":{"gitId":"jacqhal"},"content":"event hi /from /to you","lastModifiedDate":"2023-10-18"},{"lineNumber":4,"author":{"gitId":"jacqhal"},"content":"event hi /from me /to","lastModifiedDate":"2023-10-18"},{"lineNumber":5,"author":{"gitId":"jacqhal"},"content":"event hi /from me /to you","lastModifiedDate":"2023-10-18"}],"authorContributionMap":{"jacqhal":5}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"jacqhal"},"content":"if ! javac -cp ../src/main/java/wargames -Xlint:none -d ../bin ../src/main/java/wargames/*.java","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jacqhal":1,"-":37}}]
